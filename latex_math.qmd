# 레이텍 수식 입력의 기초

콰르토는 팬독에 기반하고, 팬독 마크다운에서 수식은 레이텍 수식 입력법에 기초를 두고 있다. 이 장은 레이텍 수식에 대한 기초 지식이 없는 독자들을 위해 레이텍 수식을 만드는 방법을 설명하고자 한다. 레이텍 수식이 입력되는 환경은 텍스트와 많이 다르기 때문에 그 기초를 알고 시작하면 좋다. RStudio 통합개발환경과 VS Code는 수식을 작성하면 수식 미리보기가 되기 때문에 수식을 작성할 때 편리하고, 연습해 보기도 좋다.

![VS Code에서의 수식 미리보기 기능](images/vscode_quarto_eq.png){#fig-vscode-eqn}

## 인라인 수식과 디스플레이 수식

인라인 수식은 문단 안에서 일반적인 텍스트와 같이 놓이는 수식을 말한다. $y = f(x)$와 같은 것이다. 반면 디스플레이 수식은 한 행을 다 사용하는 수식으로 다음과 같이 표시되는 것을 말한다.

$$
\lim_{a \to \infty} \frac{f(x) - f(a)}{x - a}
$$

팬독 마크다운에서 수식을 입력하는 규칙은 다음과 같다. 

1. 인라인 수식

    `$`와 `$` 사이에 레이텍 수식을 넣는다. 단, 처음 `$` 다음에는 공백이 없어야 하고, 두 번째 `$` 앞에도 공백이 없어야 한다. 즉, `$y = f(x)$` 같이 쓴다.

1. 디스플레이 수식

    `$$`와 `$$`로 경계를 만들고 그 안에 레이텍 수식을 넣는다.

    ```
    $$
    \lim_{a \to \infty} \frac{f(x) - f(a)}{x - a}
    $$
    ```

이렇게 `$` 기호를 사용하여 만드는 인라인 수식, 디스플레이 수식은 레이텍에는 `math` 환경이라고 부른다. 

더불어 팬독에서는 이런 수식 끝에 `{}`을 사용하여 이 수식의 속성을 지정할 수 있다.


## 레이텍 수식의 기본 규칙

레이텍 수식을 작성하기 위해서 알아야할 기본 규칙에 대해서 알아보자. 우선 **math 환경 안에서 수식에서 공백은 무시**되는 점을 알 필요가 있다. 그러니까 아래와 같이 작성해도 수식은 레이텍이 알아서 추가된다. 또는 공백을 일부러 주기 위해서 스페이스 키를 여러 번 눌러서 공간을 주어도 이것은 다 무시된다. 공백을 주는 방법은 뒤에서 설명한다. `align` 환경과 그 안에서 줄바꿈을 위한 `\\`은 지금은 무시하고, 수식 안의 공백에 주목한다.

``` markdown
$$
\begin{align}
    a+b=c \\
    x   +   y   =  z
\end{align}
$$
```

이것은 다음과 같이 렌더링된다.

$$
\begin{align}
a+b=c \\
x   +   y   =  z
\end{align}
$$

따라서, `math` 환경 안에서 띄어쓰기를 사용하여 텍스트를 입력해도 공백이 무시되기 때문에 단어들이 붙어서 출력된다. 다음은 그런 예이다.

``` markdown
$$
a b c def ghij
$$
```

이것은 다음과 같이 렌더링된다.

$$
a b c def ghij
$$

이것을 제대로 표현하기 위해서는 `\text`라는 명령을 사용하고, 명령에 대한 인자(뒤따르는 `{}`)에 사용할 텍스트를 입력한다. 다음에서 다른 문법은 무시하고 `\text` 명령 부분을 주목한다.

``` markdown
$$
A = \{\, x \mid x \in X_{i}, \text{ for some } i \in I \,\}
$$
```

이것은 다음과 같이 렌더링된다.

$$
A = \{\, x \mid x \in X_{i}, \text{ for some } i \in I \,\}
$$

그리고 어떤 명령어 다음의 공백은 레이텍을 그것을 공백으로 잘 인식한다. 다음에서 `\quad` 명령어가 사용되고 다음에 `b`가 있는데 이 빈칸은 빈칸으로 인식한다는 뜻이다.

``` markdown
$a \quad b$
```

일반 문장에서의 공백 처리와 수식 안에서의 공백 처리가 다르기 때문에, 레이텍 고수들은 수식에 쉼표가 있는 경우 그 쉼표를 수식 밖에 사용할 것을 권고한다. 예를 들어 "$a$, $b \in B$"을 표현한다고 했을 때, 

다음과 같이 쓰지 말고,

``` markdown
$a, b \in B$
```

다음과 같이 수식을 분리하고, 쉼표를 수식 밖으로 뺄 것을 권고한다.

``` markdown
$a$, $b \in B$ 
```

## 수식의 기본 요소들 

이 절에서는 수식을 이루는 기본 요소들에 대해서 알아보자.


### 연산 기호 

먼서 연산 기호들이다. 덧셋, 뺄셈, 곱하기, 나누기 등은 일반적인 형태로 그대로 쓰면 된다. 연산 기호는 보통 앞 뒤에 빈칸을 두고 쓰는 것이 일반적이다.


``` markdown
$a + b$, $a - b$, $-a$, $a b$, $a / b$ 
```

이것은 다음과 같이 렌더링된다. 

$a + b$, $a - b$, $-a$, $a b$, $a / b$ 

곱셈과 나눗셈을 $a \cdot b$, $a \times b$, $a \div b$과 같이 표시하기 위해서는 다음과 같이 적는다.

``` markdown
$a \cdot b$, $a \times b$, $a \div b$
```

디스플레이 수식에서 나눗셈은 `\frac{분자}{분모}` 명령을 사용한다.

``` markdown
$$
\frac{a + b}{a + b + c +d}
$$
```

$$
\frac{a + b}{a + b + c +d}
$$

### 위, 아래 첨자

다음은 아래 첨자, 윗첨자를 쓰는 방법을 알아보자. 아래 첨자는 `_{}`를 사용하고 윗첨자는 `^{}`을 사용한다. 


``` markdown
$$
a_{1},\ a_{i_{1}},\ a_{1}^{2},
$$
```

$$
a_{1},\ a_{i_{1}},\ a_{1}^{2},
$$

프라임 기호는 `'`를 그냥 써도 된다. 

``` markdown
$$
y = f'(x)
$$
```

$$
y = f'(x)
$$


### 이항 계수 

다음은 이항 계수(binomial coefficient)를 표시하는 방법이다. `\binom`이라는 명령을 사용한다.

``` markdown
$$
\binom{a}{b + c}
$$
```

$$
\binom{a}{b + c}
$$

### 생략 부호

생략 부호(ellipsis, `...`)는 기본적으로 `\dots` 명령을 사용하여 표시한다. 그런데 상황에 따라서 레이텍은 생략 부호를 아래 또는 중앙에 배치한다. 

``` markdown
$$
F(x_{1}, x_{2}, \dots, x_{n})
$$
```

$$
F(x_{1}, x_{2}, \dots, x_{n})
$$


``` markdown
$$
x_{1} + x_{2} + \dots + x_{n}
$$
```

$$
x_{1} + x_{2} + \dots + x_{n}
$$

만약 레이텍이 자동으로 설정된 위, 아래 생략 부호가 원하는 형태가 아닌 경우에는 명시적으로 `\ldots` (low), `\cdots` (center) 명령을 사용한다.

``` markdown
$$
x_{1} + x_{2} + \ldots + x_{n}
$$
```

$$
x_{1} + x_{2} + \ldots + x_{n}
$$


### 적분 

적분 기호는 `\int`라는 명령을 사용하고, 구간은 아래첨자, 윗첨자를 사용하여 표시한다. 아래에서 `\,`은 `\thinspace` 명령의 축약형으로 좁은 공간을 둘 때 사용하는 명령이다.

``` markdown
$$
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
$$
```

$$
\int_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
$$

만약, 구간을 적분 기호 위와 아래에 표시하고자 하면 `\limits`라는 명령을 사용한다.

``` markdown
$$
\int\limits_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
$$
```


$$
\int\limits_{-\infty}^{\infty} e^{-x^{2}} \, dx = \sqrt{\pi}
$$


### 제곱근 

제곱근은 `\sqrt`  명령으로 만든다. 

``` markdown
$$
\sqrt{a + 2b + c^{2}}
$$
```

$$
\sqrt{a + 2b + c^{2}}
$$

세제곱근과 같이 루트 기호 앞에 표시하려면 `\leftroot{}`, `\uproot{}` 명령을 사용하는데, 인자에 숫자를 써서 위치를 조정할 수 있다. 이와 같이 사용하는 경우 `[` 다음 공백을 주면 에러가 발생하니, 공백을 주지 않게 한다.

``` markdown
$$
\sqrt[\leftroot{2} \uproot{2} 3]{5}
$$
```


$$
\sqrt[\leftroot{2} \uproot{2} 3]{5}
$$

### 악센트

수학 악센트는 다음과 같은 명령들을 사용한다.

- `$\bar{a}$`: $\bar{a}$
- `$\hat{a}$`: $\hat{a}$
- `$\tilde{a}$`: $\tilde{a}$
- `$\vec{a}$`: $\vec{a}$

### 행렬

행렬은 `matrix` 환경으로 만드는데, 요소 사이는 `&`으로 구분하고, 행 구분은 `\\`을 사용한다. 단, 마지막에는 이 행 구분 기호를 사용하지 않는다. 

``` markdown
$$
\begin{matrix} 
a + b + c & uv    & x - y & 27\\ 
a + b     & u + v &   z   & 134 
\end{matrix}
$$
```

$$
\begin{matrix} 
a + b + c & uv    & x - y & 27\\ 
a + b     & u + v &   z   & 134 
\end{matrix}
$$

`matrix` 환경은 수식 경계를 포함하지 않는다. 수식 경계를 만들 때는 `pmatrix`(parenthesis, 괄호), `vmatrix`(vertical, 수직) 환경을 사용한다.

``` markdown
$$
\begin{pmatrix}
a + b + c & uv\\
a + b & u + v 
\end{pmatrix}
$$
```

$$
\begin{pmatrix}
a + b + c & uv\\
a + b & u + v 
\end{pmatrix}
$$

``` markdown
$$
\begin{vmatrix}
30 & 7\\
3 & 17 
\end{vmatrix}
$$
```

$$
\begin{vmatrix}
30 & 7\\
3 & 17 
\end{vmatrix}
$$

``` markdown
$$
\begin{pmatrix}
a + b + c & uv\\
a + b & u + v 
\end{pmatrix}
\begin{vmatrix}
30 & 7\\
3 & 17 
\end{vmatrix}
$$
```


$$
\begin{pmatrix}
a + b + c & uv\\
a + b & u + v 
\end{pmatrix}
\begin{vmatrix}
30 & 7\\
3 & 17 
\end{vmatrix}
$$

### 오퍼레이터 

싸인함수 $\sin x$를 쓸 때는 `$\sin x$`라고 쓴다. 만약 `$sin x$`라고 쓰면 레이텍은 빈칸을 무시하기 대문에 `sinx`라고 출력한다. 이런 종류의 명령들을 레이텍 수학에는 오퍼레이터(operator)라고 부른다. 이런 오퍼레이터에는 `\sin`과 '극한'이 없는 오퍼레이터와 극한이 있는 오퍼레이터로 구분한다.

``` markdown
$$
\sin(a + b) = \sin a \cos b + \cos b \sin a
$$
```


$$
\sin(a + b) = \sin a \cos b + \cos b \sin a
$$


극한이 있는 오퍼레이터는 다음과 같이 작성할 수 있다. 

``` markdown
$$
\lim_{h \to 0 } \frac{f(x+h)-f(x)}{h}
$$
```

$$
\lim_{h \to 0 } \frac{f(x+h)-f(x)}{h}
$$

이런 명령은 인라인으로 표시될 때는 $\lim_{h \to 0 } \frac{f(x+h)-f(x)}{h}$과 같이 된다.

### 빅 오퍼레이터 

시스마($\sum$) 등을 레이텍에서는 빅 오퍼레이터라고 부른다. 

`$\sum_{i=1}^{n}x_{i}^{2}$`을 인라인으로 표시하면, $\sum_{i=1}^{n}x_{i}^{2}$ 된다. 반면 이것을 디스플레이 모드로 출력하면 다음과 같다. 

$$
\sum_{i=1}^{n}x_{i}^{2}
$$

잘 보면, 이런 빅 오퍼레이터에 첨부된 아래 첨자, 위 첨자가 표시되는 방법은 다음과 같이 정리할 수 있다.

- 인라인: 오퍼레이터 옆에 표시 
- 디스플레이: 오퍼레이터 위, 아래에 표시 

이와 같은 표시 방법을 바꾸고 싶다고 하자. 

인라인에서 오퍼레이터 위, 아래에 표시하고자 한다면, `\limits`라는 명령을 사용한다.

- `$\sum\limits_{i=1}^{n}x_{i}^{2}$`을 보면: $\sum\limits_{i=1}^{n}x_{i}^{2}$을 보면

디스플레이 수식에서 빅 오퍼레이터 옆에 표싯하고자 한다면, `\nolimits`라는 명령을 사용한다.

``` markdown
$$
\sum\nolimits_{i=1}^{n}x_{i}^{2}
$$
```

$$
\sum\nolimits_{i=1}^{n}x_{i}^{2}
$$

`\sum` 명령과 더불어 곱을 의미하는 `\prod` 명령도 자주 사용된다.

``` markdown
$$
\prod_{k=0}^{n - 1} T’(x_{k})
$$
```

$$
\prod_{k=0}^{n - 1} T’(x_{k})
$$



## 수식 경계 

수식 $[(a*b)+(c*d)]^2$에는 `()`와 `[]`라는 2가지 수식 경계가 포함되어 있다. 수식 경계는 하부 수식의 구역을 나누는 역할을 하는 것들을 말하는 것으로, 표 [-@tbl-delimiters]에 레이텍에서 사용되는 수식 경계들이 정의되어 있다. 이런 경계는 `\left`, `\right` 명령을 사용하여 늘려 사용할 수 있다. 이 명령에 `.`을 붙이면 이 경우는 경계가 없다는 뜻이 된다.

다음은 이중 수직선을 사용한 예이다.

``` markdown
$$
\| a \|
$$
```

$$
\| a \|
$$

다음은 수직선(`|`) 경계를 `\left`, `\right` 명령에 붙여서 사용한 경우이다. 경계가 늘어난다.

``` markdown
$$
\left| \frac{a + b}{2} \right|
$$
```

$$
\left| \frac{a + b}{2} \right|
$$

다음도 비슷한 예이다. 

``` markdown
\left( \frac{1 + x}{2 + y^{2}} \right)^{2}
```


$$
\left( \frac{1 + x}{2 + y^{2}} \right)^{2}
$$

다음은 `\left.` 명령으로 왼쪽에 수식 경계를 사용하지 않은 예이다. 

``` markdown
$$
\left. F(x) \right|_{a}^{b}
$$
```
$$
\left. F(x) \right|_{a}^{b}
$$

```{r}
#| echo: false
#| label: tbl-delimiters
#| tbl-cap: "레이텍 수식에 쓰이는 주요 수식 경계"
library(tibble)
library(gt)
df <- tribble(~명칭, ~명령, ~표시,
              "왼쪽 소괄호",      '(', '(',
              "오른쪽 소괄호",    ')', ')',
              "왼쪽 대괄호",      "[ 또는 \\lbrack", "[",
              "오른쪽 대괄호", "] 또는 \\rbrack", "]",
              "왼쪽 중괄호", "\\{", "{",
              "오른쪽 중괄호", "\\}", "}",
              "백슬래쉬", "\\backslash", "\\",
              "빗금(슬래쉬)", "/", "/",
              "왼쪽 홑화살괄호(angle bracket)", "\\langle", "<",
              "오른쪽 홑화살괄호(angle bracket)", "\\rangle", ">",
              "수직선", "| 또는 \\vert", "|",
              "이중 수직선", "\\| 또는 \\Vert", "||",
              "왼쪽 바닥", "\\lfloor", "⌊",
              "오른쪽 바닥", "\\rfloor", "⌋",
              "왼쪽 천장", "\\lceil", "⌈",
              "오른쪽 천장", "\\rceil", "⌉",
              "위쪽 화살표", "\\uparrow", "↑",
              "이중 위쪽 화살표", "\\Uparrow", "⇑",
              "아래쪽 화살표", "\\downarrow", "↓",
              "이중 아래쪽 화살표", "\\Downarrow", "⇓",
              "위-아래 화살표", "\\updownarrow", "↕",
              "이중 위-아래 화살표", "\\Updownarrow", "\U21D5",
              "왼쪽 위 모서리", "\\ulcorner", "\U231C",
              "오른쪽 위 모서리", "\\urcorner", "\U231D",
              "왼쪽 아래 모서리", "\\llcorner", "\U231E",
              "오른쪽 아래 모서리", "\\lrcorncer", "\U231F"
              )
df %>% gt() %>% 
    opt_row_striping(row_striping = TRUE)
```



$$
$\{\, x \mid x^{2} \leq 2 \, \}$
$$


## 수평 괄호, 선, 화살표

아래와 같이 수평 괄호, 선, 화살표 등은 `\overbrace`, `\underbarace`, `\overline`, `\underline`, `\overleftarrow` 등과 같은 명령을 사용하여 만든다.

``` markdown
$$
\overbrace{a + b + \dots + z}^{n}
$$
```

$$
\overbrace{a + b + \dots + z}^{n}
$$

``` markdown
$$
\underbrace{a + a + \dots + a}_{n}
$$
```

$$
\underbrace{a + a + \dots + a}_{n}
$$

``` markdown
$$
\overline{x + y}
$$
```

$$
\overline{x + y}
$$

``` markdown
$$
\overleftarrow{aaa}
$$
```

$$
\overleftarrow{aaa}
$$

## 공백의 너비를 지정하는 명령 

레이텍 수학 환경에서 공백은 무시되고, 레이텍이 공백을 결정하는데, 어떤 경우에는 일부로 공백을 지정할 필요가 있다. 이 경우 사용할 수 있는 명령들이 있다. thin space 명령인 `\,`, 1 em을 주기 위한 `\quad` 명령 등이 있다.

이 명령에 대한 예제는 [Spacing in math mode](https://www.overleaf.com/learn/latex/Spacing_in_math_mode)을 참고한다.

## 복수의 행에 걸친 수식

레이텍을 가지고 여러 행에 걸친 수식을 작성할 수도 있다. 여러 가지 방법이 있는데, 우선 단순한 `align` 환경을 사용한 방법이다. 

``` markdown
$$
\begin{align}
r^{2}  &= s^{2} + t^{2},\\
2u + 1 &= v + w^{\alpha},\\
x      &= \frac{y + z}{\sqrt{s + 2u}};
\end{align}
$$ 
```

여기서 `\\`는 줄바꿈을 지시하고, `&`는 정렬 지점을 가리킨다. 보통 등호를 기준으로 맞추는 경우가 많아 등호 앞에 `&`를 붙혔다.

$$
\begin{align}
r^{2}  &= s^{2} + t^{2},\\
2u + 1 &= v + w^{\alpha},\\
x      &= \frac{y + z}{\sqrt{s + 2u}};
\end{align}
$$


다음은 `align` 환경에서 각 수식에 주석을 붙이는 경우이다. 이런 경우 주석의 위치는 `&&`을 가지고 맞춘다.

``` markdown
$$
\begin{align}
x &= x \wedge (y \vee z)
    &&\text{(by distributivity)}\\
  &= (x \wedge y) \vee (x \wedge z)
    &&\text{(by condition (M))} \\
    &= y \vee z.
\end{align}
$$
```


$$
\begin{align}
x &= x \wedge (y \vee z)
    &&\text{(by distributivity)}\\
  &= (x \wedge y) \vee (x \wedge z)
    &&\text{(by condition (M))} \\
    &= y \vee z.
\end{align}
$$

다음은 `cases` 환경을 사용하는 경우이다. 이 경우에도 `&`를 사용하여 정렬한다.

``` markdown
$$
f(x)= 
\begin{cases}
-x^{2},     &\text{if $x < 0$;}\\ 
\alpha + x, &\text{if $0 \leq x \leq 1$;}\\ 
x^{2},      &\text{otherwise.}
\end{cases}
$$
```

$$
f(x)= 
\begin{cases}
-x^{2},     &\text{if $x < 0$;}\\ 
\alpha + x, &\text{if $0 \leq x \leq 1$;}\\ 
x^{2},      &\text{otherwise.}
\end{cases}
$$

