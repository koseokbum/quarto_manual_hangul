# YAML로 메타 정보 입력

콰르토를 사용할 때 문서 렌더링에 영향을 주는 메타 데이터 등은  **YAML 문법**을 사용하여 지정한다. 그래서 이 장에서는 먼저 간단한 YAML 문법을 설명하고, 콰르토에서는 어떤 체계로 사용되는지 설명한다.

먼저 YAML의 기초 문법을 데해서 살펴보자.

## YAML이란? {#AboutYAML}

[YAML](https://ko.wikipedia.org/wiki/YAML)은 데이터 직렬화(data serialization) 언어의 일종이다. 데이터 직렬화라고 하는 것은 어떤 데이터를 통신 등에 편리한 형태로 바꾸는 과정을 말한다. 그것을 다시 되돌려 원래의 데이터를 얻는 과정을 역직렬화(deserialization)이라고 한다. 웹 API 등에서 사용되는 XML, JSON 같은 언어들이 여기에 속한다.

YAML은 XML, JSON 언어보다 **가독성**을 중시한 언어로 콰트토에서의 사용 예처럼 프로그램 설정값들을 지정하는 용도로 많이 사용된다. 프로젝트 수준에서는 `_quarto.yml`이라고 하는 파일을 사용하고, 파일 수준에서는 파일 맨 처음 나오는 부분에 **YAML 헤더**라고 하는 부분을 뒤서 해당 파일 내용에 적용될 옵션들을 설정하고, 코드 블록 수준에서는 코드 블록의 처음에 `#|`라고 적는 특수한 코멘트를 사용하여 그 뒤에 YAML로 코드에 적용될 옵션을 지정한다. 팬독 시스템은 YAML로 지정된 값들은 팬독 템플릿(templates)에서 지정된 위치로 값이 전달하여 최종적인 결과물로 프로세싱한다.

콰르토를 사용하기 위해서 YAML 전체 문법 체계를 다 이해할 필요는 없지만, 꼭 알아두면 좋은 것들만 추려서 소개하고자 한다.

### YAML 문법

YAML에서 사용되는 주요 규칙들이다. YAML에서는 `필드이름: 값`과 같이 쌍점(콜론)을 사용하여 필드 이름에 값을 부여한다. YAML에서는 이것을 매핑(mapping)이라고 부른다. 지켜야할 규칙은 쌍점 다음에 반드시 하나의 빈칸을 두고 나서 값을 지정해야 한다는 점이다. 각각의 필드는 새로운 행에서 정의된다. 다음은 `title`, `author`, `format`에 대한 필드 이름과 그 값을 지정한 예이다.

``` .yaml
---
title: YAML에 대하여 
author: 홍길돌
format: html
---
```

YAML에서는 스페이스를 사용하여 들여쓰기(indentation)를 표현한다(탭을 사용하지 않는다). 즉, YAML은 들여쓰기(indentation)을 사용하여 데이터의 위계 구조를 표현하고, 같은 수준에 있는 항목들은 똑같은 들여쓰기를 유지해야 한다.

위에 YAML에서 `formt: html`에서 `html`에 세부 내용을 추가하려고 한다. 그렇게 하려면 먼저 `html`을 `format`의 하부로 이동한다. 들여쓰기(여기서는 공백 2개를 사용)을 하여 하위 필드임을 표시한다. 그런 다음 `html` 필드의 하부 필드를 지정하기 하기 위해서 `html` 다음에 쌍점을 찍은 다음, 줄을 바꾸고 다시 들여쓰기를 하여 원하는 세부 내용을 지정한다. `toc: true`라는 의미는 목차(table of contents)를 넣으라는 의미이다.

``` .yaml
---
title: YAML에 대하여 
author: 홍길돌
format: 
  html:
    toc: true
---
```

다음에 `format: html`에 `number-sections`라는 필드를 추가할 때는 `toc: true`와 같은 수준에 있는 값이기 때문에 다음과 같이 들여쓰기를 맞추어 지정한다. 장절 번호를 준다는 의미이다.

``` .yaml
---
title: YAML에 대하여 
author: 홍길돌
format: 
  html:
    toc: true
    number-sections: true
---
```

YAML 코멘트는 `#` 기호를 사용하고, 한 행의 앞에서 또는 뒤에서 사용할 수 있고 그 뒤에 오는 것 내용은 컴퓨터가 읽을 때 무시한다. 다음은 코멘트를 추가한 YAML이다.

``` .yaml
---
# 다음은 YAML의 한 예이다.
title: YAML에 대하여 
author: 홍길돌
format: 
  html:
    toc: true
    number-sections: true
---
```

이 문서의 포맷을 `html` 뿐만 아니라 `pdf`로 만들고도 싶어서 `pdf` 포맷을 추가하려고 한다. 그렇게 하려면 `html`과 수준을 맞추어서 `pdf` 포맷을 지정한다. 그리고 `pdf` 필드 하부로 필요한 세부 매핑을 지정한다. PDF 문서를 만드는 방법은 뒤에서 자세하게 설명된다. 여기서 중요한 내용은 `format`의 하부 필드로서 `html`과 `pdf`는 같은 수준으로 지정하는 것이기 때문에 그 들여쓰기 수준을 맞추는 것이다.

``` .yaml
---
# 다음은 YAML의 한 예이다.
title: YAML에 대하여 
author: 홍길돌
format: 
  html:
    toc: true
    number-sections: true
  pdf:
    toc: true
    pdf-engine: xelatex
---
```

YAML에서 R의 벡터나 파이썬의 리스트와 같이 하나의 필드에 여러 개의 값을 지정하려면 **YAML 리스트**를 사용한다. YAML 리스트는 2 가지 방법으로 표현할 수 있다.

1.  각 항목들을 새로운 행에서 `-`로 시작하여 지정한다. 항목들은 같은 수준의 들여쓰기를 유지해야 하며, `-` 다음에는 빈칸을 반드시 두고 난 다음 값을 입력한다. `-`의 들여쓰기 수준이 상위 필드와 같은 수준을 유지해도 된다.

1.  파이썬 리스트와 같이 `[]` 안에 코마로 구분하여 작성한다(이것을 flow style이라고 한다).

다음은 RStudio에서 콰르토 프로젝트로 책을 만드는 예시로 사용되는 `_quarto.yml` 파일의 내용으로 `book: chapters`라는 필드를 보자.

``` .yaml
project:
  type: book

book:
  title: "hello"
  author: "Jane Doe"
  date: "1/6/2022"
  chapters:
    - index.qmd
    - intro.qmd
    - summary.qmd
    - references.qmd

bibliography: references.bib

format:
  html:
    theme: cosmo
  pdf:
    documentclass: scrreport
```

`book`이라고 가장 높은 수준의 필드가 있고, 그 아래 `title`, `author`, `date`, `chapters`가 있다. 그리고 `chapters` 아래에 책을 만들 때 하나의 장(chapter) 역할을 하는 파일 이름들이 나열되어 있다. `index.qmd`에서 `references.qmd`까지 4개의 파일은 `chapters`라고 하는 리스트 안에 들어가는 값이다. 이것을 다음과 같이 표현할 수 있다.

``` .yaml
# 생략
book:
  title: "hello"
  author: "Jane Doe"
  date: "1/6/2022"
  chapters: [index.qmd, intro.qmd, summary.qmd, references.qmd]
# 이하 생략
```

따라서 YAML에서 하이픈으로 연결되는 필드를 보는 경우에는, 같은 수준으로 하이픈으로 시작하는 값들과 함께 그 상위 필드의 리스트 값의 하나라는 점을 기억하자.

앞에서 보는 바와 같이 YAML 값으로 사용되는 문자열(string)은 (1) 따옴표를 사용하지 않거나, (2) 작은따옴표/큰따옴표를 사용하여 표시하여 사용할 수 있다. 따옴표를 사용해야 하는 대표적인 경우는 `:`, `{`, `}`, `[`, `]`, `&`, `*`, `#`, `?`, `|`, `-`, `<`, `>`, `=`, `!`, `%`, `@`, `\` 등과 같이 특수문자를 포함하는 경우이다. 다음은 그러한 예이다. 만약 따옴표를 사용하지 않는 경우에는 `Quarto:`라고 하는 부분이 YAML 필드를 정의 방법과 헷갈릴 수 있어서 이런 경우에는 따옴표를 필요로 한다.

``` .yaml
---
title: "Quarto: 최고의 데이터 과학 실행 환경이자 재현가능 과학기술 저술 및 논문 작성 플랫폼"
author: 홍길동
---
```

이 정도 알아도 콰르토 작업하는 데 큰 문제는 없을 것이다.

## 콰르토에서 YAML 사용

콰르토는 옵션 설정을 YAML을 사용하여 하는데, 크게 보면 프로젝트 폴더 전체, 프로젝트 안의 어떤 폴더, 파일, 코드 블록에서 옵션들이 설정된다. 꼭 알아야 하는 순서대로 정리해 보자.

### YAML 헤더 {#sec-yaml-header}

콰르토 소스 문서는 보통 `---`와 시작하여 `---`로 끝나는 YAML 헤더로 시작된다. 이 YAML 헤더 안에 이 파일에 적용할 설정값을 지정한다. 다음은 YAML 헤더의 예시이다.

```{verbatim}
---
title: "붓꽃을 대신할 팔머 펭귄 데이터"
subtitle: "De-iris 운동"
author: sbko
bibliography: references.bib
format: 
    html:
        toc: true
        number-sections: true
        code-fold: true
---
```

위에서 `title`, `subtitle`, `author` 필드는 굳이 설명하지 않았도 될 것 같다. `bibliography` 필드는 참고문헌을 저장한 `.bib` 파일을 가리킨다. `format`은 문서의 포맷을 지정하는 필드이다. 이런 YAML 헤더를 작성할 때는 다음을 주의해야 한다.

- YAML 문법에 맞아야 한다. 문법에 맞지 않으면 렌더링되지 않는다.
- 콰르토는 [팬독 템플릿 시스템](https://pandoc.org/MANUAL.html#templates)을 사용하여 이 `필드: 값`을 사용한다. 따라서 설령 문법에 맞다고 하더라고 그게 팬독 템플릿에서 미리 지정한 것이 아니라면 아무런 역할을 하지 못한다. 
- 팬독 템플릿에 어떤 값들을 사용할 수 있는지는 콰르토 웹페이지를 참고한다. 콰르토 사이트의 [레퍼펀스](https://quarto.org/docs/reference/)을 보면 문서 포맷별로 사용할 수 있는 필드들을 확인할 수 있다. 



::: {.callout-tip}
## 빨리 익히는 방법 

콰르토 필드들은 문서의 포맷에 상관없이 적용될 수 있도록 정리되어 있다. 따라서 하나의 포맷에 대한 필드들을 잘 알면 다른 포맷에 적용하는 것이 그다지 어렵지 않다. 따라서 처음 연습할 때는 HTML 포맷(`format: html`)을 중심으로 익히는 것이 좋다.

:::

## 콰르토 YAML 옵션

처음 콰르토를 사용할 때 옵션들이 한꺼번에 나열하기 조차 어려울 정도로 매우 많아 어리둥절 할 수도 있을 것이다. 대부분의 것들이 이 옵션들에 의해서 조절되고 이것을 다양한 방법으로 조절할 수 있기 때문에 그러하다. 내가 보았을 때 콰르토 YAML 옵션들은 크게 3개의 카테고리로 나누어 볼 수 있을 것 같다. 

1. 문서의 물리적, 기능적 요소들과 관련된 옵션들 

1. 코드와 관련된 옵션들 

1. 외부 리소스 끌어 오는 등과 같은 특수한 목적의 옵션들 

문서의 물리적, 기능적 요소들이란 제목(`title`), 저자(`author`), 날짜(`date`), 문서의 출력 포맷을 정하는 `format`, 목차를 넣을지 결정하는 `toc`, 장절 번호를 넣을지 결정하는 `number-sections` 등이 있다.

코드와 관련된 옵션들로는 크게 엔진을 선택하는 옵션, 코드를 표시할지 결정하는 `echo`, 코드를 가릴지 정하는 `code-fold` 등의 아주 다양한데, 이들 옵션에 대해서는 별도로 설명한다. 

외부 리소스를 끌어 오는 등과 같은 특수 목적의 옵션들은, 예를 들어 참고 문헌 파일을 읽는 `bibliography`, `include-in-header`와 같이 외부 패키지나 라이브러리 등을 불러 오는 옵션들이 있다. 

암기할 필요는 전혀 없고, 사용하는 문서 포맷이 있는 경우 콰르토 문서를 보면 포맷별로 설명이 잘 되어 있어, 필요할 때마다 참고하면 될 것이다. 


개별 코드 블록에서 옵션을 지정할 때는 `#|` 이라는 특별히 마련된 코멘트를 사용한다. 이 내용은 코드 블록에 깊이 연관되기 때문에 코드 블록을 설명할 때 같이 설명한다.

### 문서의 제목, 저자, 날짜, 요약, 목차과 관련된 옵션 

YAML 헤더에서 제목은 `title`, 부제목은 `subtitle` 필드를 사용하여 지정한다. 기본적으로 저자는 `author` 또는 `authors` 필드를 사용하고, 날짜는 `date` 필드를 사용하여 지정한다. 

``` markdown
---
title: "문서의 제목"
subtitle: "문서의 제목"
author: sbko
date: "01/03/2023"
---
```

콰르토에 `date` 필드에 값을 주는 방법은 [Quarto Dates and Date Formatting](https://quarto.org/docs/reference/dates.html#date-formatting)를 참고한다. 기본적으로 `MM/dd/yyyy`, `MM-dd-yyyy` 형식으로 사용한다. 영어로 문서를 만드는 경우에는 이런 것을 그대로 사용해도 무방하겠지만 한글을 사용하는 경우에는 `date-format` 필드를 사용하여 포맷을 정해준다. 위 사이트에 관련된 내용이 정리되어 있는데 "2023년 1월 7일"과 같은 형태로 표시하기 위해서는 `date-format: "YYYY년 M월 D일"`로 지정해 준다. `date` 필드에 `today`, `now`, `last-modified`라고 하는 특수한 값을 사용하면 다이내믹하게 날짜/시간을 줄 수 있다.

``` markdown
---
title: "문서의 제목"
subtitle: "문서의 제목"
author: sbko
date: today
date-format: "YYYY년 M월 D일"
---
```

저자는 기본적으로 `author`나 `authors` 필드에 입력하는데, 저자(들)의 정보를 처리하고 표시하는 문제가 그렇게 간단하지만은 않은데, 이것은 뒤에서 콰르토 익스텐션을 설명하고 다시 설명할 기회가 있을 것이다.

문서의 요약문은 `abstract`라고 하는 필드에 저장한다. 요약문을 여러 문장으로 구성될 수 있기 때문에 이런 경우에는 YAML 블록을 사용한다. YAML 블록을 사용할 때는 `|`나 `>`을 사용하는데, 원래는 줄바꿈을 유지할지 무시할지에 따라 구분해서 사용한다고 되어 있는데, 콰르토에서는 이를 구분하지 않는 것으로 보인다. `abstract-title`로 요약문의 제목을 지정할 수 있다.

``` markdown
---
abstract-title: "요약하기"
abstract: |
  데이터 과학에서 흔히 사용되는 iris 데이터를 더이상 사용하지 
  말자는 의견들이 있고, 대신해서 남극 펭귄 데이터를 사용하자
  의견이 있는데 이 데이터에 대해서 간략히 알아보고자 한다.
---
```

![요약문](images/abstract.png){#fig-abstract width="50%"}

목차를 넣을지는 `toc` 필드로 정하는데 `true`라고 하면 목차를 넣게 된다. `toc-depth`는 어느 수준까지 목차를 넣을지 결정한다. 장절의 번호를 줄지를 결정하는 것은 `number-sections`이다. 이 `true`라고 하면 장절에 숫자가 부여된다. 콰르토에는 이외에도 더 많은 옵션들이 있다. 세부적인 내용들을 뒤에서 더 자세하게 다뤄질 것이다.

### 문서 포맷과 관련된 옵션 

문서의 포맷은 `format` 필드에서 지정한다. 콰르토는 팬독에 의존하기 때문에 팬독 마크다운으로 작성된 문서를 다양한 포맷의 문서로 전환시킬 수 있다. 배울 때는 기본적으로 HTML, PDF, 워드 문서로 출력하는 것을 익힐 필요가 있다. PDF 문서를 렌더링할 때는 컴퓨터에 레이텍({{< latex >}})이 설치되어 있어야 한다. 레이텍 설치는 [-@sec-latex-setting] 절을 참고한다. 문서 포맷별 자세한 내용은 뒤에서 다시 설명될 것이다. 여기서는 `format` 필드 사용법에만 간략히 정리하고자 한다.

`format` 필드의 값으로 `html`, `docx`, `pdf` 등을 입력하여 포맷을 정한다. 만약 콰르토에서 미리 디폴트로 설정된 형태로 문서를 작업할 때는 아무런 하위 옵션을 주지 않아도 된다.

``` markdown
---
format: html
---
```

보통은 문서 포맷에 따라 원하는 결과가 다를 수 있고, 또 포맷에 따라 사용할 수 있는 옵션들이 있기 때문에 해당 포맷의 하위 필드별로 세부 옵션을 정하게 된다. 만약 문서의 차례를 주고자 한다는 `toc: true`를 주고, 차례에 제목은 `toc-title: 목차` 같은 형태로 값을 지정할 수 있다. 장, 절에 번호를 붙이고자 한다면 `numbser-sections: true`를 지정한다. 

``` markdown
---
format:
  html:
    toc: true
    toc-title: 목차
    number-sections: true
---
```

이 `fortmat` 옵션에 원하는 포맷들을 한꺼번에 지정할 수도 있다.

``` markdown
---
format: 
  pdf:
    include-in-header:
      - hangul.tex
  html:
    code-fold: true
    df-print: kable
    smooth-scroll: true
---
```

이렇게 지정해 놓고, 원하는 포맷으로 렌더링할 때는 RStudio 통합개발환경에서는 편집창 위의 **Render** 버튼 오른쪽 화살표를 클릭하여 원하는 포맷으로 렌더링할 수 있다. VS Code에서 콰르토 익스텐션이 설치된 경우 오른쪽 위에 **Render PDF** 등의 메뉴를 사용할 수도 있다. 또한 명령행에서 `quarto render` 명령을 사용하는 경우 `quarto render hello.qmd --to pdf`과 같이 `--to` 플래그를 사용하여 렌더링시킬 수 있다.

### 코드 실행을 전체적으로 조정하는 옵션

코드 실행을 전체적으로 조정하는 방법은 [-@sec-code-exe] 절에서도 다시 설명할 것이다. 콰르토로 글을 쓸 때 우선 어떤 프로그래밍 언어(엔진)을 사용할지 결정해야 한다. [-@sec-ComputerConfiguration] 장에서 설명한 내용을 따라 컴퓨터에 콰르토를 사용할 준비를 마쳤다고 가정하고 내용을 설명한다.

콰르토는 `.qmd` 문서의 YAML 헤더에서 정한 엔진을 사용한다. R 언어를 사용하는 경우는 `knitr: true`, 파이썬 언어를 사용하는 경우는 주피터 엔진을 사용하는데 `jupyter: python3`라는 필드를 사용하여 정한다. YAML 헤더에서 엔진을 지정하지 않는 경우에는 첫 번째 코드 블록이 R로 되어 있으면 니터가 사용되고, 파이썬으로 되어 있으면 주피터 엔진이 사용된다. 또한 주피터 노트북을 사용하는 경우에는 당연히 파이썬, `jupyter` 엔진이 사용된다. 

그래서 니터 엔진을 사용할 경우는 다음과 같이 지정한다.

``` markdown
---
knitr: true
---
```

주피터 엔진을 사용할 경우는 다음과 같이 지정한다.

``` markdown
---
jupyter: python3
---
```

또는 `engine`이라는 필드를 사용할 수도 있다.

``` markdown
---
engine: knitr # 또는 jpyter
---
```


이렇게 해서 엔진이 선택된 다음에는 `execute` 필드를 통해서 `.qmd` 문서 안에 들어 있는 모든 코드 블록에 적용될 옵션을 지정한다. 여기에 관해서는 콰르토 문서 [Execution Options](https://quarto.org/docs/computations/execution-options.html)를 잘 읽어볼 필요가 있다. YAML 헤더에서 지정된 옵션 값은 일종의 디폴트 역할을 하고, 문서 안 어떤 코드 블록에서 그 값을 바꾸고자 한다면 해당 코드 블록에서 `#| 필드: 값` 형태로 옵션을 지정한다.

만약 YAML 헤더에서 다음과 같이 지정하면, 이 문서에 포함된 코드들은 출력에 포함되지 않는다.

``` markdown
---
execute:
  echo: false
---
```

그러다가 문서에 코드를 출력시킬 필요가 있다면, 다음과 같이 코드 블록 옵션을 사용하여 값을 재지정한다.

```{{r}}
#| echo: true
```


좀 더 고급의 기술을 사용하는 경우, 예를 들어 R 엔진을 사용하면서 `reticulate` 패키지를 사용하여 같은 문서에서 파이썬 코드를 실행시키게 한다든지, 아니면 주피터 노트북을 사용하면서 파이썬이 아닌 다른 언어에 대한 커널들을 사용하는 경우들도 생각해 볼 수 있지만 여기서 설명하지는 않겠다. 내가 잘 모르는 내용도 많고 윈도우, 맥 등에서 일관되게 적용될지도 모르겠고, 무엇보다 두 가지 이상을 하나의 콰르토 문서에서 사용할 필요가 없어 보이기 때문이다.

R `options()` 함수를 사용하여 R 세션의 옵션을 바꾸는 방법이나, `kntir::opts_chunk` 객체를 사용하여 니터의 행동을 바꾸는 방법, 특정 콘다 환경에 들어 있는 주피터 커널을 사용하는 방법은 콰르토의 [Execution Options](https://quarto.org/docs/computations/execution-options.html)과 [Using Python](https://quarto.org/docs/computations/python.html)을 잘 읽어 볼 필요가 있다.






















