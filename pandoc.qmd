# 팬독 마크다운의 기초 {#sec-markdown-chapter}

문학적 프로그래밍에서는 하나의 소스 파일에 **코드**와 **텍스트**를 혼합하여 사용한다. 여기서는 **텍스트**를 작성하는 방법에 대해서 설명한다. 콰르토는 마크다운(Markdown)이라는 문법, 정확히는 팬독 마크다운을 사용하여 택스트를 작성한다.

[![팬독: 유니버셜 문서 변환기](images/pandoc_logo.png){#fig-pandoc_logo width="60%"}](https://pandoc.org/)

콰르토는 그 배경에 되는 R 마크다운 보다 팬독에 깊이 의존한다. 그래서 콰르트를 자유롭게 커스터마이징해서 [콰르토 확장툴(extension)](https://quarto.org/docs/extensions/) 등을 만들어 보고 싶다면 먼저 팬독을 잘 이해해야 한다. 이제는 마크다운이 널리 쓰이고 있지만, 누구에게나 처음은 있는 법이어서 독자가 처음 마크다운을 접한다고 생각하고 글을 쓰고자 한다. 그리고, 여기서는 팬독 마크다운 문법만 설명한다. 팬독 프로세서, 템플릿, 필터 등 고급 기술들은 나중에 기회를 봐서 추가하려고 한다.

## 마크다운이란? {#mdintro}

[마크다운(Markdown)](https://namu.wiki/w/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4)은 마크업(Markup) 언어의 한 종류이다. 마크업이란 주어진 텍스트를 제목이나 소제목으로 만들거나 텍스트의 크기나 색 등을 변경하라고 하는 등과 같이 텍스트 안의 역할이나 시각적 요소 등을 지시하는 것을 말한다. 웹 페이지는 HTML(Hyptertext Markup Language)라는 마크업 언어를 사용하고, 워드 프로세서도 눈에 보이지는 않지만 내부의 마크업을 사용한다.

마크다운(Markdown)이라는 용어는 HTML((HypterText Markup Language)에서 Markup의 반대말로 만들어낸 단어이다. 복잡한 HTML 문법을 단순화시킨 것이다. 마크다운은 웹 페이지의 표준인 HTML을 만드는 것을 목적으로 하되 쓰거나 읽기 쉽게 만든 규칙들의 조합이다. HTML 자체를 사용하여 문서를 작성하기 위해서는 `<h2>`, `<p>`, `<div>`, `<ol>`, `<ul>`, `<li>`과 같은 태그의 용법을 알고 내용을 구성하고 채워야 한다. 그리고 그렇게 작성된 소스 문서를 눈으로 읽는 것은 쉽지 않다. 반면 마크다운을 사용하면 웹 페이지 콘텐츠를 구성하는 것이 이메일을 작성하는 것 만큼이나 쉽다. 그리고 작성된 소스 문서도 최종 문서와 그다지 차이가 없기 때문에 읽기도 편하다. 즉, 작성하고 읽기에 편하다.

보통 마크다운 파일은 `.md`라는 확장자를 사용한다. 그렇지만 웹 브라우저는 마크다운 자체를 이해하지 못한다. 웹 브라우저는 웹의 표준 언어인 HTML 마크업만 이해한다. 따라서 `.md` 파일을 별도의 프로세서를 사용하여 HTML 문서로 변환하여 사용하게 된다. 

![마크다운을 사용하여 쉽게 HTML 문서를 만들 수 있다.](images/markdown.png){#fig-Markdown}

마크다운은 그 편리함 때문에 여러 용도로 사용된다. 깃허브 사이트에서 `REDAME.md`를 사용하여 프로젝트를 소개하거나 웹 페이지의 콘텐츠를 작성할 때도 많이 사용된다. 웹에 블로그 엔진들도 마크다운을 사용하는 경우가 많고, 글쓰기 저술용 데스크탑과 모바일 애플리케이션에도 많이 사용된다. 기본 마크다운은 문법이 아주 간단하다. 그런데 간단한 대신 저자가 어떤 것을 추가로 표현하는 데 어려움이 있을 수 있다. 그래서 기본 마크다운을 기본으로 하고 그 위에 필요로 하는 기능들을 추가하여 사용되는 경우가 많다. 그래서 용도에 맞도록 확장한 마크다운 시스템들이 많이 쓰이고 있다.

콰르토(Quarto)는 확장형 마크다운 가운데 [팬독(Pandoc)](https://pandoc.org/)에 기반을 두고 있다. 팬독 마크다운은 그 자체만으로도 과학기술 논문을 충분히 작성할 수 있을 정도로 확장된 기능들을 표현할 수 있는 문법체계를 가지고 있다. 팬독 프로세서는 마크다운 파일을 다양한 포맷으로 변환시키는 것이 가능하고 그외에도 하나의 전문기술 서적을 만들 수 있을 정도로 강력한 기능들을 가지고 있다. 

![팬독은 확장된 마크다운 문법과 다양한 포맷으로 문서를 변환하는 기능을 제공한다](images/pandoc.png){#fig-pandoc width="60%"}

## RStudio에서 마크다운을 작성하고 프로세싱하기 {#RStudioPandoc}

처음 마크다운을 배우는 독자라면 [RStudio](https://posit.co/download/rstudio-desktop/)를 사용하면 좋을 것 같다. RStudio에는 팬독이 포함되어 설치되기 때문에 RStudio가 설치되어 있다면 이 팬독을 쓸 준비가 이미 되어 있는 것이나 마찬가지이다.

마크다운 파일을 작성하고 이것을 HTML로 변환하는 과정은 간단하다. 일반 텍스트(plain text)로 마크다운 소스 파일을 만든다. 보통 `.md`라는 확장자를 사용한다. 그 다음 이 `.md` 파일을 프로세서를 사용하여 `.html` 문서로 변환한다. 눈에 보이지는 않지만 내부에서 이런 과정이 진행된다.

RStudio를 열고 다음과 같이 연습해 보자.

1.  RStudio에서 **File \> New File \> Markdown File**을 실행한다.

2.  파일 안에 마크다운 문법을 사용하여 내용을 작성하고, `hello.md`로 저장한다.

    ![간단한 마크다운 파일](images/hellomd.png){#fig-hellomd width="50%"}

3.  메뉴바에서 **Preview** 버튼을 클릭하면, 마크다운이 프로세싱되고, 그 결과가 **Viewer** 창 또는 새로운 창에서 보인다(새 창이나 뷰어창 설정은 메뉴바에서 톱니모양의 아이콘을 클릭하여 선택할 수 있다).

만약에 우리가 만든 파일 이름이 `hello.md`라고 했다면 같은 폴더에 이 파일이 HTML로 변환된 `hello.html` 파일이 만들어진 것을 확인할 수 있다. 그리고 RStudio의 `Render` 창을 열어 보면 이 파일을 프로세싱할 때 팬독(pandoc) 명령이 사용된 것도 확인된다.

마크다운을 처음 배우는 독자라면 아래 설명서를 보면서 이 과정을 반복하면서 자신의 작성한 마크다운과 그 결과물을 서로 비교해 가면서, 마크다운을 익힐 수 있다. 

## 팬독 마크다운 익히기 {#BasicMarkdonw}

팬독 마크다운은 확장형 마크다운의 하나로, 기본 마크다운에 더해서 과학 기술 문헌을 작성할 때 필요한 문서 요소들에 대한 레퍼런스(그림 1-4, 표 3-3 등과 같은 예), 참고문헌 삽입 등도 작성할 수 있도록 다양한 기능을 제공한다. 여기서는 기초 팬독 마크다운만 설명하고, 뒤에서 그림, 표 등을 다룰 때 더 자세한 내용을 다루도록 할 예정이다.

헷갈리는 부분은 [팬독 마크다운](https://pandoc.org/MANUAL.html#pandocs-markdown) 참고한다.

### 제목, 장절, 문단, 강제 줄바꿈

마크다운 문서에서 **장절 표시**는 해시태그(`#`) 기호를 사용하는데 1개에서 6개까지의 `#`를 사용하여 장절의 수준을 정한다. 보통 가장 높은 수준의 제목은 `#` 하나를 사용하는데, 제목은 뒤에서 설명하는 "YAML(얘물) 프론트 매터"에서 지정하는 것을 하나짜리 `#`이라고 생각하면 된다. 이것은 책이라면 챕터(chapter)에 해당하고, 웹 페이지라면 가장 페이지의 타이틀이다.

그 다음 작은 단위인 절은 `##`, 더 작은 소절은 `###`, 더 작은 것은 `####`으로 사용하여 여섯 개까지 사용할 수 있다. 이런 해시태그를 쓰고 나서 한 칸 띄운 다음 제목으로 쓸 내용을 적어 넣는다. 앞과 뒤에는 빈줄을 놓는다. 다음은 `##`을 사용한 절이다.

``` markdown
<빈줄>
## 마크다운의 활용 
<빈줄>
```

이런 장절 표시들은 나중에 마크다운 프로세서가 이것을 인식하여 자동으로 번호를 순서대로 부여하거나 목차(차례)를 만들 때 사용된다.

**단락(paragraph)**는 일반 워드프로서와 같이 특별한 기호 없이 그대로 내용을 입력한다. 단락과 단락 사이는 "하나 이상의 빈줄"을 사용한다. 하나 이상이기 때문에 2개, 5개 빈줄을 써도 모두 하나의 빈줄로 처리한다. 다음은 3개의 단락으로 내용을 작성한 예이다.

``` markdown
## 마크다운의 활용 

인류의 꽃 곳이 위하여 일월과 두손을 그들의 영락과 이 듣는다. 싸인 할지라도 그러므로 위하여, 이것이다.

풀밭에 소금이라 청춘에서만 능히 사랑의 예가 날카로우나 듣는다. 희망의 주며, 내려온 별과 가장 같이, 이상이 뭇 되는 이것이다. 튼튼하며, 소리다.이것은 사라지지 그것을 방황하였으며, 그러므로 못할 그리하였는가? 피어나는 원대하고, 것은 것이다.

있는 있는 이상이 그와 그리하였는가? 영원히 위하여 살 얼마나 사람은 청춘이 보는 그들은 말이다.
```

일반적인 코딩에서는 끝에서 엔터키를 치면 **줄 바꿈**이 되는데, 팬독은 이 줄바꿈 기호를 그냥 빈칸으로 인식하기 때문에 엔터키를 치고 다음 행에 입력된 내용은 모두 앞의 문단으로 이어진다. 따라서 시의 내용을 입력하는 경우와 같이 강제로 줄을 바꿈을 해야 하는 경우에는 *끝에 2개 이상의 스페이스를 치노 나서 엔터키를 쳐야 한다*. 다음과 같은 내용을 끝에 엔터키만 치고 입력했다고 하자.

``` markdown
죽는 날까지 하늘을 우러러
한 점 부끄럼이 없기를,
잎새에 이는 바람에도
나는 괴로워했다.

별을 노래하는 마음으로
모든 죽어 가는 것을 사랑해야지
그리고 나한테 주어진 길을
걸어가야겠다.

오늘 밤에도 별이 바람에 스치운다.
```

그러면 이것을 프로세싱하면 다음과 같이 된다.

------------------------------------------------------------------------

죽는 날까지 하늘을 우러러 한 점 부끄럼이 없기를, 잎새에 이는 바람에도 나는 괴로워했다.

별을 노래하는 마음으로 모든 죽어 가는 것을 사랑해야지 그리고 나한테 주어진 길을 걸어가야겠다.

오늘 밤에도 별이 바람에 스치운다.

------------------------------------------------------------------------

이것을 각 행의 끝에서 스페이스 2개를 치고 엔터키를 치고 내용을 입력하면 다음과 같이 제대로 프로세싱된다.

------------------------------------------------------------------------

죽는 날까지 하늘을 우러러\
한 점 부끄럼이 없기를,\
잎새에 이는 바람에도\
나는 괴로워했다.

별을 노래하는 마음으로\
모든 죽어 가는 것을 사랑해야지\
그리고 나한테 주어진 길을\
걸어가야겠다.

오늘 밤에도 별이 바람에 스치운다.

------------------------------------------------------------------------

팬독 마크다운은 끝에 백스페이스 `\`를 넣어서 줄바꿈을 하는 것도 허용한다(커맨드라인에서 주로 쓰이는 방법이다).

``` markdown
죽는 날까지 하늘을 우러러\
한 점 부끄럼이 없기를,\
잎새에 이는 바람에도\
나는 괴로워했다.\

별을 노래하는 마음으로\
모든 죽어 가는 것을 사랑해야지\
그리고 나한테 주어진 길을\
걸어가야겠다.\

오늘 밤에도 별이 바람에 스치운다.\
```

또는 다음과 같이 앞에 파이프 기호(`|`)를 쓰고 한칸 띄운 문법으로 작성한다. 이것을 라인 블록(line block)이라고 한다. 이렇게 하면 팬독이 엔터키를 줄바꿈으로 인식한다.

``` markdown
| 죽는 날까지 하늘을 우러러
| 한 점 부끄럼이 없기를,
| 잎새에 이는 바람에도
| 나는 괴로워했다.
| 
| 별을 노래하는 마음으로
| 모든 죽어 가는 것을 사랑해야지
| 그리고 나한테 주어진 길을
| 걸어가야겠다.
| 
| 오늘 밤에도 별이 바람에 스치운다.
```

#### 헤더 속성(header attributes) 지정

잠시 장절 제목(헤더)을 하는 역할을 생각해 보자. 내용을 대표하는 제목 역할을 하는 것 이외에도 문서의 목차(차례)를 만들 때도 활용된다. 또한 전체 다른 장, 절에서 필요한 경우 어떤 장, 절의 내용을 언급하기 위해서 그 장, 절로 가는 링크를 구성할 수도 있을 것이다. 보통의 디지털 문서에서는 목차에서 어떤 장절을 클릭했을 때 그 장, 절로 이동할 수 있게 하는 경우에도 이런 링크 기능을 사용하는 셈이다. 이런 링크를 만드는 방법은 뒤에서 다시 설명한다.

링크를 구성하려면 목적지가 정해져야 한다. 목적지임을 표시할 때 헤더 속성을 사용할 수 있다. 속성은 다음과 같이 앞에서 설명한 장, 절 제목을 정하는 방법을 사용하여 만든 다음 끝에 대괄호를 추가하고(`{}`), 이 안에 필요한 정보를 기입한다. 여러 정보를 입력할 때는 빈칸을 사용한다. 뒤에서도 다시 나오겠지만 **팬독에서는 속성을 지정할 때 `{}`를 사용하고, 그 안에서 옵셥="값" 등을 나열할 때, 쉼표를 사용하지 않고 빈칸으로 구분한다.** 다음은 헤더 속성을 지정하는 한 예인데 고유한 아이디를 `#이름`의 형태로 부여하는 방법을 보여준다.

``` markdown
## 마크다운의 활용 {#markdown_usage}
```

`{}` 안에 포함되는 속성 가운데 가장 많이 사용되는 것은 아이디(id) 속성이다. 아이디 속성은 앞에 `#`으로 시작한다. 따라서 위와 같은 헤더의 아이디는 `#markdown_usage`가 된다. 뒤에서 이 값을 사용하여 링크 등을 만드는 방법은 소개한다.

어떤 경우에는 목차 등에 포함되지 않게 해야 하는 상황이 생길 수 있다. 책을 만드는 경우 서론은 본격적인 1장이 시작되기 전에 놓이기 때문에 이런 번호를 붙이지 않는다. 번호 없는 헤더를 만들 때는 `{-}` 또는 `{.unnumbered}`라는 클래스 속성을 사용한다.

``` .markdown
## 마크다운의 활용 {-}
```

또는 다음과 같이 입력한다.

``` .markdown
## 마크다운의 활용 {.unnumbered}
```

HTML/CSS를 아는 독자라면 `#`로 시작하는 아이디 속성과 `.`로 시작하는 클래스 속성에 익숙할 것이다. 판독은 유사한 방식을 사용한다. 

### 인라인 포맷팅 {#inlineformatting}

#### 강조하기 {#emphasis}

문단 안에서 어떤 단어를 강조할 필요가 있는 경우에는 이탤릭체(기울림)이나 굵은 글씨체 바꾸는 방법 등에 관한 것이다.

이탤릭체로 바꾸는 경우에는 바꾸고자 하는 부분을 `*` 또는 `_`로 둘러싼다. 굵은 글씨체로 바꾸려면 `**` 또는 `__`로 둘러싼다.

``` markdown
*이탤릭체*는 타이포그래피에서 **손글씨를 기반으로 흘려 쓰는** 자형을 일컫는다.
```

위 문장은 아래와 같이 렌더링된다.

------------------------------------------------------------------------

*이탤릭체*는 타이포그래피에서 **손글씨를 기반으로 흘려 쓰는** 자형을 일컫는다.

------------------------------------------------------------------------

그런데 `*`, `_`가 빈칸이나 둘러싼 경우나 백슬래쉬로 이스케이핑한 경우에는 위의 강조 기능을 수행하지 않는다.

``` markdown
*이탤릭체*는 * 타이포그래피 * 에서 \*손글씨를 기반으로 흘려 쓰는\* 자형을 일컫는다.
```

이 문장은 다음과 같이 렌더링된다.

------------------------------------------------------------------------

*이탤릭체*는 타이포그래피에서 \*손글씨를 기반으로 흘려 쓰는\* 자형을 일컫는다.

------------------------------------------------------------------------

언더스코어(`_`)는 프로그래밍 언어에서 2개 이상의 단어로 구성된 변수 이름을 지을 때 많이 사용된다. 그래서 팬독은 알파벳과 숫자로 둘러싸인 `_`는 위에서 설명한 강조 기능을 수행하지 않는다. 이런 기능이 필요한 경우에는 `*`을 사용해야 한다.

``` .markdown
my_name_  
my*name*
```

이것은 다음과 같이 렌더링된다. 언더스코어를 사용한 첫 번째는 그대로 유지된 반면, `*`를 사용한 두 번째는 강조(이탤릭체)가 되었다.

------------------------------------------------------------------------

my_name\_\
my*name*

------------------------------------------------------------------------

취소선(strike-out)은 수정했다는 것을 표현할 때 사용하는데, 표시할 부분을 `~~`로 둘러싸서 표현한다.

``` markdown
취소선은 글자 중앙에 수평선이 있는 타이포그래피적인 표현으로, ~~이러한~~ 효과를 낸다. 
```

이것은 다음과 같이 렌더링된다.

------------------------------------------------------------------------

취소선은 글자 중앙에 수평선이 있는 타이포그래피적인 표현으로, ~~이러한~~ 효과를 낸다.

------------------------------------------------------------------------

#### 첨자 쓰기 {#supersubscript}

위 첨자는 `^`로, 아래 첨자는 `~`로 둘러싸서 표현한다.

``` markdown
위^첨자^

H~2~0
```

이것은 다음과 같이 렌더링된다.

------------------------------------------------------------------------

위^첨자^

H~2~0

------------------------------------------------------------------------

만약 첨자로 들어가는 부분에 공백이 있는 경우에는 이스케이핑시켜야 한다. 다음 예를 보자.

``` markdown
위 ^첨자 추가하기^

위 ^첨자\ 추가하기^
```

이것은 아래와 같이 렌더링된다. 공백이 있는 경우 모두 첨자로 넣기 위해서는 백스래쉬로 이스케이핑해야 한다.

------------------------------------------------------------------------

위 \^첨자 추가하기\^

위 ^첨자 추가하기^

------------------------------------------------------------------------

#### 밑줄긋기 {#Underline}

텍스트 밑에 밑줄긋기를 표현할 때는 `[밑줄그을 부분]{.underline}`이라는 문법을 사용한다.

``` markdown
밑줄을 그을 때는 [밑줄그을 부분]{.underline}이라는 문법을 사용한다.
```

이것은 다음과 같이 렌더링된다.

------------------------------------------------------------------------

밑줄을 그을 때는 [밑줄그을 부분]{.underline}이라는 문법을 사용한다.

------------------------------------------------------------------------

이렇게 해서 인라인 마크다운 포맷팅하는 방법을 살펴보았다. 여기서 설명되지 않은 부분은 인라인 수식, 버바팀(verbatim, 있는 그대로 쓰기) 텍스트인데, 이것은 뒤에서 관련된 수식과 버타팀 텍스트를 쓰는 방법을 설명할 때 함께 설명하고자 한다.

### 리스트 (항목 나열)

팬독 마크다운으로 다양한 리스트를 작성할 수 있다. HTML에는 순서가 없는 리스트는 `<ul>`을, 순서가 있는 리스트는 `<ol>`을 사용하여 만든다. 팬독 마크다운에서 순서가 없는 리스트는 `*`, `-`, `+`를 사용하고(때로는 혼합), 순서가 있는 리스트는 숫자를 사용하여 만든다. 때로는 이것을 혼합하여 만들 수 있다.

팬독 마크다운에서는 순서가 없는 리스트를 점 리스트(bullet list)라고 한다. 점 리스르틀 만드는 방법은 `+`, `-`, `*` 가운데 하나로 시작하고, 공백을 둔 다음 내용을 작성한다. 항목 사이에 빈줄을 주면 항목 사이의 공간을 줄 수 있다. 

``` markdown
* 하나 
* 둘 
* 셋
```

이것은 다음과 같이 렌더링된다.

------------------------------------------------------------------------

* 하나 
* 둘 
* 셋

------------------------------------------------------------------------

하위 항목을 추가할 때는 4개의 빈칸이나 탭을 사용한다. 


``` markdown
* 하나 
    - 하나의 하나
    - 하나의 둘
    - 하나의 셋
* 둘 
    - 둘의 하나
    - 둘의 둘
    - 둘의 셋
* 셋
    - 셋의 하나
    - 셋의 둘
    - 셋의 셋
```

이것은 다음과 같이 렌더링된다.

--------

* 하나 
    - 하나의 하나
    - 하나의 둘
    - 하나의 셋
* 둘 
    - 둘의 하나
    - 둘의 둘
    - 둘의 셋
* 셋
    - 셋의 하나
    - 셋의 둘
    - 셋의 셋

---------

순서가 있는 리스트를 만들 때는 숫자를 쓴 다음 점(`.`)을 찍고, 빈칸을 둔 다음 내용을 적는다. 숫자는 숫자이면 족하다. 내 경우에는 그냥 모두 `1. ` 다음에 내용을 쓴다. 중간에 항목을 추가해도 내용을 바꿀 필요가 없기 때문이다. 


``` markdown
1. 하나
1. 둘
1. 셋
```

이것은 다음과 같이 렌더링된다.

--------

1. 하나
1. 둘
1. 셋

---------

그런데 첫 번째 숫자는 중요할 수 있다. 해당 숫자로 시작하게 만들도록 할 때 유용하다. 다음과 같이 쓰면 이 리스트는 `5`로 시작한다.


``` markdown
5. 셋 
1. 넷 
1. 다섯
```

이것은 다음과 같이 렌더링된다.

----------

5. 셋 
1. 넷 
1. 다섯

---------

보고서 등을 쓸 항목을 쓰고 해당 항목에 대한 문단을 넣는 경우들이 있다. 이 경우에는 제목 역할을 하는 항목을 쓰고, 빈줄을 쓴 다음 문단을 채우는데, 문단의 시작은 제목이 시작되는 열의 위치에 맞추어 준다. 이 경우에는 `하나`의 `하` 위치에 `인간에`의 `인`의 위치를 맞추었고, `둘`의 위치와 `그러므로`의 `그`의 위치를 맞추었다. VS Code와 같은 텍스트 에디터에서는 이렇게 해서 내용을 작성하는 경우 대부분 자동으로 왼쪽 들여쓰기를 해 주기 때문에 편리하다.

``` markdown
1. 하나

   인간에 인류의 곳이 얼마나 되려니와, 쓸쓸한 피다. 투명하되 피가 지혜는 있음으로써 목숨을 것이다. 커다란 얼마나 찬미를 소금이라 돋고, 남는 그들은 피고 있는가? 있으며, 끓는 우리 것이다. 눈이 우리의 능히 있는가? 피가 인생에 실로 크고 광야에서 방황하였으며, 있으랴? 그들은 불어 불어 행복스럽고 바로 사막이다. 이상 거선의 예수는 인생에 가치를 것이다. 청춘의 사라지지 두손을 풍부하게 이상의 아름답고 역사를 것이다. 새 가는 내려온 가지에 품으며, 하는 이것을 때문이다.

2. 둘

   그러므로 들어 꽃이 구하지 있는가? 봄날의 무한한 없는 무엇이 싶이 가슴이 가진 역사를 운다. 봄바람을 할지라도 것은 길지 내는 아름다우냐? 뜨거운지라, 관현악이며, 몸이 보이는 돋고, 위하여서, 인생에 것이다. 않는 있는 아니더면, 군영과 사막이다. 곧 속에서 사라지지 뿐이다. 길을 동력은 같은 말이다. 가는 인간이 길지 피어나는 모래뿐일 할지라도 이것을 커다란 붙잡아 이것이다. 인간의 있는 귀는 가슴이 인류의 우리는 몸이 어디 것이다. 너의 이상은 장식하는 피고 예수는 열락의 만천하의 그것을 보라. 투명하되 사라지지 오직 동산에는 싹이 인간은 피어나기 그들을 것이다.
```

이것은 다음과 같이 렌더링된다.

--------

1. 하나

   인간에 인류의 곳이 얼마나 되려니와, 쓸쓸한 피다. 투명하되 피가 지혜는 있음으로써 목숨을 것이다. 커다란 얼마나 찬미를 소금이라 돋고, 남는 그들은 피고 있는가? 있으며, 끓는 우리 것이다. 눈이 우리의 능히 있는가? 피가 인생에 실로 크고 광야에서 방황하였으며, 있으랴? 그들은 불어 불어 행복스럽고 바로 사막이다. 이상 거선의 예수는 인생에 가치를 것이다. 청춘의 사라지지 두손을 풍부하게 이상의 아름답고 역사를 것이다. 새 가는 내려온 가지에 품으며, 하는 이것을 때문이다.

2. 둘

   그러므로 들어 꽃이 구하지 있는가? 봄날의 무한한 없는 무엇이 싶이 가슴이 가진 역사를 운다. 봄바람을 할지라도 것은 길지 내는 아름다우냐? 뜨거운지라, 관현악이며, 몸이 보이는 돋고, 위하여서, 인생에 것이다. 않는 있는 아니더면, 군영과 사막이다. 곧 속에서 사라지지 뿐이다. 길을 동력은 같은 말이다. 가는 인간이 길지 피어나는 모래뿐일 할지라도 이것을 커다란 붙잡아 이것이다. 인간의 있는 귀는 가슴이 인류의 우리는 몸이 어디 것이다. 너의 이상은 장식하는 피고 예수는 열락의 만천하의 그것을 보라. 투명하되 사라지지 오직 동산에는 싹이 인간은 피어나기 그들을 것이다.

----------


### 그림 

그림을 넣는 방법은 [@sec-figurecontent]장을 참고하기 바란다.

### 코드 블록(버바팀 텍스트) {#verbatimText}

적어 놓은 그대로 출력하도록 지시하는 것을 버타팀(verbatim)이라고 부른다. 버타팀이 대표적으로 사용되는 경우는 코드이다. 팬독 마크다운은 여러 종류의 코드 블록 문법을 사용하여 코드를 출력할 수 있는데, 우리는 백틱(\`)을 사용한 코드 블록을 주로 설명하려고 한다. 백틱은 자판에서 숫자 1 앞에 있다. 백틱을 사용한 코드 블록에 집중하는 것은 가급적 뒤에서 설명할 R 마크다운과 콰트로와의 서로 호환이 되도록 하기 위함이다.

우리는 뒤에서 마크다운 파일과 코드를 하나의 파일에 넣고 작업하여 코드를 실행시키는 방법을 주로 다룰 것인데, 이처럼 실행시킬 코드를 넣은 경우도 있을 것이고 실행시키지 않고 오로지 코드 자체만을 출력하려는 경우도 있을 것이다. 이 둘을 다르게 접근하는 것이 좋다.

#### 실행하지 않고 오로지 출력만 하는 코드 {#nonexecute_code}

팬독에서 백틱을 사용한 펜스가 있는 코드 블록(fenced code block)을 만들기 위해서 먼저 주변 텍스트와 구분하기 위해서 빈 줄을 입력하고, 다음 줄에서 3개의 이상의 백틱(\`)으로 경계를 만든다. 코드가 끝나는 부분도 3개 이상의 백틱(\`)을 연달아 사용한다. 끝나는 쪽의 백틱의 개수는 시작하는 백틱의 개수보다는 같거나 많아야 한다. 즉 다음과 같은 형태로 작성한다.

    ``` `r ''`
    1 + 1
    ```

또는

    ``` `r ''`
    1 + 1
    ``````

그리고 여기에 코드 블록의 속성을 추가하여 원하는 효과를 줄 수 있는데, 그 속성는 첫 번째 펜스 에 `{}` 안에 그 값을 지정한다. 앞에서 장절 제목에 속성을 주는 방법과 같다. 보통은 클래스 속성을 사용하는 데 파이썬 언어를 사용한다면 `.python`을 지정한다.

    ```{.python}
    1 + 1
    ```

만약 `.numberLines`라는 클래스 속성을 지정하면 1부터 시작하는 행 번호를 붙여서 출력한다. 시작하는 행 번호를 다르게 하려면 `startFrom="5"`과 같은 형태로 숫자 값을 지정한다.

    ``` {.python .numberLines startFrom="5"}
    # list comprehension
    x = [3, 1, 4, 5]
    squared = [n **2 for n in x]
    ``````

이것은 다음과 같이 출력된다.

``` {.python .numberLines startFrom="5"}
# list comprehension
x = [3, 1, 4, 5]
squared = [n **2 for n in x]
```

팬독은 프로세싱할 때 옵션을 줘서 코드 강조 기능을 추가할 수도 있다. 이것에 대해서는 뒤에서 설명한다.

#### 실행시킬 코드를 추가하기 {#ExecuteCode}

실행시켜야 하는 코드를 입력하는 부분은 마크다운과 관련된 내용이라기 보다는 노트북 기능과 관련된 것이므로 이것은 뒤에서 설명하고자 한다.

#### 인라인 코드 추가하기 {#inlinecode}

행 안에서 변수 이름임을 표시할 때는 인라인 코드를 사용하는 데, 이것은 백틱으로 둘러싸면 된다.

``` markdown
변수 `x`는 ...하다.
```

인라인에서 실행된 값이 출력되도록 하는 방법은 실행시킬 코드를 넣는 방법과 함께 뒤에서 설명된다.

### 링크 {#linkMardkown}

링크는 클릭했을 때 다른 곳으로 이동시켜주는 역할을 한다. 그 목적으로 따라 여러 종류의 링크가 있다.

#### 외부 인터넷 및 이메일 연결 링크 {#internet}

우선 간단하게 외부로 연결시켜 주는 인터넷에서 흔히 사용되는 URL 주소를 입력하는 방법이다.

팬독에서는 `<>`안에 URL을 넣어서 표현한다.

``` .markdown
R Markdown과 관련된 포괄적인 설명은 <https://bookdown.org/yihui/rmarkdown/>을 참고한다.
```

이것은 다음과 같이 렌러링 된다.

------------------------------------------------------------------------

R Markdown과 관련된 포괄적인 설명은 <https://bookdown.org/yihui/rmarkdown/>을 참고한다.

------------------------------------------------------------------------

위와 같이 단순히 `<>`만 사용하는 경우에는 URL이 자체가 출력된다. 링크 텍스트를 사용하여 링크를 만들려면 `[link text](URL)` 문법을 사용한다. 그러면 `link text`라는 링크가 만들어지고 이것을 클릭하면 해당 URL로 이동한다. URL은 `<>`을 사용해도 되고 안 해도 된다. 단지 주의할 점은 `""`을 사용하지 않는다는 것이다.

``` .markdown
[R 마크다운 사이트](https://pkgs.rstudio.com/rmarkdown/)를 참고한다.
```

이것은 다음과 같이 출력된다.

------------------------------------------------------------------------

[R 마크다운 사이트](https://pkgs.rstudio.com/rmarkdown/)를 참고한다.

------------------------------------------------------------------------

만약 툴팁(마우스를 해당 링크에 올려 놓았을 때 안내 문구가 뜨드록 하는 기능)을 사용하려면 `(URL "툴팁 문구")`를 사용한다.

``` .markdown
[R 마크다운 사이트](https://pkgs.rstudio.com/rmarkdown/ "마크다운 사이트로 이동")를 참고한다.
```

다음과 같이 렌더링되고, 링크 텍스트 위에 마우스를 놓으면 안내 문구가 보일 것이다.

------------------------------------------------------------------------

[R 마크다운 사이트](https://pkgs.rstudio.com/rmarkdown/ "마크다운 사이트로 이동")를 참고한다.

------------------------------------------------------------------------

이메일에 대한 링크는 `<>`안에 이메일 주소를 넣으면 된다.

``` .markdown
<mymail@gmail.com>으로 메일을 보내세요.
```

이것은 다음과 같이 렌더링된다.

------------------------------------------------------------------------

[mymail\@gmail.com](mailto:mymail@gmail.com){.email}으로 메일을 보내세요.

------------------------------------------------------------------------

만약 링크 텍스트를 사용할 때는 일반 URL처럼 `[링크텍스트](maillto:이메일주소)`와 같이 앞에서 URL을 사용할 때처럼 `[]()`을 사용하는데, 이 메일 주소 앞에 `mailto`라는 접두사를 쓴다.

``` .markdown
[메일](mailto:mymail@gmail.com)을 보내세요.
```

이것은 다음과 같이 렌더링된다.

------------------------------------------------------------------------

[메일](mailto:mymail@gmail.com)을 보내세요.

------------------------------------------------------------------------

여기서 `메일`을 클릭하면 컴퓨터의 디폴트로 설정된 메일 프로그램이 실행된다.

#### 링크를 정의한 다음 정의된 링크 사용하기 {#referencelink}

문서에서 자주 사용되는 링크라면 링크를 정의한 다음 필요한 곳들에서 그 링크를 넣어 문서를 만들 수 있다.

먼저 링크를 정의하자. 정의는 `[링크이름]: 경로_또는 주소` 문법을 사용한다. `[]` 엔 링크 이름을 놓고, 콜론을 찍은 다음, 한 칸 띄고 파일 경로나 URL을 입력한다.

소스 파일에서 다음과 같이 입력하면, <https://pandoc.org>에 대한 `[pandoc link]`가 만들어 진다. 그리고 이 내용 자체는 문서를 프로세싱해도 눈에는 보이지 않는다.

``` .mardkown
[pandoc]: https://pandoc.org
```

[pandoc]: https://pandoc.org

이렇게 정의된 `[pandoc link]`를 사용할 때는 그 이름 자체가 링크 텍스트로 되어 있는 링크를 만든다.

``` .markdown
[pandoc]에서는 ...
```

이것은 다음과 같이 렌더링된다.

------------------------------------------------------------------------

[pandoc]에서는 ...

------------------------------------------------------------------------

또는 이렇게 정의된 링크에 대하여 새로운 링크 텍스틀 붙여서 사용할 수도 있다. 이 경우에는 `[새로운 링크 텍스트][정의된 링크 텍스트]` 문법을 사용한다.

``` .markdown
[팬독][pandoc link] 사이트를 보면 ...
```

이것은 다음과 같이 렌더링 된다.

------------------------------------------------------------------------

[팬독](https://pandoc.org) 사이트를 보면 ...

------------------------------------------------------------------------

앞에서 든 예는 URL을 사용했지만 URL이 아니더라도 파일 경로에 대해서도 정의가 가능하다.

### 각주(footnotes) 만들기 {#footnotemd}

페이지 아래에 문서의 어떤 내용에 대한 보충 설명 등을 삽입하는 것을 각주라고 한다. 단어나 문단 옆의 링크를 클릭하면 해당 각주의 내용을 볼 수 있는 곳으로 이동할 수 있다.

먼저 간단한 인라인 방식으로 각주를 넣은 방식이다. 각주를 붙이고자 하는 위치에서 `^[각주내용]` 문법을 사용한다.

``` markdown
존 그루버와 에런 슈워츠는 2004년 마크다운 언어를 만들었다^[<http://www.aaronsw.com/weblog/001189>].
```

이것은 다음과 같이 렌더링되고 각주를 표시하는 숫자가 자동으로 부여된다. 이 숫자를 클릭하면 각주 내용으로 이동한다.

------------------------------------------------------------------------

존 그루버와 에런 슈워츠는 2004년 마크다운 언어를 만들었다[^markdown-1].

[^markdown-1]: <http://www.aaronsw.com/weblog/001189>

------------------------------------------------------------------------

각주의 내용이 복잡할 때는 이렇게 인라인으로 놓는 것이 불편하고 가독성을 떨어뜨릴 수도 있다. 이런 경우에는 각주를 정의하여 사용하는 방법을 쓰면 좋다. 팬독 사이트에 있는 예를 사용하여(번역해서) 설명해 본다[^markdown-2].

[^markdown-2]: <https://pandoc.org/MANUAL.html#footnotes>

``` markdown
이것은 하나의 각주이고,[^1] 다른 각주도 있다.[^longnote]

[^1]: 이것은 첫 번째 각주이다.

[^longnote]: 이것은 여러 블록을 가진 각주이다.

    이어지는 문단은 들여쓰기를 통해 이전 각주와 이어지는 것을 표시한다.
    
        { some.code }

    문단 전체를 들여쓰기 해도 되고, 문단의 첫 번째 행만 
    들여쓰기를 해도 된다. 

이 문단은 들여쓰기를 하지 않았기 때문에 본문의 문단으로 인식된다. 
```

이것은 다음과 같이 렌더링된다(각주 내용을 이 페이지의 각주에 나운다).

------------------------------------------------------------------------

이것은 하나의 각주이고,[^markdown-3] 다른 각주도 있다.[^markdown-4]

[^markdown-3]: 이것은 첫 번째 각주이다.

[^markdown-4]: 이것은 여러 블록을 가진 각주이다.

    이어지는 문단은 들여쓰기(보통 4개의 스페이스)를 통해 이전 각주와 이어지는 것을 표시한다.

        { some.code }

    문단 전체를 들여쓰기 해도 되고, 문단의 첫 번째 행만 들여쓰기를 해도 된다.

이 문단은 들여쓰기를 하지 않았기 때문에 본문의 문단으로 인식된다.

------------------------------------------------------------------------

먼저 각주를 정의하는 방법을 보면 `[^텍스트]`를 적고, 그 다음 콜론(`:`)을 쓰고, 한 칸을 띄운 다음 내용을 적는다. 설명한 대로 각주의 내용이 여러 문단으로 되어 있으면, 4개의 스페이스를 사용하여 들여쓰기를 유지한다.

문서 안에 이런 각주 정의 부분은 문서에 출력되지 않는다. 앞에서 링크에 대한 정의도 출력되지 않았었다. 다만 이 정보가 문서 안에서 활용되는 것이다. 실제 각주를 붙일 때는 해당 위치에서 `[^텍스트]`라는 문법을 사용한다. 한 문서 안에서 각주를 붙일 때, 그 이전에 각주를 정의해도 되고 나중에 해도 된다.

### 수식, 방정식 작성 

