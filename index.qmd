# 서문: 콰르토로 글쓰기 {.unnumbered}


이 온라인 오픈 북은 데이터를 다루는 일과 관련된 일을 하는 사람이라면 거의 알고 있을 R, 파이썬 언어를 가지고 보고서, 논문, 프레젠테이션, 웹 페이지, 블로그 등 거의 모든 종류의 문서를 한 가지 도구로 만들 수 있는 방법을 소개한다. 이 방법은 강력할 뿐만 아니라 효율적이며 투명하게 공개할 수 있기 때문에 혁신적이고 민주적인 글쓰기 도구이다. 그 한 가지 도구란 바로 [콰르토(Quarto)](https://quarto.org)이다.

[![Quarto® is an open-source scientific and technical publishing system built on Pandoc(클릭하여 이동)](images/quarto_logo.png){fig-align="center"}](https://quarto.org)

콰르토는 학술 논문이나 보고서와 같이 데이터에 기반한 글쓰기에 특히 적합한 도구이다. 논문이나 보고서는 데이터를 끌어와 내용을 요약하거나, 통계적 분석을 하고 그 결과를 표 또는 그래프 등으로 시각화하는 작업을 주로 하게 된다. 이와 같은 데이터 관련 작업과 더불어 저자의 식견을 표현하는 텍스트로 작성하는 일을 동시에 하게 된다. 보통 글은 말과 달리 수정과 반복이 따르는 작업이다. 분석 도구 따로, 저술 도구 따로 사용하다 보면 복사하여 붙이기를 반복하게 되는데, 데이터가 바뀌는 경우에는 똑같은 일을 또 반복해야 한다. 그러는 과정에서 오류가 생기기 쉽다. 반면 콰르토는 분석 도구와 저술 도구가 하나로 묶여 있기 때문에 몰입하여 글을 쓸 수 있다.

콰르토는 [R 마크다운(Markdown)](https://bookdown.org/yihui/rmarkdown/)이라고 하는 도구를 확장한 것이다. R 마크다운는 R 코드와 텍스트를 하나의 파일에 적어 놓은 다음 이것을 프로세싱하여 자기가 필요한 포맷으로 문서들을 만들어 내는 재현가능 연구(reproducible research) 도구이다. 콰르토는 R 언어 뿐만 아니라, 파이썬, 줄리아(Julia), 자바스크립트와 같은 언어들과 함께 사용할 수 있도록 확장되었다. R 언어 사용자들은 RStudio라고 하는 통합개발환경을 많이 쓰고, 파이썬 데이터 과학자들은 주피터(Jupyter) 시스템을 많이 쓴다. 최근에는 마이크로 소프트웨어에서 만든 Visual Studo Code (VS Code)라는 텍스트 에디터가 인기가 높다. 콰르토는 이들 플랫폼을 모두 지원한다.

나는 이전에 ["R과 Knitr를 사용한 데이터 연동형 문서"](<http://www.yes24.com/Product/Goods/12802994>)라는 책에서 지금은 R 마크다운으로 알려진 시스템에 관해 소개하는 책을 쓴 적이 있다. 다시 책으로 쓰려고 기획서도 내 보았는데 이런 내용은 그다지 흥미를 끌지 못할 것 같다는 의견을 받아 책은 포기하고, 이번에는 [Quarto Pub](https://quartopub.com/) 시스템을 사용하여 온라인으로 글을 쓰려고 한다. 콰르트 사이트(<https://quarto.org>)에 관련된 자세한 정보들이 나와 있는데, 아무래도 영문이고, 매뉴얼 형식이라기 보다는 찾아보기(reference) 사이트로 보이기 때문에 내가 써보면서 정리한 내용들을 독자들과 공유하려고 한다. 지면이나 시간에 구애받지 않고 글을 쓰니 마음이 한결 가볍다. 

## 이 글이 도움이 될 독자들

콰르토가 과학기술 문헌 작성을 강조하지만 배워보면 실은 매우 일반적인 글쓰기 도구라고 보는 것을 쉽게 이해할 수 있을 것이다. 특히 R 코드나 파이썬 코드를 배운 독자라면 쉽게 배우고 사용할 수 있을 것이다.

- R 또는 Python 언어를 알고 있고, 데이터를 가지고 논문과 같은 기술 문서를 주로 쓰는 사람들
- RStudio 통합개발환경에서 R 언어로 데이터 분석을 하는 데이터 과학자 
- Jupyter Notebook/JupyterLab에서 Python 언어로 데이터 분석을 하는 데이터 과학자 
- 기술 문헌이 아니더라도 다른 사람들이 읽을 만한 어떤 글을 쓰고자 하는 일반인

참고로 나는 주로 R 언어 관련된 기술 서적을 여러 권 저술하거나 번역해 왔는데, 모두 콰르토의 전신인 [R 마크다운](https://rmarkdown.rstudio.com)을 사용해서 작업해 왔다. 일반 워드프로세서를 사용했더라면 거의 불가능했을 작업이라고 생각한다. (내가 썼던 책들은 [YES24.com](http://www.yes24.com/Product/Search?domain=BOOK&query=%EA%B3%A0%EC%84%9D%EB%B2%94)에서 볼 수 있다. 작가도 아닌 사람을 서점이 작가로 올려주셔서 감사하고 민망하다.) 실제로 이런 시스템을 사용하여 수년간 작업해 온 만큼 누구보다 이와 같은 시스템에 익숙하고, 그 장점을 잘 알고 있다고 자부한다. 콰르토를 배워나가면서, 그리고 그간 사용해 왔던 경험에 따른 팁 같은 내용을 이 책에 쓰고자 한다.


## 콰르토 글쓰기의 장점

오늘날 디지털 세계에는 워낙 좋은 도구들이 넘쳐난다. 글쓰기라고 하면 뛰어난 성능의 워드 프로세서들이 이전부터 있었는데 왜 굳이 콰르토와 같은 도구를 다시 배울 필요가 있을까 하는 생각을 할 수도 있다. 맞는 말이다! 이와 같은 물음은 좋은 워드 프로세서들이 있는데 왜 굳이 레이텍({{< latex >}})과 같은 도구를 사용하여 글을 써야 하나라는 질문과 유사한 측면이 있다. 이 질문에 대해서 답을 한 블로그 ["Reasons why you must, should, and should not use LaTeX"](https://towardsdatascience.com/why-should-you-learn-latex-or-at-least-give-it-a-try-8d0f3218b8e)가 있으니 읽어 보면 좋을 것 같다. 그 글에 공감하는 바가 커서 여기서 콰르토로 글을 쓰는 것의 장점에 대해서 정리해 보려고 한다.

### 학계, 특히 STEM(과학, 기술, 공학, 수학) 분야 전문가를 위한 도구

콰르토는 "an open-source scientific and technical publishing system"이라고 소개하듯이 과학, 기술 분야의 글쓰기에 적합한 도구이다. 대학이나 연구소에 종사한다면 더욱 콰르토가 도움이 될 것이다. 왜냐하면, 이 분야 전문가들은 논문, 외부 제출 연구 보고서, 학회 발표 자료, 내부 실험 결과 보고서 등을 통해 커뮤니케이션을 위한 글쓰기가 일상이기 때문이다.

### 계산 도구이자 글쓰기 도구 

"[-@sec-computationalnotebook]장 컴퓨테이셔널 노트북과 콰르토"에서 설명하겠지만, 콰르토를 사용한다는 것은 컴퓨테이셔널 노트북을 사용한다는 의미를 내포하고 있다. 나는 공학 등을 잘 모르지만, STEM에 종사하는 사람들은 항상 계산하고 그 결과를 생각하고 내용을 정리할 것으로 추측된다. 이들에게 계산은 그 누구보다 일상의 일이다. 그런 일들이 (결과 보고서 작성 같은) 글쓰기라는 또다른 일상의 일과 떨어져 있다면 효율은 떨어질 것이다. 콰르토와 그 바닥에 깔려 있는 컴퓨테이셔널 노트북을 쓴다는 것은 그런 일을 하나로 흐름으로 묶어내는 것과 같다. 그래서 [미국 지구 물리학회](https://eos.org/editors-vox/notebooks-now-elevating-computational-notebooks) 같은 단체도 이와 같은 도구 사용을 적극 권장하는 것이 아닌가 하는 생각을 한다. 자연과학 뿐만 아니라 사회과학에서 데이터는 중요하다. 이런 도구를 사용할 것을 권고하는 [사회과학자의 글](https://kieranhealy.org/files/papers/plain-person-text.pdf)도 읽어볼 만한다.

[![그림 클릭해서 노트북 소개글로 이동](https://i0.wp.com/eos.org/wp-content/uploads/2022/08/Featured-Image-Notebooks-1.png?w=1200&ssl=1)](https://eos.org/editors-vox/notebooks-now-elevating-computational-notebooks)

### 과학 문헌의 요소: 참고문헌, 수식, 상호 참조 기능, 각주, 분자구조 등

콰르토로 작업하면, 다음과 같이 R 또는 파이썬 코드로 생성하는 플롯 등을 쉽게 추가할 수 있다.

```{python}
#| label: fig-polar
#| fig-cap: "직선을 극좌표로 바꿈"

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

이 책과 같이 웹 콘텐츠인 경우 다음과 같은 사용자 인터랙션이 가능한 플롯도 추가할 수 있다.

```{python}
import plotly.express as px
df = px.data.tips()
fig = px.scatter(df, x="total_bill", y="tip", color="smoker", facet_col="sex", facet_row="time")
fig.show()
```

콰르토와 이를 뒷받침하는 팬독에서는 참고문헌 관리가 간단하다. 참고 문헌 관리 소프트웨어를 굳이 사용하지 않아도 쉽게 참고문헌을 관리할 수 있고, 이것을 문서에 포함시킬 수 있다. 유명 저널에서 사용하는 참고 문헌 형식(Citation Styles)으로 모두 표현이 가능하다. 필요하면 커스터마이징도 가능하다. 다음을 참고 문헌을 포함한 텍스트의 일부이다.

--------

페르난도 페레즈는 이런 공로를 인정받아 2017년 "ACM Software System Award" 등을 비롯하여 여러 상을 받았고, 2021년 1월에는 네이처(Nature)가 선정한 "과학은 바꾼 10가지 컴퓨터 코드"(Ten computer codes that transformed science)[@perkel2021ten]로 선정되기도 하였다(클릭하지 말고 마우스를 위에 놓으면 이동하지 않고도 참고문헌을 볼 수 있다).

----------


콰르토에서는 레이텍 {{< latex >}} (이 문자는 `fancy-text`라는 콰르토 익스텐션을 사용하여 입력했다)에서 사용하는 수식을 그대로 쓸 수 있어 수식을 만드는 데 전혀 장애가 없다.

-------

$$ 
X \sim \mathcal{N}(\mu,\,\sigma^{2})
$$ {#eq-normal-distribution}

[@eq-normal-distribution]을 보면 

----------

수학 논문 등에서 필요한 theorem, lemma 등을 입력할 수 있는 환경이 준비되어 있고, 아래와 같이 이것에 대한 상호 참조도 간단하게 만들 수 있다.

---------

::: {#thm-line}

## Line

The equation of any straight line, called a linear equation, can be written as:

$$
y = mx + b
$$
:::

[@thm-line]을 보면...

----------

또는 문서에 [molstar](https://github.com/jmbuhr/quarto-molstar)라는 익스텐션을 사용하여 다음과 같이 고분자 화합물^[<https://www.rcsb.org/3d-view/3GQL>]을 보는 몰스타 뷰어를 포함시킬 수도 있다.


{{< mol-url https://files.rcsb.org/view/3gql.pdb >}}


### R, 파이썬을 일상적으로 사용 

콰르토는 지금은 데이터 과학에서 많이 사용되는 R, 파이썬(Python), 줄리아(Julia), ObservableJS(자바스크립트) 언어에 기반을 둔 엔진을 사용한다. 콰르토를 사용한다는 것은 이와 같은 언어를 사용한다는 의미이다. 현재 거의 모든 과학 분야에서 데이터 과학적인 접근법이 중요해 지고 있다. 

R이나 파이썬에는 대부분의 전문 분야와 관련된 도구들이 마련되어 있다. 제약 분야에서 R [pharmaverse](https://pharmaverse.org)이 있고 생물정보학의 [바이오컨덕터](https://www.bioconductor.org)도 있고, [화성 탐사에도 파이썬](https://learnpython.com/blog/python-on-mars/)이 큰 기여를 한다.

따라서 거의 모든 분야에서 이와 같은 프로그래밍 언어를 잘 쓰는 것은 중요하다. 잘 쓰려면 문서, 보고서 작성과 같은 일상에서 이와 같은 언어를 사용할 필요가 있다. 콰르토는 이런 습관을 들이는 데도 제격이라고 생각한다.


### 다양한 포맷의 문서를 하나의 소스로 다이내믹하게 작성

콰르토 또는 그 전신인 R 마크다운을 사용하면, 소스가 되는 문서를 하나 작성하면 이것을 가지고 워드나 PDF 같은 종이를 기반으로 한 보고서는 물론이고, HTML로 된 문서 또는 프레젠테이션, 블로그, 웹 사이트와 종이책 또는 이북, 웹북 같은 포맷의 복합 문서를 만드는 것도 간단히 해결된다. 

콰르토를 사용하면, 얻어진 데이터를 가지고 R 또는 파이썬을 사용하여 분석한 과정을 투명하게 알 수 있고, 그런 데이터를 가지고 다이내믹하게 표 또는 그래프 등과 연결되기 때문에 결과를 신뢰할 수 있다. 데이터에 업데이트가 있는 경우 다시 계산할 필요없이 바로 결과물을 얻을 수 있다. 이를 통해 데이터와 분석에서의 재현성을 제고할 수 있다.


### 일반 텍스트와 깃(Git) 버전 관리

글쓰는 것이야 "워드나 한글 프로그램에서 타이핑을 하면 그만이지, 뭘 또 규칙을 배워야 해!"라고 생각할지도 모르겠다. 한번 쓰고 버리는 글이야 그럴수도 있지만, 텍스트 에디터에서 일반 텍스트(plain text)로 마크다운 문법을 배워서 글을 쓰면 장점이 많다.

일반 텍스트는 사람이 입력한 것을 거의 있는 그대로 저장하는 방식이다. 내가 좋아하는 『실용주의 프로그래머』[@pragmatic2014] 책에 "일반 텍스트의 힘"에 대한 글이 있다. 책에는 다음과 같이 지식을 저장하는 최고의 포맷이 일반 텍스트라고 하고 있다.

> 실용주의 프로그래머로서 우리의 기본 재료는 나무나 철이 아니고 지식이다. 우리는 요구사항을 지식으로 수집하고 그 지식을 설계, 구현, 테스트 그리고 문서에 표현한다. 그리고 우리는 지식을 저장하는 최고의 포맷이 일반 텍스트(plain text)라고 믿는다. 일반 텍스트를 사용하면 우리가 원하는 거의 모든 도구를 이용해서, 수작업과 프로그램을 통한 방법 모두로 지식을 조작할 수 있는 능력이 생긴다.

콰르토로 글을 쓴다는 것은 플레인 텍스트로 RStudio, VS Code, 또는 주피터 노트북/주피터랩 같은 텍스트 에디터를 사용하여 내용을 쓴다는 것을 의미한다. 텍스트 에디터는 일반 워드 프로세서가 제공하지 못하는 드넓은 자유를 제공한다. 이런 도구는 원래 코드를 작성할 때 주로 사용되는 도구이지만, 일반 텍스트를 작성할 때도 편리한 점이 많다. 나는 VS Code에서 모든 메뉴를 사라지게 하고 내용 입력에 집중할 수 있는 젠 모드(Zen mode) 기능을 즐겨 사용한다. 원하는 파일을 바로 오픈할 수 있고, 파일 안에서 원하는 곳으로 스크롤 없이 바로 이동 가능하다.

플레인 텍스트로 작업하기 때문에, [깃(Git)](https://git-scm.com)을 아는 독자라면 모든 작업 과정을 깃을 이용하여 소스에 대한 버전 관리가 쉽다.



### 몰입하여 글을 쓸 수 있는 환경

콰르토로 글을 쓰다 보면, 문서를 작성하는 일을 한다기보다 뭔가 만든다는 기쁨을 준다. 내용에 집중할 수 있어서 글쓰기의 몰입도를 높일 수 있다. 몰입은 결국은 생산성의 향상으로 이어진다. 재미있고, 빠져든다. 


## 이 글은 Quarto를 사용하여 작업하고 Quarto Pub을 통해 배포된다.

이 사이트의 내용들은 나의 맥북에서 VS Code에서 콰르토를 사용하여 작성한 다음 오픈 출판 플랫폼인 Quarto Pub을 사용하여 작업하였다. 

## 원문 공개 계획

콰르토의 내용은 생각보다 크기 때문에 어디까지 써야할 지 아직 확정하지는 못했다. 전체의 윤곽이 어느 정도 드러나면 이 책 원고의 소스를 깃허브를 통해 공개하려고 한다. 윤곽이 잡히기 전에는 바뀔 수 있는 내용이 많을 수 있어 오히려 혼란을 줄 수 있다고 보기 때문이다.

## 참고문헌








