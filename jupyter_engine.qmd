---
jupyter: python3
---

# 주피터 엔진 {#jupyter_projects}

주피터는 오늘날 데이터 과학자들이 가장 많이 사용하는 컴퓨테이셔널 노트북이다. 이 장에서는 주피터 시스템에 대한 소개와 콰르토에서 어떻게 사용하는지에 대해서 설명한다.

[주피터 공식 웹사이트](https://jupyter.org)를 비롯하여 인터넷에서 주피터 관련 자료는 아주 방대하다. 관련 에코시스템이 넓다는 점에서는 아주 반가운 일이지만, 입문자나 깊이 있게 주피터 에코시스템을 들여다 보지 않은 경우에는 어떤 내용을 어떻게 접근해야 하는지 한참을 헤매고 나서야 감을 잡게 될 수도 있다. 그래서 이 장에서는 주피터 시스템에 대한 숲을 볼 수 있게 주피터와 관련된 역사와 주피터의 원리 등을 체계있게 설명하고자 한다. 주로 다음과 같은 내용을 다루고자 한다.

- IPython 프로젝트와 주피터 프로젝트의 역사
- IPython 콘솔,주피터 노트북의 작동 원리와 디폴트 커널
- 강화된 파이썬 셸: IPython 셸
- 주피터 프런트엔드 인터페이스: 주피터 노트북, 주피터랩, 기타
- 주피터 커널 시스템
- VS Code에서 주피터 노트북 사용하기
- 주피터 노트북에서 콰르토 사용하기

참고로 주피터는 영어로 "Jupyter"로 목성을 의미하는 Jupiter와는 다르다. Jupyter는 줄리아(Julia), 파이썬(Python), R 언어를 약자를 따서 만들어진 단어이다. 그래도 [@fig-jupyer-logo] 주피터 로고는 목성과 주변 목성의 달들에 영향을 받았다.

[![주피터 로고(클릭해서 위키피디아 주피터 로고 설명 보기)](images/jupyter_logo2.png){#fig-jupyer-logo}](https://en.wikipedia.org/wiki/Project_Jupyter#/media/File:Galileo_Galilei_(1564_-_1642)_-_Serenissimo_Principe_-_manuscript_with_observations_of_Jupiter_and_four_of_its_moons,_1610.png)

## IPython 프로젝트와 주피터 프로젝트의 역사 {#history}

필자가 처음 파이썬 데이터 과학을 공부하기 시작했을 때, IPython, IPython notebook, Jupyter notebook 등이 서로 어떤 관계가 있는지 매우 혼란스러웠다. 어떤 사람들(혹은 책)은 IPython notebook이라고 하고 어떤 사람들은 같은 도구를 Jupyter notebook이라고 하였기 때문이다. 이런 이름들이 쓰이는 이유는 [@fig-history]에 정리한 주피터의 역사와 밀접하게 관련되어 있다. 주피터 노트북과 데이터 과학 노트북에 관련하여 자세한 내용은 ["IPython Or Jupyter?"](<https://www.datacamp.com/community/blog/ipython-jupyter>)라는 글 등을 참고하면 좋겠다.

![주피터 에코시스템의 역사](images/project_history.png){#fig-history}

[@fig-history]에서 주요 사건은 다음과 같다.

-   주피터는 2000년도 초반 IPython 프로젝트에서 출발했다. 2001년 대학원생이었던 페르난도 페레즈(Fernando Pérez)는 기존 전통적인 파이썬 셸(shell)의 사용자 인터랙션 기능을 보강한 파이썬 셸을 만들기 위해서 아이파이썬(IPython) 프로젝트를 시작했다. 페르난도 페레즈는 기존에 있었던 Mathematica Notebook과 Maple Worksheet에 영향을 많이 받았고 그와 비슷한 시스템을 만들어 보고자 했다. 

- 파이썬에 필요한 노트북 개발은 2005년경부터 시작되어 2010년경에 브라이언 그레인저(Brian Granger), 민 레이건 켈리(Min Ragan Kelley) 등 핵심 기여자들이 합류하고 웹소켓, 제로앰큐(PyZMQ) 등의 관련 기술의 발전에 탄력을 받아, 2011년 12월 21일 아이파이썬 노트북(IPython notebook, 0.12 버전)을 출시하기에 이른다.

-   이후 같은 기술을 사용하면 IPython Notebook에서도 파이썬 뿐만 아니라 줄리아(Julia), R과 같은 데이터 분석 언어들과 연결할 수 사용할 수 있다는 아이디어를 바탕을 이를 실제로 구현하여 2014년 SciPy2014 컨퍼런스에서 [주피터 노트북(Jupyter notebook)을 발표](<https://www.youtube.com/watch?v=JDrhn0-r9Eg&feature=youtu.be&t=4m15s>)하였다. Jupyter는 Julia, Python, R에서 따온 단어이다. 그리고 IPython notebook이 파이썬과 관련된 노트북이라는 의미를 담고 있어 이를 확장하여 Jupyter notebook으로 변경하게 되었다고 한다.

-   이후 프로젝트가 이전보다 훨씬 큰 규모로 진행되어 2015년에 ["빅 스플릿"](<https://blog.jupyter.org/the-big-split-9d7b88a031a7>)을 선언하면서 기존 프로젝트를 주피터 프로젝트와 IPython 프로젝트로 나뉘게 되었다.

-   2018년 주피터 노트북의 미래라고 하는 [주피터랩(JupyterLab)](https://jupyterlab.readthedocs.io/en/stable/)을 출시했다. 주피터랩은 주피터 노트북을 쓰면서 불편하다고 생각되었던 부분들을 많이 보강한 것으로, 최근에는 [데스크톱 앱](https://github.com/jupyterlab/jupyterlab-desktop)까지 만들어 지는 등 관련 기술들이 계속 발전하고 있다.


페르난도 페레즈는 이런 공로를 인정받아 2017년 "ACM Software System Award" 등을 비롯하여 여러 상을 받았고, 2021년 1월에는 네이처(Nature)가 선정한 "과학은 바꾼 10가지 컴퓨터 코드"(Ten computer codes that transformed science)[@perkel2021ten]로 선정되기도 하였다. 좀 더 자세한 내용은 [위키피디아](https://en.wikipedia.org/wiki/Project_Jupyter)를 참고한다.

## IPython 콘솔, 주피터 노트북의 작동 원리, 디폴트 커널

앞에서 주피터의 역사를 소개하면서 페르난도 페레즈가 IPython 프로젝트를 시작한 동기가 전통적인 파이썬 셸(shell)의 사용자 인터랙션 기능을 보강한 파이썬 셸을 만들기 위함이였다고 설명했다. 이제 전통적인 파이썬 셸과 이것을 보강해서 만든 `ipython` 셸을 비교해 보자.

전통적인 파이썬 셸은 커맨드라인에서 `python` 또는 윈도우에서 `py`라는 명령으로 실행된다. 다음은 그런 예의 하나이다.

``` .bash
Python 3.9.7 | packaged by conda-forge | (default, Sep 29 2021, 19:24:02) 
[Clang 11.1.0 ] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> 
```

이와 같은 파이썬 콘솔은 `>>>`라는 프롬프트를 사용한다. 이와 같은 콘솔은 사용자가 입력한 코드를 읽어서(Read), 이것을 실행한 다음(Eval), 그 결과를 바로 출력한다(Print). 그래서 이와 같은 종류의 콘솔을 레플(REPL)이라고 부른다.

전통적인 파이썬 셸에서 현재 디럭터리에 있는 파일 리스트를 보거나, 현재 디렉터리에 있는 파이썬 스크립트(`,py`)를 실행하려면 별도의 탭을 열거나 그런 탭이 불가능한 경우에는 셸을 빠져 나온 다음 작업을 해야 한다. 이를 테면 현재 디렉터리에 있는 `greetHello.py`라른 스크립트를 실행하려면 커맨드라인에서 `$ python greetHeello.py`라는 명령을 실행해야 한다.

IPython은 이와 같은 불편을 덜고자 했다. IPython 방식의 새로운 파이썬 셸은 코맨드라인에서 `ipython`이라는 명령으로 시행된다.

``` .bash
Python 3.9.7 | packaged by conda-forge | (default, Sep 29 2021, 19:24:02) 
Type 'copyright', 'credits' or 'license' for more information
IPython 8.0.1 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 
```

`ipython` 셸은 전통적인 파이썬의 모든 기능을 다 갖추고 있다. 여기에 사용자 편의성을 더 얹었다. 이를테면 `%ls`(맥과 같은 유닉스 계열인 경우), `%dir`(윈도우 시스템인 경우)를 입력하면 셸을 빠져 나가지 않고도 현재 디렉터리에 있는 파일 리스트를 얻을 수 있다. `ipython`에서 `%`나 `%%`로 시작되는 명령을 **매직 커맨드(magic command)**라고 부른다. 이와 같은 확장 기능들 가운데 중요한 몇 가지는 다음 절에서 설명한다. 이것이 IPython의 중요한 두 가지 목적 가운데 하나인 "강화된 파이썬 레플"이다.

IPython의 두 번째 목적은 노트북과 같은 프론트엔드 인터페이스에 연결되더 백엔드에서 계산과 커뮤니케이션 기능을 제공하는 IPython 커널을 제공하는 것이다. 우리가 주피터 커널을 개발하는 개발자는 아니기 때문에 IPython 커널의 세부적인 내용보다는 높은 수준에서 그 역할을 이해하는 것이 중요하므로, 주피터 노트북이 전체적으로 작동되는 방식이 [@fig-notebook-components]에 표현되어 있다. 이 그림은 [주피터 프로젝트 웹사이트](https://docs.jupyter.org/en/latest/projects/architecture/content-architecture.html#the-jupyter-notebook-interface)에 소개되어 있다.

![주피터 노트북의 구성 요소](images/notebook_components.png){#fig-notebook-components}

그림을 보면 사용자는 브라우저에서 주피터 노트북 인터페이스를 통해서 코드 또는 텍스트를 실행한다. 이렇게 입력된 내용들은 노트북 서버(Notebook Server)로 보내지고, 서트북 서버는 그 파일을 파일로 저장하고 필요한 경우 다시 사용자에게 보낸다. 또한 노트북 서버는 코드와 같이 계산이 필요한 경우 커널(Kernel)로 보내고 그 결과를 다시 받고, 그리고 그것을 사용자에게 넘겨준다. 그래서 커널은 파이썬 코드를 실행하고 그 결과를 노트북 서버에 넘겨주는 역할을 한다.

여기서 말하는 커널이 앞에서 본 IPython 커널이다. 그래서 IPython은 `ipython`으로 실행되는 파이썬 레플 역할을 하기도 하고 주피터 노트북에 대한 디폴트 커널 역할을 한다. 그 커널의 이름은 `ipykernel`이라고 한다. 독자들은 주피터 노트북이나 주피터랩을 처음 사용할 때 별도의 커널 없이 시작하는 경우 이 디폴트 커널을 볼 수 있을 수 있을 것이다.

이제 주피터 노트북의 작동 원리에 대한 개괄적인 개념을 파악했다. 이제 하나씩 사용법을 보자.

## IPython 셸: 강화된 파이썬 셸  {#sec-ipython-tutorial}

[IPython 셸](https://ipython.readthedocs.io/en/stable/)은 크게 다음 2가지 역할을 한다.

1. `ipython` 명령으로 실행되는 강화된 레플을 제공한다. 
2. 주피터 노트북에서는 디폴트 커널 역할(`ipykernel`이라는 이름으로)을 한다. 

따라서 여기서 소개하는 내용은 `ipython` 명령으로 실행되는 레플(REPL)에서 뿐만 아니라, 이 커널을 사용하는 주피터 노트북/주피터랩에서도 똑같이 사용된다. 만약 주피터 노트북/주피터랩이 이 디폴트 커널과 연결되지 않고 다른 커널로 연결된 경우에는 여기서 설명한 내용이 적용되지 않는다는 점도 알아 두자.

::: callout-note
## IPython 셸 버전

IPython 셸 버전이 문제가 될 경우는 흔하지 않지만 이 글을 쓰는 시점의 버전은 `8.7.0`이다. 버전은 커맨드라인에서 다음 명령을 사용하여 확인할 수 있다.

``` .bash
$ ipython --version
```

최신 버전으로 업그레이드 하려면 다음과 같은 명령을 사용한다.

``` .bash
pip install ipython ipykernel --upgrade
```

또는

``` .bash
conda update ipython ipykernel
```
:::

IPython 셸과 관련된 모든 내용을 여기서 다 정리할 필요는 없을 것이다. 여기에서는 자주 사용되고 꼭 알아두면 유용한 기능만 추려서 간단히 소개하려 한다. IPython을 깊게 이해하고자 한다면 [IPython 공식 문서](https://ipython.readthedocs.io/en/stable/)를 참고한다. 앞에서 설명한 바와 같이 IPython 셸이 주피터 노트북의 디폴트 커널 역할도 하기 때문에 다음 설명하는 내용들은 이 디폴트 커널(ipykernel)을 사용하는 경우에는 모두 적용되어 주피터 노트북을 사용할 때도 사용가능하다.

### IPython 셸의 실행

주피터 라이브러리가 설치된 파이썬 가상 환경을 활성한 후에 커맨드라인에서 `ipython` 명령을 실행하면 IPython 셸이 실행된다.

``` .bash
(using_quarto) seokbumko@ksbm1pro16 Python_Sand % ipython
Python 3.9.15 (main, Nov 24 2022, 08:29:02) 
Type 'copyright', 'credits' or 'license' for more information
IPython 8.7.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: 
```

### 자동제안, 자동 완성, 객체 조사, 도움말 문서 확인

IPython 8.0 이상의 버전에서는 자동 제안 기능이 추가되었다. 다음은 이것을 사용하는 예를 보여 준다. `my_list`가 입력된 적이 있는 경우, `my`라고 입력하다 보면 자동으로 이전의 입력했던 코드를 제안한다. 제안을 받아들이고자 한다면 오른쪽 화살표나 `Ctrl+F` 또는`Ctrl-E` 친 다음 엔터키를 친다.

![IPython 셸 자동 제안 사용(이 다음 오른쪽 화살표, 엔터를 입력한다)](./images/auto_suggestion.png){#fig-auto-completion}

IPython에는 TAB 자동 완성 기능이 있다. 위와 같은 코드가 있는 경우 `my_`를 입력하면 TAB을 입력하면 자동 완성된다. 자동 완성 기능의 객체의 이름 뿐만 아니라 모듈을 임포트할 때 서브모듈을 확인하여 선택할 때도 유용하고 메서드를 선택할 때도 편리하다.

다음은 NumPy 패키지를 로딩한 다음 `random` 서브 모듈에서 메서드들을 확인할 수 있다.

![np.random.까지 입력하고 TAB을 치면 이하 메서드들을 보여주고, 화살표로 이동하여 메서드를 사용할 수 있다.](./images/method_selection.png){#fig-method-selection} 

파이썬 객체를 조사할 때는 객체의 이름을 입력하고 나서 `?` 또는 좀 더 자세한 내용을 원하는 경우 `??`를 입력하고 엔터키를 친다. 아래 예는 `my_dict`이라는 객체를 만들고 그 정보를 확인하는 과정이다.

![객체 조사하기](images/object_inspection.png){#fig-object-inspection}


`??`는 함수 소스를 확인할 때 편리하다. `?`만 입력하는 경우 함수의 도움말 문자열(docstring)만 출력되는데, `??`까지 입력하는 경우에는 그 소스까지 확인할 수 있다(그렇지만 내장 함수인 경우에는 C 코드 등으로 구현되어 있어 그것까지 소스로 보여주지는 않는다).

![? 또는 ??로 함수 조사하기](./images/function_inspection.png){#fig-function-inspection}

### 매직 명령어와 시스템 셸 명령

IPython 셸은 **매직 명령어(magic commands)**라고 하는 일군의 명령어를 제공한다. 이런 명령들은 디렉터리 변경이나 파일 리스트를 보거나, 파이썬 코드 실행 시간을 평가해 주거나, 파이썬 스크립트를 바로 실행해 볼 수 있는 등 다양한 기능을 제공한다.

매직 명령어는 `%`로 시작한다. `%` 하나로 시작하는 경우는 라인 매직 명령어(line magic command)라고 하고 `%%`로 셀 매직 명령어(cell magic command)라고 한다. 이런 매직 명령어의 이름은 유닉스 시스템 명령어가 많지만 맥과 같은 유닉스 계열의 시스템 뿐만 아니라 윈도우에서도 똑같이 사용할 수 있다.

흔히 사용되는 매직 명령어 몇 개만 소개하고자 한다. 이 매직 명령어에 대한 포괄적인 설명은 IPython 셸에서 `%magic` 명령으로 확인할 수 있다.

-   `%ls`: 현재 디텍터리의 파일 리스트
-   `%pwd`: 현재 디텍터리의 경로
-   `%cd ../mydir`: 부모 디렉터리의 `mydir` 서브 디렉터리로 변경
-   `%run myscript.py`: 현재 디렉터리에 있는 `myscript.py` 스크립트를 실행
-   `%who`, `%who_ls`, `%whos`: 현재 세센에 존재하는 객체들의 이름, 리스트, 표
-   `%%writefile`: 텍스트 파일 작성

이와 같은 매직 명령어 외에 `!`로 시작하는 **시스템 셸 명령**이 있다. 예를 들어 맥에서 현재 디렉터리의 파일 리스트를 확인할 때 `ls`라는 명령을 사용하고 윈도우에서는 `dir` 명령을 사용한다. 이 명령을 IPython 셸 안에서 실행할 수 있는데, 각각 `!ls`, `!dir`라는 명령을 사용할 수 있다. 

앞에서 설명된 내용에 대한 사용 예로 새로운 디렉터리를 만들고, 거기로 이동한 다음, 거기에 파이썬 스크립트를 만들고, 이것을 실행해 보려고 한다. IPython 셸을 빠져 나가지 않고도 모든 작업이 가능한다.

``` .markdown
In [1]: %mkdir example_dir   # 새로운 디렉터리 만들기

In [2]: %cd example_dir      # 디렉터리로 이동
/Users/seokbumko/Documents/Sandbox/example_dir

In [3]: %%writefile py_example.py # 텍스트 파일 작성, 셀 매직
   ...: def add(x, y):
   ...:     return x + y
   ...: 
   ...: print(add(2, 5))
   ...: 
   ...:                          
Overwriting py_example.py

In [4]: %ls                   # 현재 디텍터리의 파일
py_example.py

In [5]: %run py_example.py   # 스크립트 실행 
7
```

설명한 매직 명령 이외에도 코드 실행 시간을 알려주는 `%time`, `%timeit`과 같은 매직 명령도 자주 사용된다. 

IPython에 대한 더 자세한 내용은 [공식 문서](https://ipython.readthedocs.io/en/stable/)를 참고한다.


## 주피터 노트북

주피터 노트북을 설치하고 실행하는 방법은 [@sec-ComputerConfiguration]을 참고한다. 

### 주피터 노트북 시작하기 

순서는 정리해 보면 다음과 같다. 보통은 터미널(명령 프롬프트)에서 진행된다.

1. 컴퓨터에 파이썬을 설치한다.
1. 파이썬 (콘다) 가상 환경을 만든다. 
1. 가상 환경을 활성화하고, 여기서 `jupyter`를 설치한다. 
1. 작업할 디렉터리로 이동한다.
1. `jupyter notebook` 명령을 실행한다.

참고로 댜음은 내 컴퓨터에 생성된 `using_quarto`라고 하는 가상 환경이 있고, 이것을 활성화시키고, 작업할 디렉터리인 `~/Documents/Python_Sand`로 이동하고, `jupyter notebook`을 명령을 실행하는 과정이다.

``` bash
(base) seokbumko@ksbm1pro16 ~ % conda activate using_quarto
(using_quarto) seokbumko@ksbm1pro16 ~ % cd Documents/Python_Sand 
(using_quarto) seokbumko@ksbm1pro16 Python_Sand % jupyter notebook
[I 2023-01-01 22:19:18.438 LabApp] JupyterLab extension loaded from /Users/seokbumko/opt/anaconda3/envs/using_quarto/lib/python3.9/site-packages/jupyterlab
[I 2023-01-01 22:19:18.438 LabApp] JupyterLab application directory is /Users/seokbumko/opt/anaconda3/envs/using_quarto/share/jupyter/lab
[I 22:19:18.442 NotebookApp] Serving notebooks from local directory: /Users/seokbumko/Documents/Python_Sand
[I 22:19:18.442 NotebookApp] Jupyter Notebook 6.5.2 is running at:
[I 22:19:18.442 NotebookApp] http://localhost:8888/?token=35087f63e27fadc47f62cc6d63a09910937e479d309b0a35
[I 22:19:18.442 NotebookApp]  or http://127.0.0.1:8888/?token=35087f63e27fadc47f62cc6d63a09910937e479d309b0a35
[I 22:19:18.442 NotebookApp] Use Control-C to stop this server and shut down all kernels (twice to skip confirmation).
[C 22:19:18.456 NotebookApp] 
    
    To access the notebook, open this file in a browser:
        file:///Users/seokbumko/Library/Jupyter/runtime/nbserver-87722-open.html
    Or copy and paste one of these URLs:
        http://localhost:8888/?token=35087f63e27fadc47f62cc6d63a09910937e479d309b0a35
     or http://127.0.0.1:8888/?token=35087f63e27fadc47f62cc6d63a09910937e479d309b0a35
```

터미널에 출력되는 주소로 브라우저가 자동으로 열린다(열리지 않으면 설명과 같이 아래 보이는 URL을 복사하여 브라우저 주소창에 붙이면 된다). 처음 열리는 창을 대시보드라고 한다.

![오른쪽 New 버튼을 클릭하고, 사용할 커널을 선택한다.](images/jupyter_dashboard2.png){#fig-jupyter-dashboard2}

대시보드의 오른쪽 위에 있는 **New** 버튼을 클릭하고, 사용할 커널(`ipykernel`)을 선택한다. 그러면 새로운 노트북 파일이 생성된다.


![새로운 노트북 파일](images/new_notebook.png){#fig-new_notebook}


### 주피터 노트북 셀 {#cellsofJupyter}

주피터 노트북에서 콘텐츠틑 네모난 모양의 셀(cell)에 입력된다. 실제로 주피터 노트북을 사용할 때는 엑셀 스프레드시트의 셀과 같이 셀 작업은 모든 작업의 기초가 된다. 그래서 잘 익힐 필요가 있다.

#### 셀의 종류, 입력과 실행, 셀 편집 및 명령 모드

![셀의 종류를 바꾸는 방법](images/cell_change.png){#fig-cell-change width="70%" fig-align="center"}

주피터 노트북에서는 코드, 텍스트를 모두 셀에 입력한다. 내용을 입력할 때는 입력할 내용에 따라 @fig-cell-change 방법을 사용하여 셀의 타입을 정하고 나서 내용을 입력한다. 셀에는 3 가지 종류가 있다.

1. 코드 셀(Code Cells)

    + 코드를 입력하는 셀이다. 셀에 입력된 코드는 연결된 커널로 보내져서 실행되고, 그 결과는 해당 셀 바로 아래에 출력된다.
    + 코드 셀은 앞 부분에 `In []:`이 표시되어 있다. 코드가 실행된 경우 `[]` 안에 번호가 부여된다. 번호가 없다면 아직 실행된 코드가 아니다.


1. 마크다운 셀(Markdown Cells)

	+ 마크다운을 사용하여 텍스트를 입력하는 셀이다. 마크다운 셀 앞에는 아무것도 보이지 않는다. 마크다운 셀에 마크다운 텍스트를 입력하고 셀을 실행시키면 마크다운이 프로세싱되고, 셀이 프로세싱된 내용으로 대체된다.

1. 라우 셀(Raw Cells)

    + 라우 셀(Raw Cell)은 있는 그대로의 내용을 보존하기 위한 내용을 입력할 때 사용한다. 예를 들면 콰르토 문서를 만들 때, 주피터노트북/주피터랩으로 작업하는 경우 여기에 YAML 프런트 매터를 적어 놓는다.
    
   
노트북에 표시되는 디폴트 셀 타입은 **코드 셀**로 코드를 입력하여 실행하는 셀이다. 이 코드 셀을 마크다운 셀로 변환할 때는 아래 그림과 같이 툴바를 이용한다(단축키를 사용하면 편리한 데, 뒤에서 설명된다).

이제 셀의 타입에 따라 내용을 입력하고 실행하는 방법을 알아보자.

- 코드를 입력하고 실행하는 방법
        코드 셀에 코드를 입력하고, `Shift+Enter`를 사용하여 코드를 실행한다. 그러면 셀 바로 다음에 코드 실행된 결과가 출력된다. 그런 다음 자동으로 아래에 셀이 추가되고 새로운 셀로 포커스가 이동한다. `Ctrl+Enter`는 해당 셀의 코드만 실행되고 새로운 셀이 추가되지 않는다는 차이가 있다. 

- 텍스트(마크다운)을 입력하고 실행하는 방법
    
        마크다운 텍스트를 입력할 때는 마크다운 셀로 바꾼 다음 마크다운 문법을 사용하여 내용을 입력한다. 입력하고 `Shift+Enter` 또는 `Ctrl+Enter`로 프로세싱한다. 프로세싱된 결과는 해당 셀의 위치에 표시된다. 이 셀의 내용을 수정하려면 해당 위치에 마우스를 가져다 놓고 더블클릭한다.

다음은 코드 셀과 마크다운 셀을 사용하는 주피터 노트북의 일부를 보여준다.

![마크다운 셀과 코드 셀](images/two_cells.png){#fig-two-cells}

[@fig-two-cells]의 내용은 간단한데 몇 가지 주목할 내용이 있다. 먼저 코드 셀은 앞에 `In [1]`과 같은 표시가 있고, 결과 출력 앞에는 `Out[1]`과 같이 표시된다. 안에 숫자는 코드 셀들이 실행된 순서를 가리킨다. 

다음은 내용은 주피터 노트북(주피터랩, VS Code 안에 주피터 노트북)을 쓸 때 모두 적용되는 것으로, 셀 모드(cell mode)와 단축키에 관한 것이다.

현재의 마우스 커서가 있어서 포커스가 되어 있는 셀은 주변이 녹색으로 표시된다. 이 녹색 테두리는 현재의 셀의 **편집 모드(Edit mode)**에 있음을 알려준다. 이 상태에서는 화면 오른쪽 위에 커널 이름 앞에 연필 모양의 아이콘이 보인다. 

이렇게 녹색으로 되어 있는 편집 모드에서 **`ESC` 키**를 치면, 안에 있던 마우스 커서가 사라지고 주변 테두리가 파란색으로 바뀐다. 이것을 **명령 모드(Command mode)**라고 한다. 명령 모드는 셀을 삭제하는 것과 같이 셀 단위의 작업을 할 때 다음과 같은 명령을 사용할 수 있다. 명령 모드에서 다음과 같이 알파벳 키를 치면 해당되는 작업이 수행된다.

- `A`, `B`: 현재 셀의 위(`A`) 또는 아래(`B`)에 새로운 셀 추가
- `Y`: 코드 셀로 변경
- `M`: 마크다운 셀로 변경 
- `C`, `V`: 셀을 복사하고(`C`), 다른 곳으로 이동한 다음 붙임(`V`)
- `Enter`: 명령 모드에서 편집 모드로 변경(셀 안에 커서가 놓임)
- `DD`: 현재 셀 삭제 
- `Z`: 이전 상태 복원(언두잉)
- `L`: 셀의 행 번호를 표시
- `Ctrl+Enter`: 코드 실행 
- `Shift+Enter`: 코드를 실행하고 아래 셀로 포커스 이동
- `Alt+Enter`: 코드를 실행하고 아래 새로운 셀이 추가 


모든 단축키가 그렇지만, 손에 익혀 두면 매우 유익하다.

::: {.callout-note}
셀 모드 변경을 변경하는 방법은 반드시 기억하자.  

1. 편집 모드에서 명령 모드 전환: ESC 키 
1. 명령 모드에서 편집 모드 전환: Enter 키 
:::


### IPython 매직 명령어와 셸 명령어 

코드 셀에 프로그래밍 언어 코드 이외에도 앞에서 설명했던 IPython 셸의 매직 명령어와 셸 명령을 모두 사용할 수 있다. 그래서 코드 셀에 `%ls` 매직 명령을 입력하고 `Shift+Enter`를 입력하면 현재 디렉터리의 파일 리스트를 볼 수 있다. `%run` 매직 명령을 사용하면 현재 디렉터리에 있는 파이썬 스크립트를 실행할 수 있다. 

이와 같은 기능은 디폴트 커널인 `ipykernel`에 들어 있는 기능이다. 뒤에서 설명되지만 다른 커널을 사용할 때는 해당 커널이 이런 기능을 제공하지 않는 경우가 대부분일 것이므로 이 기능을 사용할 수 없다는 것을 알아두자.

![ipykernel 커널을 사용하는 주피터 노트북에서는 IPython 매직 명령과 셸 명령 기능을 그대로 사용할 수 있다.](images/magic_in_jupyter.png){#fig-magic_in_jupyter}

### 리치 아웃풋: IPython.display {#sec-rich-ipython}

주피터 노트북에 이미지, 동영상, SVG 이미지 등 특수한 컨텐츠를 추가할 때는 `IPython.display`라는 모듈을 사용한다. 이 모듈 안에는 콘텐츠에 대응하는 파이썬 클래스가 준비되어 있으며, 이것들을 실제 노트북에서 출력하게 해주는 `display` 함수가 있다. 

일반적인 사용법은 다음과 같다. 먼저 모듈을 임포트한다.

```{python}
from IPython.display import display, Image, SVG, YouTubeVideo
```

이 파이선 문장은 `IPython.display`라는 모듈에서 `display`(함수), `Image`, `SVG`, `YouTubeVideo` 클래스 함수를 임포트한다.

다음은 `Image`, `SVG`, `YouTubeVideo` 클래스를 호출하여, 해당 클래스에 대한 객체(인스턴스)를 만든 다음, 이 객체를 `display()` 함수를 사용하여 출력한다.

```{python}
my_image = Image("https://www.python.org/static/img/python-logo@2x.png")
display(my_image)
```

대표적인 콘텐츠별로 출력을 조절하는 방법을 알아보자.

이미지를 출력할 때는 `IPython.dispaly.Image()` 클래스를 사용한다. 노트북에 완전히 임베딩하는 방법과 그렇지 경우가 있다.

- 직접 임베딩:  `url` 키워드를 사용하지 않고 URL 지정 또는 `embed=True` 사용
- URL로 렌더링: `url` 키워드 사용 또는 `embed=False`라는 키워드 사용

다음은 그 사용 예이다.

```{python}
Image("https://www.python.org/static/img/python-logo@2x.png") # embed = True
```


```{python}
Image(url = "https://www.python.org/static/img/python-logo@2x.png") # embed = False
```


스케일러블 벡터 그래픽(Scalable Vector Graphics,SVG)을 추가할 때는 `SVG()` 클래스를 사용한다.

```{python}
logo = SVG("https://jupyter.org/assets/homepage/main-logo.svg")
display(logo)
```

유튜브 동영상도 넣을 수 있다. 유튜브 동영상을 넣기 위해서는 `YouTuboeVideo()` 함수를 사용한다. 이 코드에서도 동영상을 바로 디스플레이 하지 않고, 변수로 할당했다가 `display()` 함수를 사용하여 동영상이 표시되게 했다.


```{python}
my_video = YouTubeVideo("xuNj5paMuow")
display(my_video)
```

이런 방법을 사용하면 특수한 콘텐츠를 쉽게 사용할 수 있다. 레이텍 텍스트는 `Latex()`로 코드는 `Code()` 함수로 PNG 이미지는 `display_png()` 함수 등으로 표시되게 만들 수 있다. 

더 자세한 내용은 [IPython.module 설명서](https://ipython.readthedocs.io/en/stable/api/generated/IPython.display.html)을 참고한다.

주피터 노트북에는 마크다운 셀을 사용하여 수식을 넣은 수 있는 훌륭한 기능을 제공한다. 주피터 노트북이 웹 브라우저에서 실행되기 때문에, 브라우저에서 수식을 넣는 데 가장 많이 사용되는 매스잭스(MathJax)^[<https://www.mathjax.org>]을 내부적으로 활용한다. 이런 매스잭스는 레이텍의 수식을 웹 언어로 변환하는 툴이 있는데 이것으로 레이턱으로 작성된 수식을 깔끔하게 웹 컨텐츠로 변환시키다.

주의할 점은 이런 수식은 마크다운 셀에 넣어야 한다는 점이고, 레이텍에서 쓰는 수식 작성법을 그대로 사용할 수도 있다. 다음과 같은 수식을 마크다운 셀에 넣고 렌더링하면 수식이 된다. 

![수식 입력](images/math_display.png){#fig-math-display}

수식은 텍스트와 같이 쓰일 수도 있는데, 그런 경우를 인라인 수식이라고 부르고 다음과 같이 `$...$` 안에 넣어서 표현한다.

    x를 y로 나눈다. $\frac{x}{y}$는....

## 주피터 랩

주피터랩은 주피터 노트북의 장점을 살리면서, 주피터 노트북이 가지지 못했던 부분을 많이 강화했다. 개발자들은 주피터랩을 전통적인 통합개발환경의 기능을 갖추고 있으면서도, 데이터 분석에 최적인 노트북의 기능은 그대로 보존하기 위해서 노력하고 있다.

### 주피터랩의 설치와 실행 {#Inatallation}

다음 과정으로 주피터랩을 설치한다.

1. 커맨드라인으로 들어가서, 가상 환경을 활성화한다.

1. 다음 `conda install -c conda-forge jupyterlab`을 실행한다.

		$ conda install -c conda-forge jupyterlab

1. 설치가 완료되면 작업 디렉터리로 이동한다.

1. 작업 디렉터리에서 `jupyter lab` 명령으로 시작한다(이 명령은 암기한다).

		$ jupyter lab


이렇게 해서 정상적으로 진행되면, 디폴트로 설정된 브라우저의 <http://localhost:8888/lab> 주소에서 다음과 같은 화면으로 주피터랩이 실행된다. 이것을 주피터랩의 론처(Launcher)라고 부른다.


![주피터 론처](images/lab_initial.png){#jupyter-launcher}


1. 노트북(Notebook): 노트북 작업을 위한 커널
2. 콘솔(Console)
3. 기타: 터미널과 텍스트 에디터 등

파이썬 커널을 선택하면 새로운 주피터 노트북이 열린다.

![주피터랩에 새로운 노트북이 열린 모습](images/lab_notebook.png){#fig-new-notebooklab}

오른쪽 노트북 편집 영역은 주피터 노트북과 거의 같다. 주피터랩은 주피터 노트북 파일인 `.ipynb` 파일을 그대로 사용한다. 그리고 주피터 노트북에서 쓰던 셀 편집 방법을 그대로 사용할 수 있다. 이제 주피터랩의 기능들을 살펴보자.

### 주피터랩의 다양한 기능들

주피너랩은 주피터 노트북 파일 포맷(`.ipynb`)을 그대로 사용한다. 주피터랩 역시 파이썬은 거의 아이파이썬 커널을 통해서 사용되기 때문에, 아이파이썬의 기능을 그대로 사용할 수 있다. 주피터랩은 주피터 노트북을 확장한 것으로 기존 주피터 노트북 인터페이스도 함께 사용할 수 있다. 주피터랩의 **Help >> Launch Classic Notebook** 메뉴을 선택하여 전통적인 주피터 노트북 화면으로 바뀐다.

셀과 관련된 맥락 메뉴를 보자. 셀 위에서 오른쪽 마우스를 클릭한다. 이 메뉴를 사용하여 다양한 일을 할 수 있다는 것을 알 수 있을 것이다. 셀 잘라내기, 복사, 붙이기, 삭제하기, 나누기 등의 일을 할 수 있다.

![](images/lab_context_menu.png)

셀을 드래그 하여 셀을 이동시킬 수 있다. 이 기능은 같은 노트북 안에서 뿐만 아니라, 다른 노트북 파일로도 가능하다. 다음 그림과 같이 셀 앞에 마우스를 두면 커서 모양이 바뀐다. 이 상태에서 노트북 안에서 또는 다른 노트북으로 이동시킬 수 있다.

![드래그하여 셀 이동하기](images/lab_cell_move.png){#fig-jupyterlab-drag}

**View** 메뉴를 보면 **Show Line Numbers** 메뉴가 있는데, 이 메뉴를 통해서 코드의 행 번호 출력을 조절할 수 있다.

현재 집중하는 코드가 아닌 경우 잠시 접어둘 수 있다. 코드 주변에 마우스를 클릭하면 아래 그림과 같이 앞에 파란색 바가 생긴다. 이것을 클릭하면 크기가 줄면서 해당 셀이 보이지 않게 되고, 다시 클릭하면 보이게 된다. **View** 메뉴에도 이 기능이 있다.

![코드를 접고 펼치는 기능](images/lab_code_folding.png){#fig-lab-code-folding}

셀의 삭제하거나 이동하는 등의 일을 다시 되돌리고 싶은 경우에는 마우스 오른쪽을 클릭해서 **Undo Cell Operation**을 선택하다.

이전보다 도움말 보기가 훨씬 더 편리해졌다. 코드에서 알고자 하는 것에 커서를 두고 `Shift+TAB` 키를 치면 관련된 정보가 새로운 창에 열린다.

![Shift+TAB 키로 도움말을 볼 수 있다.](images/lab_help.png){#fig-lab-help}

주피터랩의 맥락적 도움말(Contextual Help)을 사용하면 변수나 함수에 대한 설명을 쉽게 볼 수 있다. 사용하는 방법은 먼저 **Help >> Show Contextual Help**를 선택하여 맥락적 도움말 창을 연다. 윈도우에선 `Contrl+I`, 맥에서 `Command+I`을 클릭해서도 열린다. 그리고 셀 안의 변수나 함수를 클릭하면 도움말을 볼 수 있다.

![Contextual Help 창](images/contextual_help.png){#fig-lab-contextualhelp}


그리고 결과물의 내용이 아주 길게 나오는 경우에는 브라우저를 아래로 끌어 내리는 것도 아주 힘든 일이 된다. 그런 경우에는 아래 그림과 같이 마우스 오른쪽 기능을 사용하여 출력에 대한 스크롤을 만든다.


![결과가 긴 경우 이 스크롤 기능 사용](images/lab_long_output.png){#fig-lab-longout}



주피터랩에서는 출력물을 새로운 창으로 연 다음 작업할 수 있다. 이를테면 이 기능은 계속 참고해야할 내용이 있는 경우 도움이 많이 된다.

![출력을 새로운 창에서 열기](images/lab_output_new.png)


주피터 노트북에서 `%qtconsole` 매직 명령을 실행하면 현재 연결되어 있는 아이파이쎤 커널에 대응하는 Qt 콘솔이 열린다. 주피터랩에서는 이 기능이 대폭 향상되었다. 이 기능은 마우스 오른쪽을 클릭해서 **New Console for Notebook**을 클릭하여 시작한다. 아래 그림은 왼쪽의 코드를 모두 실행하고 나서 오른쪽에서 `%who` 매직명령을 실행한 상태이다. 왼쪽 콘솔에 있는 객체들이 오른쪽에 나타나고 있음을 알 수 있다.

![노트북에 대한 새로운 콘솔 사용하기](images/lab_new_console.png){#fig-lab-new-console}


전통적인 주피터 노트북은 단일 노트북 모드로 움직인다. 주피터랩에서는 이것은 "Single-Document Mode"(View 메뉴)라고 하는데 특수한 경우에 해당된다. 주피터랩은 기본적으로 복수의 노트북을 함께 열어서 작업할 수 있다. 노트북 파일만 함께 열 수 있는 것이 아니라 하나의 하면에 콘솔, 스크립프 파일, 터미널 등과 함께 사용할 수 있다.

주피터랩에서 오른쪽을 **주작업 영역**이라고 한다. 여기서 가장 눈에 띄는 것은 여러 파일들을 열어볼 수 있는 탭과 패널 기능이다. 아래 그림과 같이 작업 창을 자유자재로 드래그 기능을 사용하여  작업창을 구성할 수 있다.

![탭과 패널로 여러 파일들을 유연하게 배치](images/lab_tab_panel.png){#fig-lab-layouttab}

작업 창 상단에 있는 파일 이름이 있는 탭을 드래그해 보자. 드래그하다 보면 주작업 영역의 왼쪽, 오른쪽 벽, 어떤 파일의 위쪽, 아래쪽 이동하면 파란색 상자가 보인다. 원하는 모양일 때 누르고 있던 마우스 버튼을 놓는다.


## 주피터 커널들 

주피터를 소개하는 문장을 보면 "Jupyter is the language agnostic framework ..."으로 시작하는 경우를 많이 본다. 여기서 **language agnostic**이라고 하는 것은 언어에 구애받지 않고 사용할 수 있음을 말한다. 주피터는 커널(kernel)이라고 하는 시스템을 통해서 다양한 언어와 연결시킨다. 다양한 언어에 대응하는 [Jupyter kernels](https://github.com/jupyter/jupyter/wiki/Jupyter-kernels)이 개발되어 있다. 각 커널 설치 방법, 사용 방법은 커널에 관한 문서를 참고한다. 

예를 들어, R 언어에 대한 커널을 [IRkernel](https://irkernel.github.io)을 설치해 보자. [설치 설명서](https://irkernel.github.io/installation/)를 다음 단계를 따르라고 말한다.

1. R 콘솔을 실행하고, 일반적인 R 패키지 설치법과 같이 `install.packages('IRkernel')` 실행한다.
1. 그 다음 `IRkernel::installspec()` 명령을 실행한다.

이 과정을 통해서 `IRkernel`이 컴퓨터에 설치된다. 설치되는 위치는 컴퓨터의 환경에 따라 다른데, 명령행(또는 터미널)에서 `jupyter kernelspec list`라는 명령을 실행하면 알 수 있다.

그리고 주피터 노트북 또는 주피터랩을 실행하면 컴퓨터에 설치된 커널들이 나열되고, 사용할 커널을 선택하여 사용하면 된다. 

![주피터랩을 실행하고 론처에서 사용할 커널을 선택한다.](images/kernels.png){#fig-lab-kernels}

참고로 하나 알아둘 내용은 위에서 IPython 매직 명령이나 리치 아웃풋(IPython.display를 통한) 등의 기능들은 파이썬 커널은 `ipykernel`의 기능에 녹아 있는 것이여서 다른 커널을 사용하면 해당 커널이 그런 기능을 지원하지 않는 경우에는 이 기능들을 쓸 수 없다. 위에서 IRkernel인 경우 별도의 `IRdisplay`라는 패키지를 통해서 리치아웃풋 기능을 제공한다.


## VS Code에서 주피터 노트북 사용하기 

[-@sec-vscode-extension] 절에서 VS Code를 설치하는 방법을 설명했다. VS Codoe는 익스텐션을 사용하여 주피터 노트북을 완벽하게 지원한다. VS Code에서의 파이썬 사용에 관한 내용은 [Python in Visual Studio Code](https://code.visualstudio.com/docs/languages/python#_jupyter-notebooks)에 잘 설명되어 있으며 이 설명을 자세히 읽어볼 필요가 있다. 또한 콰트토를 잘 활용하기 위해서는 [콰르토 익스텐센](https://marketplace.visualstudio.com/items?itemName=quarto.quarto)도 설치하고, 사이트에서 설명법을 숙지할 것을 권한다.


## 주피터 노트북/주피터랩에서 콰르토 사용하기 

주피터 노트북/주피터랩에서 콰르토를 사용하는 방법은 [-@sec-using-jupyternb] 절에 설명되어 있다.

## 참고문헌