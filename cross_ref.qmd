# 상호 참조 {#sec-cross-ref}

어떤 문서, 특히 기술 문서에서는 어떤 표, 그림, 수식 등을 가리키는 상호 참조가 반드시 들어가게 마련이다. 콰르토는 다이내믹 문서를 만드는 도구로서 그와 같은 일들을 자동으로 해 주는 기능을 가지고 있으며, 사용자가 커스터마이징할 수 있는 다양한 장치들을 두고 있다. 자세한 내용은 [콰르토 문서](https://quarto.org/docs/authoring/cross-references.html)를 참고할 수 있다. 

## 상호 참조 타깃과 전치사

콰르토에서 상호 참조를 만들려면 다음과 같이 타깃의 (1)레이블과 (2)캡션이 있어야 한다. 이 둘이 꼭 있어야 한다.

1. 타깃의 레이블과 전치사 

    어디를 지목하기 위해서는 타깃의 레이블이 있어야 한다. 레이블은 하나의 문서 안에서 고유한 문자열이어야 하며, 타깃의 종류에 따라 사전에 특별히 마련된 전치사를 사용하여 만든다.

1. 타깃의 캡션

    캡션은 타깃을 설명하는 설명문이다.

예를 들어 다음을 보자. `elephant.png` 파일을 추가하는 마크다운 문법이다.

``` markdown
![코끼리](elephant.png){#fig-elephant}
```

이것에 대한 상호 참조가 가능한 이유는 `#fig-elephant`라는 레이블이 있고, `코끼리`라는 캡션이 있기 때문이다. 그림에 대한 레이블을 만들 때는 `#fig-`로 시작되는 접두사를 쓴다. 이렇게 하는 이유는 그림을 그림대로, 표는 표대로 타깃의 종류에 따라서 번호가 순차적으로 부여될 필요가 있기 때문이다. 이후에 타깃에 종류별로 어떤 접두사를 쓸지 설명한다. 이렇게 타깃이 만들어지면, 문서의 어디서든 이 그림을 가리킬 때 다음과 같이 작성할 수 있다.

``` markdown
[@fig-elephant]를 보면 ...
```

즉, `[]` 안에 `#`은 빼고 대신 `@`을 넣을 다음 나머지 레이블을 쓰는 것이다. 

코드 블록에 의해서 만들어지는 그림을 지칭할 때는 코드 블록 옵션을 사용하여 위 조건을 맞춘다. 그렇지만 약간 사용하는 방법의 차이가 있다. `label` 필드에서 이번에는 `#`을 쓰지는 않으면서, 여전히 `fig-`로 시작하였고, `fig-cap` 옵션으로 캡션을 만들어 주었다.

```{r}
#| echo: fenced
#| label: fig-histogram
#| fig-cap: "히스토그램"
hist(rnorm(1000))
```

이것을 가리킬 때는 다음과 같이 사용한다.

``` markdown
[@fig-histogram]을 보면...
```

[@fig-histogram]을 보면...


## 한글 문서에서의 상호 참조

콰르토에서 한글로 문서를 작성하다 보면 여러 가지 측면에서 커스터마이징이 필요하는 것을 체감할 수 있다. 

먼저 [콰르토 문서](https://quarto.org)를 보면 상호 참조를 만들 때 `@fig-elephant`와 같이 사용하라고 되어 있지만, 한글인 경우에는 `@fig-elephant를 보면`과 같이 되어 타깃 레이블을 제대로 지정하지 못한다. 그렇게 때문에 한글을 사용할 때는 팬독 span 기능을 하는 `[]`을 사용하여 `[@fig-elephant]를 보면`과 같이 작성할 수 있다. 

콰르토에서 그림이나 표에 대한 캡션이나 참조는 `Figure 1`, `Table 1`으로 표시된다. 이것을 `그림 1`, `표 1`과 같이 표시되게 하려면 YAML 헤더의 `lang` 또는 `language` 필드를 사용하여 바꿀 수 있다. `lang` 필드와 관련되는 내용은 <https://github.com/quarto-dev/quarto-cli/tree/main/src/resources/language>에서 볼 수 있다. 이 사이트에 한국어 관련한 내용이 `_language-kr.yml`로 준비되어 있다. 이 파일을 열어서 보면 어떻게 한국어로 표시되는지 살펴볼 수 있다. 이 파일에 지정한 대로 사용하려고 하면 문서의 YAML 헤더에서 `lang: kr`이라고 지정하면 된다.

만약, `_language-kr.yml`과는 다른 식으로 표시하고자 한다면 이 파일을 다운로드해서 바꾸고자 하는 내용을 찾아 단어를 바꾼다.

- `crossref-fig-title: "그림"`
- `crossref-tbl-title: "표"`

이 파일을 `mytrans.yml` 등으로 바꿔 작성중인 콰르토 문서와 같은 디렉터리에 놓은 다음 YAML 헤더에서 `language: mytrans.yml`이라고 불러서 사용한다.

한글 문서에서 그림이나 표 같은 경우에는 `그림 1, 표 3을 보면...`과 같이 쓰는 경우가 많아 위에서 설명한 `lang` 또는 `language` 필드로 이것을 조절하기 쉽다. 반면, 장, 절인 경우에는 보통 `2.3 절에서와 같이...` 숫자를 쓰고 장, 절을 표시하는 경우가 많다. 이런 경우에는 `@`앞에 마이너스 기호(`-`)를 붙이게 되면 숫자만 표시되게 하는 기능을 사용하는 것이 좋다. `[-@sec-my-chapter] 장을 보면...`과 같이 작성한다.

이런 방법들을 사용하면 한글 문서를 작성하는 데도 큰 문제가 없지만, 현재로서는 해결되지 않는 문제는 **자동조사를 부여하는 기능의 부재**이다. 콰르토로 케이오테([ko.TeX](http://wiki.ktug.org/wiki/wiki.php/ko.TeX))을 기반으로 한글 PDF 문서를 만들 때는 자동조사 기능이 들어 있어 이를 이용할 수 있다. 이 기능에 대한 사용법은 웹에서 `ko.TeX-utf v3.0 사용 설명서`이라는 문서를 검색해서 "자동조사 명령" 절을 참고한다. 아마 이 기능은 향후 [콰르토 익스텐션](https://quarto.org/docs/extensions/creating.html)을 통해서 개발되어야 할 것으로 보인다. 

## 그림에 대한 참조

그림에 대한 레이블은 팬독 마크다운에서는 `#fig-`, 코드 블록에서는 `fig-`로 시작하는 접두사를 사용해서 만든다. 그리고 캡션은 팬독 문법에서 `![캡션](URL)`으로, 코드 블록에서는 `fig-cap`이라는 필드를 사용하여 정한다. 

앞에서 설명했듯이 레이블과 캡션이 있어야 상호 참조가 만들어지는 점을 주목한다.

다음은 팬독 마크다운을 사용하는 예이다.

``` markdown
![Elephant](elephant.png){#fig-elephant}

[@fig-elephant]을 보면 ...
```

다음은 코드 블록을 사용하는 경우이다. 

```{r}
#| echo: fenced
#| label: fig-ggplot2
#| fig-cap: "ggplot2 패키지를 사용한 산점도"
library(ggplot2)
ggplot(mtcars) + geom_point(aes(wt, mpg, color = factor(cyl)))
```


-----
[@fig-ggplot2]를 보면
----


[-@sec-fenced-div] 절에서 설명했듯이 펜스가 있는 팬독 Div를 컨테이너로 사용하여 하나의 컨테이너에 복수의 그림을 배치할 수 있다. 이런 경우에 각각의 그림에 대한 상호 참조를 만들려면 우선 전체 컨테이너의 레이블을 만들고, 다음 개별 그림에 대한 레이블을 만든다. 만드는 방법은 위에서 설명한 방법과 같다. 

``` markdown
::: {#fig-penguins-bills layout-ncol=2}
![펭귄의 종류](images/penguins.png){#fig-penguin-species}

![부리 데이터](images/culmen_depth.png){#fig-penguin-culmen}

펭귄 데이터 
:::
```

이것은 다음과 같이 렌더링된다.


::: {#fig-penguins-bills layout-ncol=2}
![펭귄의 종류](images/penguins.png){#fig-penguin-species}

![부리 데이터](images/culmen_depth.png){#fig-penguin-culmen}

펭귄 데이터 
:::


그런 다음 상호 참조를 만들 때는 해당 레이블을 써준다.

``` markdown
[@fig-penguin-species]을 보면 ...
```

이것은 다음과 같이 렌더링된다.

--------

[@fig-penguin-species]을 보면 ...

---------

하나의 코드 블록이 여러 플롯을 출력하게 하는 경우에는 할 일이 많을 수 있는데 원리는 같다. 아래에서 레이아웃은 `layout-ncols`라는 필드로 정했다. 상호 참조를 위해서 전체에 대한 레이블은 `label` 옵션으로 지정했다. 전체 컨터이너에 해당하는 캡션은 `fig-cap`으로, 내부에 포함되는 각 그림의 개수에 맞추어 `fig-subcap`이라는 필드로 그 레이블을 정했다. 


```{r}
#| echo: fenced
#| label: fig-mtcars
#| fig-cap: "mtcars 데이터에 대한 그래프"
#| fig-subcap: 
#|   - "mpg 히스토그램"
#|   - "wt vs mpg"
#| layout-ncol: 2
p1 <- ggplot(mtcars) + geom_histogram(aes(mpg), bins = 10)
p1
p2 <- ggplot(mtcars) + geom_point(aes(wt, mpg))
p2
```

## 표에 대한 참조 

표에 대한 상호 참조를 만들 때도 위 그램에서 설명한 원칙이 그대로 적용된다. 단지 팬독 마크다운에서`#tbl-`, 코드 불록이 생성하는 표에서는 `tbl-`로 시작되는 접두사를 사용하는 점이 다를 분이다. 구체적인 내용은 [콰르토 문서](https://quarto.org/docs/authoring/cross-references.html#tables)를 참고한다.




Black-Scholes (@eq-black-scholes) is a mathematical model that seeks to explain the behavior of financial derivatives, most commonly options:

$$
\frac{\partial \mathrm C}{ \partial \mathrm t } + \frac{1}{2}\sigma^{2} \mathrm S^{2}
\frac{\partial^{2} \mathrm C}{\partial \mathrm C^2}
  + \mathrm r \mathrm S \frac{\partial \mathrm C}{\partial \mathrm S}\ =
  \mathrm r \mathrm C 
$$ {#eq-black-scholes}


\listoffigures