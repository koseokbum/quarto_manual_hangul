# 표

일상적인 보고서와 학술 논문 등에서 표는 차트(그래프)과 함께 문서에서 아주 중요한 시각적 요소로 가운데 하나이다. 차트가 데이터에 대한 패턴을 잘 보여주는 장점이 있는 반면, 표는 정확한 숫자 등을 넣을 수 있다는 장점이 있다. 

표는 행, 열에 따라 줄을 그어 내용을 채우면 그만인 것처럼 보이지만, 사실 좀 까다로운 주제이다. 표는 문서 포맷팅 언어에 따라 각기 다른 문법을 사용한다. 대표적으로 HTML 테이블 문법과 LaTeX 테이블 문법이 있다. 콰르토에서 표를 만들 때는 팬독 마크다운을 사용하여 문서 포맷에 따라 내부에서 마크다운 문법을 HTML 테이블이나 LaTeX 테이블 문법으로 변환시킨 후 프로세싱하여 표를 만든다. 표를 통해 [@tbl-gtcars]와 같이 데이터를 간략하게 요약해 보일 수도 있다.

```{r}
#| echo: false
#| warning: false
#| label: tbl-gtcars
#| tbl-cap: "gt::gtcars 데이터 "
library(gt)
library(gtExtras)
library(ggplot2)
gtcars %>% gt_plt_summary()
```



그래서 표를 만들 때는 무턱대고 만들고 들어가는 것이 아니고, 사전에 신중하게 디지인을 선택하고 전략적인 접근이 필요하다. 이 장에서는 독자들이 원칙을 가지고 전략적인 방법으로 표를 만들 수 있도록 다음과 같은 내용을 설명하려고 한다. 이와 같은 접근법은 [톰 목(Tom Mock)의 블로그](<https://themockup.blog/posts/2020-09-04-10-table-rules-in-r/>)와 [앤드류 지플러(Andrew Zieffler)의 블로그](<https://www.datadreaming.org/post/apa-tables-using-rmarkdown/>)에 잘 설명되어 있다.


-   표를 만드는 일반 원칙
-   표의 구성 요소
-   정적인 표: HTML 표와 LaTeX 표
-   팬독 마크다운과 비쥬얼 마크다운 에디터로 표 만들기
-   R 니터 `kable()` 함수와 `kableExtra` 패키지, `gt`와 `gtsummary`, `gtExtra` 패키지 사용
-   파이썬 판다스(`pandas`)를 사용한 표
-   인터랙티브 표(R과 파이썬)

## 표를 만드는 일반 원칙

표를 만드는 일반 원칙에 대해 알아보자. 논문에서 사용될 표를 만들 때는『APA 논문작성법』[@apa2013]이나 제출하는 저널이 권장하는 표 디자인을 적극 활용하는 것이 좋다. 

1.  표의 헤더를 구분하라.
2.  뚜꺼운 선 대신의 희미한 구분선을 사용하라.
3.  숫자는 오른쪽 정렬, 문자는 왼쪽 정렬을 사용하라.
4.  적당한 정밀도(소숫점 이하 자리)를 사용하고, 단위 표시는 중복을 피한다. 열 등에 한번만 표시한다.
5.  세로 줄을 쓰지 않는다.
6.  표의 푸터에는 일반 주, 특수 주, 확률 주의 순서대로 주석을 넣는다.
7.  표의 폰트는 본문의 폰트와 일치시킨다.
8.  표는 본문에서 참조되도록 한다.

## 표의 구성 요소

학술 논문에서 사용되는 표는 [@fig-table-elements]과 같은 요소들로 구성된다[^tables-3]. 이 용어는 APA 스타일 가이드에서 사용되는 것들이다[^tables-4].

[^tables-3]: <https://www.bibliography.com/apa/apa-table-guidelines-made-simple/>

[^tables-4]: <https://apastyle.apa.org/style-grammar-guidelines/tables-figures/tables>

![표의 구성 요소([@apa2013]에서 인용하여 일부 수정함)](images/table_elements.png){#fig-table-elements}

그림에 표시된 순서대로 보면 표 번호, 표 제목, 표의 헤더, 내용이 들어가는 표의 바디, 밑에는 표의 푸터(footer)가 있다. 왼쪽의 첫 열은 보통 스터브와 스터브 헤더가 된다. 열을 그룹화 한 것을 열 스패너(spanner)라고 하고, 행을 그룹화 한 것을 행 그룹(row group)이라고 한다.

다음 [@fig-gt_table_parts]는 나중에 설명할 `gt` 패키지에서 사용하는 표의 구성 요소이다. [@fig-table-elements]에서 사용하는 용어와 거의 유사하다는 것을 알 수 있다.

![gt 패키지에서 사용하는 표의 구성 요소](images/gt_table_parts.png){#fig-gt_table_parts}

뒤에서 우리는 각각의 구성 요소를 어떻게 추가하고 수정하여 사용자가 원하는 표를 만들 수 있도록 하는 방법들을 설명한다. 

## 타깃 문서 포맷에 따른 표 생성 문법 들여다 보기

콰르트는 팬독 마크다운은 문서를 만들고, 이것을 프로세싱하여 원하는 포맷의 문서를 얻는다. 표도 마찬가지이다. 먼저 HTML 테이블(table) 만드는 문법은 다음과 같다.

```{verbatim}
<table>
 <thead>
  <tr>
   <th style="text-align:left;"> species </th>
   <th style="text-align:right;"> Biscoe </th>
   <th style="text-align:right;"> Dream </th>
   <th style="text-align:right;"> Torgersen </th>
   <th style="text-align:right;"> Total </th>
  </tr>
 </thead>
<tbody>
  <tr>
   <td style="text-align:left;"> Adelie </td>
   <td style="text-align:right;"> 44 </td>
   <td style="text-align:right;"> 56 </td>
   <td style="text-align:right;"> 52 </td>
   <td style="text-align:right;"> 152 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Chinstrap </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> 68 </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> 68 </td>
  </tr>
  <tr>
   <td style="text-align:left;"> Gentoo </td>
   <td style="text-align:right;"> 124 </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> NA </td>
   <td style="text-align:right;"> 124 </td>
  </tr>
</tbody>
</table>
```

이것은 다음과 같이 렌더링된다.

| species   | Biscoe | Dream | Torgersen | Total |
|:----------|-------:|------:|----------:|------:|
| Adelie    |     44 |    56 |        52 |   152 |
| Chinstrap |     NA |    68 |        NA |    68 |
| Gentoo    |    124 |    NA |        NA |   124 |

간단히 살펴보면 전체는 `<table>` 태그 안에 포함되고, 그 안에 `<thead>`와 `<tbody>`가 있고, `<thead>`와 `<tbody` 안에서는 한 줄은 `<tr>`으로 묶는다. 그 안에 헤더 역할을 하는 셀은 `<th>`, 일반 셀은 `<td>`로 만든다. 보통 표에서 테두리 같은 것들은 CSS를 사용하여 지정한다.

LaTeX에서는 다음과 같은 문법을 사용한다. `tabular` 환경 안에서 내용이 놓인다. `{l c r}`은 열 정렬 위치를 말한다. 셀은 `&`로 나누고, 행은 `\\`으로 구분한다.

```{verbatim}
\begin{tabular}{ l c r }
  1 & 2 & 3 \\
  4 & 5 & 6 \\
  7 & 8 & 9 \\
\end{tabular}
```

따라서 팬독 마크다운으로 매뉴얼로 작성된 표는 프로세싱 중간에 타깃 포맷에 따라서 표가 이와 같은 문법으로 변환된 이후 문서가 만들어진다.

여러 패키지를 사용하여 코드로 만들어지는 표는 역시도 이런 과정을 통해서 표가 만들어지는데, 패키지 안에서 문서 포맷에 따라 거기에 맞게 출력되도록 기능이 추가된 경우가 대부분이어서, 사용자들이 개입하지 않아도 표가 만들어진다. 

## 팬독 마크다운 테이블 

팬독 마크다운은 파이프 테이블(pipe table)과 그리드 테이블(grid table)이라 불리는 2가지 방법으로 테이블을 만드는 문법을 제공한다.

설명을 위해서 다음과 같은 데이터를 가지고 표를 만들어 보려고 한다. `palmerpenguins` 패키지의 `penguins` 데이터프레임을 사용하여 `tidyverse` 패키지의 포함된 `dplyr`, `tidyr` 패키지를 사용하여 데이터를 정리하고 `knitr::kable()` 함수로 테이블을 만들었다.

```{r}
#| message: false
library(palmerpenguins)
library(tidyverse)
p_islands <- penguins %>% 
  count(species, island) %>%
  pivot_wider(names_from = island, values_from = n) %>%
  rowwise() %>%
  mutate(Total = sum(Biscoe, Dream, Torgersen, na.rm=TRUE))
knitr::kable(p_islands)
```

이 표를 팬독 마크다운으로 만드다면 다음과 같이 할 수 있다.

```{verbatim}
| Species   | Biscoe | Dream | Torgersen | 총 개체수 |
|-----------|-------:|------:|----------:|----------:|
| Adelie    |     44 |    56 |        52 |       152 |
| Chinstrap |        |    68 |           |        68 |
| Gentoo    |    124 |       |           |       124 |

: 종에 따른 팔머 펭귄 거주 지역 {#tbl-penguins tbl-colwidths="[35, 10, 10, 10, 35]" }
```

이 표는 다음과 같이 렌더링된다.

| Species   | Biscoe | Dream | Torgersen | 총 개체수 |
|-----------|-------:|------:|----------:|----------:|
| Adelie    |     44 |    56 |        52 |       152 |
| Chinstrap |        |    68 |           |        68 |
| Gentoo    |    124 |       |           |       124 |

: 종에 따른 팔머 펭귄 거주 지역 {#tbl-penguins tbl-colwidths="\[35, 10, 10, 10, 35\]"}

팬독 마크다운 파이프 테이블 문법에서 열 구분은 파이프 문자 `|`를 사용된다. `---`으로 헤더 아래 부분을 구분한다. 셀 정렬 위치는 `:`의 위치로 표시한다. 표의 본체를 만들고 나서 마지막에 `:` 입력하고 표에 들어갈 캡션을 입력한다. 캡션 다음에 표의 속성을 지정한다. 표의 아이디는 `#tbl-...`로 시작한다. 이 표를 본문에서 지칭할 때는 `[@tbl-...]` 같은 문법을 사용한다. `tbl-colwidths`로 너비를 지정할 수 있다. 전체를 100으로 보고, 열의 폭은 `"[비율1, 비율2, 비율3]"` 같은 방식으로 지정한다.

::: {.callout-tip}
## 콰르토에서 상호 참조를 위한 접두사 

[@sec-code-plot-control]에서도 설명했지만 콰르토는 문서의 요소에 대해 다음과 같은 접두사를 사용하여 속성을 지정한다.

- 그림: `#fig-`로 시작
- 표: `#tbl-`로 시작 
- 장절: `#sec-`으로 시작 
- 코드 리스트: `#lst-`로 시작 
- 수식: `#thm-`(theorum), `#lem-`(lemma) 등
:::

접두사를 `tbl-`로 시작하는 것 이외에 [@sec-figurecontent]에서 설명한 그림 삽입 방법과 표를 삽입하는 방법은 거의 동일하다. 다음을 보자. 캡션의 위치는 YAML 헤더의 `tbl-cap-location:` 필드에서 `top`, `bottom`, `margin` 값을 사용하여 지정할 수 있다. 콰르토는 복수의 표를 가진 블록을 지정할 수 있다. 다음은 콰르토 설명서에서 사용된 예다. 팬독 `div`를 사용하고, 여기에 `layout-ncol=2`라는 속성을 지정하여 이 블록이 2 개의 열을 가지도록 지정한다. 그런 다음 팬독 마크다운 문법을 사용하여 표와 개별 표에 대한 캡션을 지정한다. 그리고 맨 마지막 행에서는 이 두 표 모두에 적용되는 캡션을 지정한다. 전체 패널에 대한 아이디를 `#tbl-panel`로 지정하고, 내부에 있는 개별 표에도 `#tbl-first`, `#tbl-second`와 같이 아이디를 지정했다. 그리고 이 표를 지칭하기 위해서 본문에서 `[@tbl-panel]`, `[@tbl-scond]` 같은 문법을 적용했다. 영문인 경우에 `[]`를 사용하지 않아도 되지만, 한글 문서에서는 `[]`를 사용해야 자연스럽게 띄어쓰기가 가능하다.

```{verbatim}
::: {#tbl-panel layout-ncol=2}
| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: First Table {#tbl-first}

| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: Second Table {#tbl-second}

Main Caption
:::

See @tbl-panel for details, especially @tbl-second.
```

이것은 다음과 같이 렌더링된다.

-----------

::: {#tbl-panel layout-ncol="2"}
| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: First Table {#tbl-first}

| Col1 | Col2 | Col3 |
|------|------|------|
| A    | B    | C    |
| E    | F    | G    |
| A    | G    | G    |

: Second Table {#tbl-second}

Main Caption
:::

See @tbl-panel for details, especially @tbl-second.

-------------

이런 파이프 테이블의 셀은 문단과 같은 블록을 포함시키지 못하고, 여러 열에 걸친 병합이 불가능하다. 그런데 무엇보다 이런 문법을 텍스트 에디터에 직접 입력하기는 쉽지 않을 것이다. 또 한글과 영문을 같이 사용하는 경우에는 텍스트 에디터의 글자 폭이 다르기 때문에 시각적으로 열의 위치를 맞추기가 쉽지 않다. 이런 경우에는 RStudio에 있는 비쥬얼 마크다운 에디터 기능을 사용하면, 마치 엑셀에서 내용을 입력하는 것과 같은 인터페이스를 제공하기 때문에 매우 편리하다.

![RStudio 비쥬얼 마크다운 에디터에서 표 만들기](images/vme_table.png){#fig-vme_table}

그런데 한글이 들어간 문서를 작성하는 경우, 텍스트 에디터에서 한글과 영문의 글자 간격 표시 문제로 표를 팬독 마크다운으로 작업하는 것은 쉽지 않다. 이런 경우에는 나중에 설명하는 코드로 만들어 사용하는 것이 좋다. 

## 니터 엔진을 사용하는 경우 데이터 프레임을 표로 출력 

콰르트의 디폴트 엔진인 니터(`knitr`)을 사용하는 경우, R 데이터 프레임을 `df-print`라는 옵션으로 조절가능한다. 

``` markdown
---
fortmat:
  html:
    df-print: paged
---
```

- `default`: 데이터 프레임에 대한 S3 메서드 사용(즉, R 콘솔에서 출력되는 것처럼 출력)
- `kable`: `knitr::kable()`  함수를 사용하여 출력
- `tibble`: `tibble` 패키지를 사용하여 플레인 텍스트로 출력 
- `paged`: 긴 행, 열을 가진 데이터인 경우 페이지를 넘겨가면서 볼 수 있게 출력(타깃이 HTML인 경우)

YAML 헤더에 다음과 같이 설정되어 있다고 생각해 보자.

``` markdown
---
fortmat:
  html:
    df-print: paged
---
```

이렇게 하면 다음과 같이 출력된다. 코드 블록 옵션과 그 결과물을 잘 살펴보면 이렇게 출력되는 표 역시 레이블과 캡션이 들어간다는 것을 알 수 있다.

```{r}
#| echo: fenced
#| label: tbl-mtcars
#| tbl-cap: "mtcars 데이터셋"
mtcars
```

## R 코드로 표 만들기

표 관련 R 패키지는 꽤 많이 있다. 이전에 R 마크다운 시스템/니터나 콰르토를 사용해 보지 않은 독자들을 위해서 코드를 사용하여 표를 만드는 방법을 이해하고 넘어가는 것이 좋을 것 같다. 그 원리를 알면 패키지를 효율적으로 사용할 수 있을 것이다. [@fig-table-packages]에 그 과정이 간략하게 정리되어 있다.

![표 제작을 위한 R 패키지들의 작동 원리](images/table_packages.png){#fig-table-packages}

표가 행과 열로 구성되는 만큼 표를 만드는 데 사용되는 데이터도 보통은 R 데이터프레임으로 준비되고, 표를 만드는 함수나 패키지들은 대부분 이 데이터프레임을 가지고 시작한다.

어떤 패키지들은 이 데이터프레임을 바로 표로 렌더링하는 함수를 제공한다. 그림에서는 보면 위쪽에 있는 화살표 방향을 따라간다. 이와 같은 기능을 사용하는 경우에는 이미 다른 코드를 통해서 이미 정리된 데이터프레임을 가지고 작업을 하게 된다. 대표적인 경우가 `knitr` 패키지에 포함되어 있는 `kable()` 함수이다. 이 함수는 팬독 마크다운에서 파이프 테이블 문법으로 결과를 출력할 수 있고, 팬독은 그 결과를 가지고 문서를 각각의 포맷에 맞게 변환할 수 있다. `knitr::kable()` 이외에도 `kableExtra` 패키지, 뒤에서 자세히 설명할 `gt` 패키지도 이런 기능에 충실한 패키지이다.

```{r}
#| echo: fenced
#| label: tbl-penguins2
#| tbl-cap: "Palmer Penguins"
knitr::kable(p_islands)
```

두 번째 부류의 패키지들은 데이터 소스가 되는 데이터프레임을 가지고 데이터에 대한 통계적인 써머리 또는 데이터에 통계적 분석(모델)을 내부에서 하고 그것을 표로 출력할 수 있게 한다. 대표적인 경우가 `gtsummary` 패키지이다. 이 패키지에 들어 있는 `tbl_summary()` 함수는 의학 논문에서 흔히 관찰되는 1번 표(table 1)를 간단히 만드는 기능을 제공한다.

```{r}
#| echo: fenced
#| label: tbl-gtummary-penguins
#| tbl-cap: "Palmer Penguins summary"
library(gtsummary)
tbl_summary(penguins)
```

다음 [@fig-huxtable]은 표를 만드는 데 사용되는 R 패키지들 비교해 놓은 표로, 이 표는 [`huxtable`](<https://hughjonesd.github.io/huxtable/design-principles.html>) 패키지의 비니에트에 포함되어 있다. 각 패키지가 출력 포맷에 따라 어떤 기능들을 지원하는지 알려준다.


![표 생성하는 데 사용되는 R 패키지들](images/huxtable.png){#fig-huxtable}


### `knitr::kable()` 함수

콰르토는 니터(knitr) 엔진을 디폴트로 사용하고, 이 엔진의 기능을 제공하는 R 패키지가 `knitr`이다. 이 패키지에는 `kable()`이라고 하는 비교적 단순하면서도 강력한 표 만들기 함수가 있다.

나중 설명하는 `gt` 패키지가 표에 관한 모든 세부 사항을 조절할 수 있는 저수준의 기능들을 제공한다면, `kable()`과 `kableExtra`는 표에 대한 고수준 함수를 제공한다. R 언어에 익숙하지 않은 독자라면 왜 함수 이름이 `table()`이라고 하지 않고 `kable()`이라고 했을 지 궁금할 수도 있겠다. `table()` 함수는 R 언어의 기본 내장 함수의 하나로 카테고리형 변수의 카운팅과 분석에서 중요한 역할을 하는 함수로, 이 함수 이름과 충돌하지 않게 하기 위함이다.

앞에서 만든 `p_islands`라는 데이터프레임이 있을 때, `knitr` 패키지의 `kable()` 함수는 이를 파이프 테이블로 출력한다. 포맷은 `format`이라는 옵션을 지정할 수 있다.

```{r}
p_islands
```

이 데이터프레임을 `kable()` 함수로 넘겨서 표를 만든다.

```{r}
library(knitr)
kable(p_islands)
```

`kable()` 함수는 결측값을 `NA` 그대로 표시한다. 만약 이것을 빈 칸이나 다른 값으로 표시하고 싶으면 `options()` 함수에서 `knitr.kable.NA` 값을 원하는 값으로 지정한다.

```{r}
options(knitr.kable.NA = '')
kable(p_islands)
```

`kable()` 함수는 숫자는 디폴트로 오른쪽으로 정렬하고, 숫자가 아닌 것은 왼쪽으로 정렬한다. 만약 임의로 정렬하고자 한다면 `align`이라는 옵션을 사용하여 그 값으로 `l`(왼쪽), `r`(오른쪽), `c`(중간) 등으로 지정할 수 있다.

R 데이터프레임 열 이름은 `col.names`라는 옵션을 사용하여 재구성할 수 있고, `digits` 옵션으로 소숫점 이하 자리수를 지정할 수 있다. `format.args` 옵션을 사용하여 포맷을 지정할 수 있다. 다음 예를 보자.

```{r}
df <- penguins %>%
        group_by(species) %>%
        summarise(N=n(), m_wt = mean(body_mass_g, na.rm=TRUE)) 
as.data.frame(df)

kable(df, digits = 1, 
          col.names = c("Species", "N", "Body Mass(gram)"),
          format.args = list(big.mark=",")) # 1000 자리마다 코마 넣기
```

콰르토를 사용하지 않는 경우에는 `caption`이라는 옵션을 사용하여 표의 캡션을 지정할 수 있지만, 콰르토를 사용하는 경우라면 `fig-cap:` 이라는 코드 블록 옵션으로 지정하여 사용하는 것이 좋다.

`kable()` 함수는 `format` 옵션으로 팬독 마크다운 파이프 테이블(디폴트), HTML, LaTeX, rst(reStructuredText) 등으로 렌더링 가능하다. 하지만, 콰르토와 R 마크다운은 팬독 마크다운을 사용하기 때문에 `kable()` 함수를 사용하면, 팬독 프로세서를 통해서 원하는 문서 포맷(HTML, PDF, MS 워드 등)으로 렌더링 가능하다. 그래서 문서 포맷에 따라 자동으로 타깃 포맷으로 변화시켜주기 때문에 사용자는 굳이 `format` 옵션으로 포맷을 지정하지 않아도 된다.

### `kableExtra` 패키지

`kableExtra` 패키지는 `knitr::kable()`이 가진 단순함의 특징을 그대로 살리면서, 거기에 추가하여 논문에 포함시킬 수 있는 정도의 표를 만들기 위한 여러 가지 기능들을 제공한다.

`kableExtra` 패키지는 `magrittr` 패키지에서 제공하는 파이프 연산자(`%>%`)를 사용하여 필요한 요소들을 추가할 수 있도록 설계되어 있고, `knitr::kable()` 함수와 거의 동일한 기능을 제공하는 `kbl()` 함수를 통해 표를 구성한 다음, 거기에 필요한 요소들을 추가할 수 있다. `kbl()` 함수는 표의 기본 뼈대를 만드는 역할을 한다.

```{r}
#| echo: fenced
#| message: false
library(kableExtra)
df <- penguins %>%
        group_by(species) %>%
        summarise(N=n(), m_wt = mean(body_mass_g, na.rm=TRUE)) 
df %>% kbl()
```

`kbl()` 함수의 옵션들은 `kable()` 함수의 옵션들을 포함하고, 여기에 HTML, LaTeX 렌더링에 필요한 내용들을 지정할 수 있는 옵션들을 가지고 있다. 다음과 같이 `col.names` 옵션으로 열의 이름을 지정할 수 있고, `digits`으로 소수점 자리수를 정할 수 있다.

```{r}
df %>% kbl(col.names = c("Species", "N", "Mean Body Weight(gram)"), digits = 1) 
```

표에서 스타일을 지정하는 대표 함수는 `kable_styling()`이다. 다음과 같이 다른 옵션 없이 이 함수를 적용하면 표에 가로 구분선들을 만들어 준다는 것을 알 수 있다.

```{r}
df %>% 
  kbl(col.names = c("Species", "N", "Mean Body Weight(gram)"), 
      digits = 1)  %>% 
  kable_styling()
```

`kable_styling()`을 대신, 미리 정해진 스타일로 표를 만들 수도 있는데, 이것을 뒷받침하는 함수는 `kable_paper()`, `kable_classic()`, `kable_classic_2()`, `kable_minimal()`, `kable_material()`, `kable_material_dark()`가 있다. 예를 들어 `kable_classic()` 함수는 흔히 보는 스타일의 표로 렌더링한다.

```{r}
df %>% 
  kbl(col.names = c("Species", "N", "Mean Body Weight(gram)"), 
      digits = 1, booktabs = TRUE)  %>% 
  kable_classic()
```

`kableExtra` 패키지는 행 단위 또는 열 단위로 스타일을 지정할 수 있다. 행 단위로 스타일은 `row_spec()` 함수로, 열 단위 스타일은 `column_spec()` 함수를 사용한다. 기본 사용법은 스타일을 적용할 행(들), 열(들)을 선택하고, 스타일과 관련된 옵션을 지정한다. 표의 헤더는 `row_spec()` 함수에서 `row=0` 값을 사용하여 지정한다. 이 함수들 안에서 문자의 폰트, 정렬, 색, 배경색, 경계선, 너비 등을 지정할 수 있다.

다음은 `row_spec()`과 `row=0`을 사용하여 헤더의 스타일을 굵은 글꼴로 바꾸고, 배경색을 주었으며, `column_spec`을 사용하여 세 번째 열의 셀 콘텐츠에 언더라인을 추가해 본 예이다.

```{r}
df %>% 
  kbl(col.names = c("Species", "N", "Mean Body Weight(gram)"), 
      digits = 1, booktabs = TRUE)  %>% 
  kable_styling() %>% 
  row_spec(row=0, bold=TRUE, background = "#E8E2D8") %>% 
  column_spec(column=3, underline = TRUE)
```

다음은 열 그룹핑이다. 다음과 같은 `df`라는 데이터프레임이 준비되었다고 가정해 보자.

```{r}
library(palmerpenguins)
df1 <- penguins %>% 
    group_by(species, sex) %>%  
    count() %>% 
    pivot_wider(names_from = sex, values_from = n)
df2 <- penguins %>% 
    group_by(species, island) %>%  
    count() %>% 
    pivot_wider(names_from = island, values_from = n)

df <- bind_cols(df1, df2) %>% select(-`species...5`)
df
```

이것은 설명을 위해서 억지로 만든 데이터프레임이다. 2에서 4열까지는 성별(Female, Male, Unknown)이고, 5에서 7열까지는 섬 이름이다. 이것들을 열들로 묶어서 표를 만들고자 한다. 이 경우 `add_header_above()` 함수를 사용한다. 그 안에 다음 예와 같이 그룹 이름과 열의 개수를 이름이 있는 벡터로 지정한다. 1열의 경우에는 따로 그룹핑을 하지 않을 것이어서 그냥 `""`로 지정한다.

```{r}
colnames <- c("Species", "Female", "Male", "Unknown", "Biscoe", "Dream", "Torgersen")
df %>% kbl(col.names = colnames) %>% 
  kable_classic() %>% 
  add_header_above(c("", "Sex"=3, "Island"=3))
```

다음은 행들을 묶어 그룹으로 시정하는 경우이다. 다음 데이터프레임은 12개의 행으로 구성되어 있다. 

```{r}
df <- penguins[1:12, 1:4]
df
```

예를 들어 행에서 4행까지를 "A Group", 5행에서 8행까지를 "B Group", 9행부터 12행까지를 "C Group"에 속하는 데이터라고 할 때, 이것을 표로 표현하려면 `pack_rows()` 함수를 사용하고, 옵션으로 그룹 이름으로 사용할 문자열과 해당 그룹에 속하게될 행들의 번호를 시작, 끝 형태로 지정한다.

```{r}
df %>% kbl() %>% 
  kable_classic() %>% 
  pack_rows("A Group", 1, 4) %>% 
  pack_rows("B Group", 5, 8) %>% 
  pack_rows("C Group", 9, 12) 
```

R `dplyr` 패키지로 그룹핑 등의 조작을 했을 때, 데이터들이 계층적으로 정리될 때가 있다. 이를테면 다음과 같은 코드이다.

```{r}
pgi <- penguins %>% 
  group_by(species, island) %>% 
  summarise(N=n(), M_W = mean(body_mass_g, na.rm=TRUE))
pgi
```

위와 같은 데이터가 있을 때, 엑셀을 사용하는 경우 중복되는 것들을 하나로 병합하여 표를 만들고 싶을 것이다. 이와 비슷한 기능을 하는 함수가 `collapse_rows()` 함수이다. 이 함수에 병합이 대상이 되는 열을 알려준다. 그리고 하나로 병합시킬 값의 위치(열)를 지정해 주면 된다.

```{r}
colnames <- c("Species", "Island", "N", "Mean Body Weights(gram)")
pgi %>% kbl(digits = 1, col.names = colnames) %>% 
  kable_classic() %>% 
  collapse_rows(1, valign = "top")
```

`footnote()` 함수는 테이블 푸터(footer)를 추가한다. [@fig-table-elements]에서 보는 바와 같이 표의 각주에도 그 목적에 따라 각주의 종류가 있는데, `kableExtra`는 `general`, `number`, `alphabet`, `symbol`이라는 인자로써 그 종류를 표현한다. `general`은 표 전체에 걸친 일반적인 내용에 관한 각주이고, 나머지는 타깃을 지정할 때 사용하는 문자 또는 기호를 사용하는 것과 관련이 있다.

다음은 일반적인 주석을 다는 `general`을 사용한 예시이다. `general` 옵션의 주석의 내용을 기입한다.

```{r}
colnames <- c("Species", "Island", "N", "Mean Body Weights(gram)")
pgi %>% kbl(digits = 1, col.names = colnames) %>% 
  kable_classic() %>% 
  collapse_rows(1, valign = "top") %>% 
  footnote(general = "팔머 연구소에서 관찰한 팔머 펭귄의 종별, 서식지에 따른 개체수와 평균 체중을 기록한 데이터이다.")
```

일반 주 앞에 `Note:`라고 되어 있는 주의 제목은 `general_title`이라는 옵션을 조절할 수 있다. 디폴튼 값은 `Note:`로 되어있다. 다음은 이 값을 바꾼 예이다.

```{r}
colnames <- c("Species", "Island", "N", "Mean Body Weights(gram)")
pgi %>% kbl(digits = 1, col.names = colnames) %>% 
  kable_classic() %>% 
  collapse_rows(1, valign = "top") %>% 
  footnote(general = "팔머 연구소에서 관찰한 팔머 펭귄의 종별, 서식지에 따른 개체수와 평균 체중을 기록한 데이터이다.",
           general_title="주: ")
```

숫자를 사용한 주석을 사용하려면 `number`라는 옵션을 사용하고, 여기에 숫자로 제시할 것들을 문자열 벡터로 지정한다.

```{r}
colnames <- c("Species", "Island", "N", "Mean Body Weights(gram)")
pgi %>% kbl(digits = 1, col.names = colnames) %>% 
  kable_classic() %>% 
  collapse_rows(1, valign = "top") %>% 
  footnote(general = "팔머 연구소에서 관찰한 팔머 펭귄의 종별, 서식지에 따른 개체수와 평균 체중을 기록한 데이터이다.",
          general_title="주: ",
          number = c("아델리 펭귄", "턱끈 펭귄","황제 펭귄"),
          number_title = "펭귄 이름(한글): ")
```

주석들은 기본적으로 한 줄에 하나의 항목으로 나열된다. 이것을 하나의 덩어리로 만들려면 `footnote_as_chunk`를 참 값으로 지정한다. 그리고 `title_format` 인자로 제목의 포맷을 지정할 수 있다. 다음은 그 예이다.

```{r}
colnames <- c("Species", "Island", "N", "Mean Body Weights(gram)")
pgi %>% kbl(digits = 1, col.names = colnames) %>% 
  kable_classic() %>% 
  collapse_rows(1, valign = "top") %>% 
  footnote(general = "팔머 연구소에서 관찰한 팔머 펭귄의 종별, 서식지에 따른 개체수와 평균 체중을 기록한 데이터이다.",
          number = c("아델리 펭귄,", "턱끈 펭귄,","황제 펭귄,"),
          general_title = "주: ",
          number_title = "펭귄의 종류: ",
          footnote_as_chunk = TRUE, 
          title_format = c("underline")) 
```

주석에 대한 마크를 표의 열 또는 행, 어떤 경우에는 데이터에 포함시키려면 트릭이 필요하다. `kbleExtra` 패키지는 이 작업을 자동으로 처리하는 기능을 제공하지 않는다. 데이터를 `kbl()` 함수로 넘기기 전에 데이터프레임을 조작해야 한다. 숫자, 기호, 문자 등을 추가하는 것이기 때문에 해당 열을 문자열로 바꾸어 주어야 하고, 문자열로 바뀐 것에다 이런 숫자, 기호, 문자를 추가할 수 있도록 `footnote_marker_number`, `footnote_marker_symbol`, `footnote_marker_alphabet` 함수를 제공한다. 그리고 문서 포맷을 지정해 준다. 이렇게 포맷 정보들을 가지고 HTML이나 LaTeX의 위첨자 등을 만들게 된다. 그리고 그것 포맷이 들어간 문자열을 이스케이핑하지 않도록 `kbl()` 함수 안에서 `escape=FALSE` 옵션을 지정한다.

```{r}
pgi$species <- as.character(pgi$species)
pgi$species[1:3] <- paste0(pgi$species[1:3], 
                      footnote_marker_number(1, format = 'html'))
pgi$species[4] <- paste0(pgi$species[4], 
                      footnote_marker_number(2, format = 'html'))
pgi$species[5] <- paste0(pgi$species[5], 
                      footnote_marker_number(3, format = 'html')) 
colnames <- c("Species", "Island", "N", "Mean Body Weights(gram)")
pgi %>% kbl(digits = 1, col.names = colnames, escape = FALSE) %>% 
  kable_classic() %>% 
  collapse_rows(1, valign = "top") %>% 
  footnote(general = "팔머 연구소에서 관찰한 팔머 펭귄의 종별, 서식지에 따른 개체수와 평균 체중을 기록한 데이터이다.",
          number = c("아델리 펭귄,", "턱끈 펭귄,","황제 펭귄,"),
          general_title = "주: ",
          number_title = "한글 이름: ",
          footnote_as_chunk = TRUE, 
          title_format = c("underline")) 
```

같은 방법으로 젠투 펭귄의 평균 체중에 주석을 달아보는 예다. 데이터를 문자열로 변화하고 해당 위치 셀 데이터에 마커를 추가하였다. 그리고 열이 문자열로 바뀌면서 정렬이 왼쪽으로 바뀌어서 이것을 다시 오른쪽으로 정렬하기 위해서 `kbl()` 함수에서 `align`을 옵션을 통해서 지정했다.

```{r}
pgi$M_W <- format(pgi$M_W, digits = 1)
pgi$M_W <- as.character(pgi$M_W)
pgi$M_W[5] <- paste0(pgi$M_W[5], 
                     footnote_marker_symbol(1, format = 'html'))
colnames <- c("Species", "Island", "N", "Mean Body Weights(gram)")
pgi %>% kbl(col.names = colnames, escape = FALSE, align = c("l", "l", "r", "r")) %>% 
  kable_classic() %>% 
  collapse_rows(1, valign = "top") %>% 
  footnote(general = "팔머 연구소에서 관찰한 팔머 펭귄의 종별, 서식지에 따른 개체수와 평균 체중을 기록한 데이터이다.",
          number = c("아델리 펭귄,", "턱끈 펭귄,","황제 펭귄,"),
          general_title = "주: ",
          number_title = "한글 이름: ",
          footnote_as_chunk = TRUE, 
          title_format = c("underline"),
          symbol = "가장 큰 펭귄 종이다.") 
```

이상 `kableExtra` 패키지의 기본 사용법을 설명했다. 이 정도 지식을 가지고도 웬만한 표를 만들 수 있을 것이라고 생각한다. 더 자세한 내용은 [패키지 비니에트](<https://haozhu233.github.io/kableExtra/>) 등을 참고한다.


### gt 패키지(grammer of tables)

`gt` 패키지는 표에 관한 문법(`gt: grammer of tables`)이라는 개념을 바탕에 두고 있다. R `tidyverse` 패키지와 함께 사용할 수 있게 설계되어 있다. `gt` 패키지는 HTML 문서, LaTeX을 사용한 PDF 문서, RTF(Rich Text Format) 포맷으로 렌더링할 수 있다. RTF 문서는 MS 워드에서 쉽게 열 수 있기 때문에 워드 포맷의 문서를 만드는 경우에도 사용하는 데 무리가 없다.

`gt` 패키지를 사용하면 표의 세부적인 부분까지 사용자가 조절할 수 있다. `tidyverse`을 사용한 R 데이터 조작 프로세싱의 방법과 개념들을 함께 사용할 수 있기 때문에, 데이터에서 표까지 모든 것들을 다이내믹하게 연결시킬 수 있다. 따라서 이 패키지는 표와 관련된 사용자 정의 함수를 만들어 사용할 때도 편리하고, 특수한 목적의 표에 관련된 패키지를 제작하는 데도 자주 사용될 수 있다. 데이터 써머리를 기능을 제공하는 `gtsummary` 패키지가 대표적인 예로 볼 수 있다. 표이 문법이라는 사용하기 때문에, 우리가 일반 언어의 문법을 하나하나 배우고 나서 문장을 해석하고 쓸 수 있게 되듯이, 이 패키지 역시 그런 문법을 하나씩 익히고 나서, 그 지식을 바탕으로 자신만의 표 제작 로직을 구축할 수 있다.

- 참고자료: [`Creating beautiful tables in R with {gt}`](https://gt.albert-rapp.de)

#### 표의 구성 요소 추가

먼저 패키지를 로딩한다. 독자의 이해를 돕기 위해서 단계별로 차근차근 설명한다.

```{r}
#| echo: fenced
library(tidyverse)
library(gt)
```

R에 내장된 `mtcars` 데이터셋을 사용하려고 한다.

```{r}
mtcars[1:5, ]
```

표의 재료가 되는 데이터를 데이터프레임으로 만든 다음 `gt()` 함수에 넘기면 이 함수가 `gt Table`이라는 표 객체를 생성한다. 다른 `tidyverse` 패키지들과 같이 파이프 연산자를 사용할 수 있다.

```{r}
mtcars[1:5, ] %>% gt()
```

`gt()` 함수는 디퐅트로 데이터프레임의 행 이름을 무시하고 표를 출력한다. `mtcars`는 원래 행 이름을 가지고 있어서 이것을 표의 스터브(stub)로 사용하려면 `gt()` 함수에서 `rownames_to_stub=TRUE` 옵션을 지정한다.

```{r}
mtcars[1:5, ] %>% gt(rownames_to_stub = TRUE)
```

이제 표의 헤더를 추가한다. 표에 뭔가를 추가하는 함수는 `tab_***()`와 같은 이름을 가진다. `tab_header()`는 헤더를 추가하고 `title`과 `subtitle`을 지정할 수 있다.

```{r}
mtcars[1:5, ] %>% gt(rownames_to_stub = TRUE) %>% 
  tab_header(
    title = "Motor Trend Car Road Tests",
    subtitle = "Data from the 1974 Motor Trend US magazine"
  )
```

테이블 각주는 `tab_footnote()` 함수와 `tab_source_note()` 함수를 사용하여 추가할 수 있다. `tab_footenote()`는 데이터와 연관된 각주를 넣은 데 사용되고, `tab_source_note()` 함수는 데이터 소스를 소개하는 데 주로 사용된다.

```{r}
mtcars[1:5, ] %>% gt(rownames_to_stub = TRUE) %>% 
  tab_header(
    title = "Motor Trend Car Road Tests",
    subtitle = "Data from the 1974 Motor Trend US magazine"
  ) %>%  
  tab_footnote("miles per gallon", locations = cells_column_labels(
    columns = mpg
  )) %>% 
  tab_source_note("Henderson and Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391–411.")
```

#### 표의 특정 부분을 선택하는 방법 

앞 절에서 `tab_footenote()` 함수를 사용하여 각주를 추가할 수 있다고 하였다. 표에서 각주가 표 전체에 대한 것이라면 그냥 각주 내용만 써줘도 무방하지만, 표 안의 특정 셀에 대한 각주일 경우 그 셀을 지목할 수 있어야 하는데, `gt` 패키지에는 그런 기능들이 잘 마련되어 있다. 이런 경우는 각주를 주는 경우, 특정 부분의 스타일을 지정하는 경우 등이다. 그래서 각주를 추가하는 `tab_footnote()`, `tab_style()` 같은 함수의 `location` 인자에서 위치 지정함수를 쓰게 된다.

위치는 기본적으로 행과 열을 가지고 지정하는데, 행과 열이 동시에 지정되는 경우에는 행과 열이 만나는 지점들이 그 위치가 된다. 이렇게 위치를 지정할 때 도움을 주는 함수들이 준비되어 있다. 가상의 표를 위에서 아래로 머리 속에서 그려보면 다음 [@tbl-locations]와 같이 정리할 수 있다. 데이터 써머리에 대한 것은 나중에 추가할 예정이다.

| 위치                  | 함수                      |
|-----------------------|---------------------------|
| 표의 제목과 부제목    | `cells_title()`           |
| 스터브 헤드           | `cells_stubhead()`        |
| 표 스터브             | `cells_stub()`            |
| 열 스패너             | `cells_column_spanners()` |
| 열 레이블             | `cells_column_labels()`   |
| 행 그룹 레이블        | `cells_row_groups()`      |
| 표를 구성하는 셀들    | `cells_body()`            |
| 각주                  | `cells_footnotes()`       |
| 데이터 소스에 대한 주 | `cells_source_notes()`    |

: locatons 도움 함수 {#tbl-locations }

다음은 이들 함수의 사용 예이다. 뒤에서 설명하겠지만 `tab_style()` 함수는 스타일을 지정한다. 

- `mpg > 22`인 행의 데이터 색을 빨간 색으로 지정하기 위해서 `cells_body()`를 사용했고, 
- 각주를 줄 때 각주의 타깃이 되는 위치를 `cells_column_labels()`로 지정했으며, 
- 표의 바디에 있는 셀을 지목해서 각주를 넣기 위해서 `cells_body()` 함수를 사용했다. 또한 함수 안에서 행 선택하기 위해서 `mpg == max(mpg)`과 같이 불리언 표현식을 사용한 점도 주목해 보자.
- 소스 주에 폰트 색과 굵은 글씨체를 적용하기 위해서 `cells_source_note()` 함수를 사용했다. 
- 또한 스터브 열의 오른쪽에 디폴트로 만들어지는 경계선을 보이지 않게 할 때 `cells_stub()`를 사용했다.

```{r}
mtcars[1:5, ] %>% gt(rownames_to_stub = TRUE) %>% 
  tab_header(
    title = "Motor Trend Car Road Tests",
    subtitle = "Data from the 1974 Motor Trend US magazine"
  ) %>%  
  tab_footnote("miles per gallon", 
    locations = cells_column_labels(
      columns = mpg
  )) %>% 
  tab_footnote(
    "Maximum MPG",
    location = cells_body(
        columns = mpg,
        rows = mpg == max(mpg)
    ),
    placement = "right"
  ) %>% 
  tab_source_note("Henderson and Velleman (1981), Building multiple regression models interactively. Biometrics, 37, 391–411.") %>% 
  tab_style(
    style = list(
      cell_text(color = "red")
    ),
    locations = cells_body(
      columns = everything(),
      rows = mpg > 22
    )
  ) %>% 
    tab_style(
    style = list(
      cell_fill(color = "lightcyan"),
      cell_text(weight = "bold")
      ),
    locations = cells_source_notes()
  ) %>% 
  tab_style(
    style = list(
      cell_borders(sides ="right", color = "white")
    ),
    locations = cells_stub()
  )
```


#### 열 레이블과 문자열 지정

`gt` 테이블의 열을 다루는 방법을 살펴보자. 열을 다루는 함수들의 이름은 `cols_***()`라는 형태로 되어 있다. 다음과 같은 데이터프레임으로 시작해 본다.

```{r}
base_tbl <- mtcars %>% 
  select(c(mpg, cyl, wt, am )) %>% 
  slice(1:7) %>% 
  gt() %>%  
  tab_header(
    title = "Motor Trend Car Road Tests",
    subtitle = "Data from the 1974 Motor Trend US magazine"
  ) 
base_tbl
```

`cols_label()` 함수는 열 레이블을 지정한다. `gt` 패키지는 디폴트로 데이터프레임의 열 이름을 표의 열 레이블로 사용한다. 이름을 지정할 때는 인자로 `원래열이름="새로운열이름"`의 형태로 지정한다.

```{r}
base_tbl %>% 
  cols_label(mpg = "Miles/Gallon", 
             cyl = "Number of Cylinders",
             wt = "Weight(1000 lbs)",
             am = "Transmission(0 = automatic, 1 = manual)"
   )
```

`gt` 패키지에서는 문자열을 값을 줄 때 `md()`, `hmtl()` 함수를 사용할 수 있다. 이 함수 안에서는 텍스트를 마크다운 문법과 HTML 문법으로 작성할 수 있다.

```{r}
base_tbl %>%
  tab_header(title=md("**Motor Trend Car Road Tests**")) %>%  
  cols_label(mpg = "Miles/Gallon", 
             cyl = "Number of Cylinders",
             wt = html("Weight<br>(1000 lbs)"),
             am = html("Transmission<br>(0 = automatic, 1 = manual)")
   )
```

`cols_align()` 함수로 열을 정렬할 수 있다. `align` 인자에서 `"left"`, `"right"`, `"center"` 값을 사용할 수 있고, `columns` 인자에 정렬 대상이 되는 열(들)을 지정한다. 다음은 `cyl`, `am` 열을 중앙으로 정렬한 예이다. 열의 레이블과 같은 열의 데이터 모두 정렬된다. 참고로 앞에서 `cols_label()` 함수로 열의 레이블을 지정했다고 하더라고 데이터의 열 이름은 그대로이고, 열을 가리킬 때는 원래 데이터 열 이름을 사용한다.

```{r}
base_tbl %>%
  tab_header(title=md("**Motor Trend Car Road Tests**")) %>%  
  cols_label(mpg = "Miles/Gallon", 
             cyl = "No. Cylinders",
             wt = html("Weight<br>(1000 lbs)"),
             am = html("Transmission<br>(0 = automatic, 1 = manual)")
   ) %>% 
   cols_align(align = "center", columns = c(cyl, am))
```

열 스패터(spanner)를 추가할 때는 `tab_spanner()` 함수를 사용하고, 레이블과 `columns` 옵션으로 그룹으로 묶을 열들을 지정한다. 열을 선택할 때는 `dplyr::select()` 함수에서 사용할 수 있는 방법을 그대로 사용할 수 있다.

```{r}
base_tbl %>%
  tab_header(title=md("**Motor Trend Car Road Tests**")) %>%  
  cols_label(mpg = "Miles/Gallon", 
             cyl = "No. Cylinders",
             wt = html("Weight<br>(1000 lbs)"),
             am = html("Transmission<br>(0 = automatic, 1 = manual)")
   ) %>% 
   cols_align(align = "center", columns = c(cyl, am)) %>% 
   tab_spanner("Characteristics", columns = cyl:am)
```

#### 행 그룹(row groups) 추가하기

다음은 행을 대상으로 하는 조작을 알아보자. 먼저 행 그룹이다. 행 그룹에 사용될 열(보통은 카테고리형 데이터)을 `gt()` 함수의 `groupname_col` 인자에 지정하면 자동으로 행 그룹이 만들어진다.

```{r}
mtcars %>% gt(groupname_col = "cyl") 
```

그러면 `cyl`의 값들이 행 그룹 레이블로 사용된다. 만약 좀 더 알아보기 쉬운 레이블로 넣고자 하는 경우에는, 미리 열을 변화시킨 다음 사용하는 것이 좋다. 그리고 행 그룹을 원하는 순서로 나열하기 위해서는 `row_group_order()` 함수를 사용한다. 다음은 `dplyr::mutate()` 함수를 사용하여 행 그룹 레이블이 들어갈 열을 만들고, `dplyr::select()` 함수를 사용하여 해당 열을 제거한 다음 표를 만들고, `row_group_order()` 함수로 행 그룹의 순서를 다시 지정하였다. 이 함수를 사용할 때는 행 그룹 레이블 이름들을 정려할 순서대로 문자열 벡터로 지정한다.

```{r}
mtcars %>% 
  mutate(cyl2 = paste(cyl, "Cylinders")) %>% 
  select(-cyl) %>% 
  gt(groupname_col = "cyl2") %>% 
  row_group_order(c("4 Cylinders", "6 Cylinders", "8 Cylinders"))
```

`gt`는 `dplyr::group_by()` 함수로 생성되는 그룹화된 데이터프레임의 그룹에 대한 정보를 자동으로 인식한다.

```{r}
mtcars %>% 
  group_by(cyl) %>% 
  slice(1:3) %>% 
  gt()
```

행 그룹은 `tab_row_group()` 함수를 사용하여 추가할 수 있다. 그룹명으로 사용할 레이블과 해당 그룹에 들어갈 행들을 `rows` 옵션에 지정한다. `rows` 옵션으로 지정될 행들은 `dplyr::filter()` 함수에서 사용하는 방법과 동일하다고 생각하면 된다. 다음과 같은 `df` 데이터프레임이 있다고 생각해 보자.

```{r}
 df <- mtcars %>% 
  group_by(cyl) %>% 
  slice(1:3)
df <- as.data.frame(df)
df
```

이 데이터프레임에 매뉴얼로 행 그룹을 추가해 본다.

```{r}
df %>% gt() %>% 
  tab_row_group("4 Cylinders", rows = cyl == 4) %>% 
  tab_row_group("6 Cylinders", rows = cyl == 6) %>% 
  tab_row_group("8 Cylinders", rows = cyl == 8) %>% 
  row_group_order(c("4 Cylinders", "6 Cylinders", "8 Cylinders"))
```

이미 본 바와 같이 `gt` 패키지는 `dplyr` 패키지로 호환될 수 있는 기능들을 가지고 있다.

#### 열 데이터 표시 형식 바꾸기

데이터프레임의 값들을 표로 제시할 때 다양한 포맷으로 사용자에게 보여줄 필요가 생긴다. 날짜라면 표가 사용되는 나라에 따라 포맷이 달라질 수 있을 것이다. 이와 같은 기능을 하는 함수들은 `gt` 패키지에서 `fmt_***()` 형태를 가지고 있다. `gt`에는 이 함수를 시험해 보기 편하게 다양한 데이터 타입을 가진 열로 구성된 `exibble`이라는 데이터를 제공한다. 이 데이터프레임을 사용하여 사용법을 알아보자.

```{r}
exibble
```

먼저 숫자 포맷에 대해서 알아보자. 숫자는 일반적인 숫자 포맷을 정하는 `fmt_number()`와 과학 표시법 형태로 출력하는 `fmt_scientific()` 함수가 있다. 사용법은 먼저 `columns` 인자로 포맷을 지정할 열(들)을 선택한다. 그런 다음 숫자 포맷에 필요한 여러 옵션들이 있다. 소수점 이하 자리를 정하는 `decimals`가 있고, 1000 단위로 숫자를 구분하는 `sep_mark`(디폴트: `","`)가 있다.

이 함수를 `num`이라는 열에 적용해 본 예이다.

```{r}
exibble %>% gt() %>% 
  fmt_number(
    columns = num,
    decimals = 1
  )
```

다음은 `fmt_scientific()` 함수를 사용한 예이다.

```{r}
exibble %>% gt() %>% 
  fmt_scientific(
    columns = num,
    decimals = 2
  )
```

`fmt_date()`는 날짜 포맷을 정하는 함수이다. 이 함수는 `date_style`이라는 인자에 사용할 날짜 포맷을 주고 사용한다. 해당 정보는 함수의 도움말 페이지에 설명되어 있다. 아래 예에서 `13`은 `"year.mn.day"` 포맷을 말한다. 해당 번호나 해당 문자열을 지정해서 사용할 수 있다.

```{r}
exibble %>% gt() %>% 
  fmt_date(
    columns = date,
    date_style = 13
  )
```

`fmt_datetime()` 함수도 `fmt_date()`와 사용법이 비슷한데, 날짜는 `date_style`로 시간은 `time_style` 인자로 지정한다.

```{r}
exibble %>% gt() %>% 
  fmt_datetime(
    columns = datetime,
    date_style = 1,
    time_style = 1
  )
```

날짜를 "a년 b월 c일" 형태로 출력하고자 할 때는 사용자 정의 함수로 포맷을 정해서 할 수 있는데, 이것은 뒤에서 설명한다.

`fmt_currency()` 함수는 통화 기호를 붙이는 데 사용된다.

```{r}
exibble %>% gt() %>% 
  fmt_currency(
    columns = currency,
    currency = "KRW"
  )
```

`gt`에서 결측값은 `NA` 자체로 표시된다. 결측값을 어떻게 표시할지는 `fmt_missing()` 함수에서 정할 수 있다. `missing_text` 인자에 사용할 문자열을 지정한다.

`exibble` 데이터프레임의 여러 열에 결측값들이 존재한다. 이것을 모두 "---"로 바꾸고자 한다.

```{r}
exibble %>% gt() %>% 
  fmt_missing(
    columns = everything(),
    missing_text = "---"
  )
```

앞에서 언급한 대로 `fmt()` 함수에 사용자 정의 함수를 사용하여 원하는 형태로 포맷을 만들 수 있다. 우리말로 날짜로 표시하도록 해 보자. 이 함수의 `fns` 인자에 포맷을 하는 데 필요한 사용자 함수를 지정한다. 이 함수는 열에서 하나의 값을 받아서 변환된 텍스트를 반환한다. 함수 안에서 문자열을 R Date 데이터 타입으로 바꾼 다음 `format()` 함수를 사용하여 포맷을 정했다.

```{r}
exibble %>% gt() %>% 
  fmt(
    columns = date,
    fns = function(x) {
      y <- as.Date(x)
      format(y, "%Y년 %m월 %d일")
    }
  )
```

이와 같은 함수들을 연결시켜 하나의 표의 데이터 포맷을 정할 수 있다.

```{r}
exibble %>%  
  gt(groupname_col = "group", rowname_col = "row") %>%
  fmt_number(
    columns = num, 
    decimals = 1
  ) %>%
  fmt(
    columns = date,
    fns = function(x) {
      y <- as.Date(x)
      format(y, "%Y년 %m월 %d일")
    }
  ) %>% 
  fmt_currency(
    columns = currency,
    currency = "KRW"
  ) %>% 
  fmt_missing(
    columns = everything(),
    missing_text = ""
  )
```

`gt` 패키지에는 이런 포맷 형식들을 표로 보여주는 도움말 함수를 제공한다. 이런 함수에는 `info_date_style()`, `info_time_style()`, `info_currencies()`와 같은 것들이 있는 이 함수는 해당 정보를 정리한 `gt` 테이블을 반환하기 때문에 편리하다.

```{r}
info_date_style()
```


#### 써머리 행 그룹 추가

써머리 행 그룹은 앞에서 행 그룹(row group)과 같은 관련이 있다. 행 그룹에 대한 써머리를 행을 추가하는 함수는 `summary_rows()`이고, 그룹에 상관이 표 전체의 데이터에 관한 써머리를 표 아래에 제시할 때는 `grand_summary_rows()`라고 한다. 함수 이름이 복수로 되어 있는 이유는 뒤에서 보면 알겠지만 동시에 여러 가지 데이터 써머리를 만들 수 있기 때문이다.

`gt` 패키지에는 `pizzaplace`라고 하는 데이터프레임이 들어 있다. 이 데이터프레임은 가상의 피자 가계에서 1년 동안의 주문 데이터를 정리한 것이다. 피자의 종류와 가격이 나와 있다. 이 데이터프레임을 사용해서 설명한다.

```{r}
head(pizzaplace)
```

1년동 판매된 피자 매출을 종류(`type`)과 크기(`size`)에 따라서 정리해 보려고 한다. 먼저 데이터프레임을 `dplyr` 패키지를 가지고 정리한다. 그룹핑은 `type`과 `size`를 가지고 진행했으나, `summarize()` 함수에서 `.groups` 인자를 통해서 마지막 `size`는 그룹핑에서 제외시켰다.

```{r}
df <- pizzaplace %>%
  dplyr::group_by(type, size) %>%
  dplyr::summarize(
    sold = n(),
    income = sum(price),
    .groups = "drop_last"
  )
df
```

이 데이터프레임을 표로 만들려고 한다. 스터브 행 이름으로 가지고 올 열을 `gt()` 함수의 `rowname_col`로 지정해 준다. 이 데이터프레임은 `type`에 따라 그룹핑되어 있는데, `gt`는 이 정보를 가지고 행 그룹을 만든다.

```{r}
df %>%
  gt(rowname_col = "size") 
```

여기서 각 그룹별 써머리 행을 `summary_rows()` 함수를 사용하여 포함시킨다. 이 함수에서 `groups` 인자는 써머리 행을 추가할 그룹을 지정할 때 사용하는데 `TRUE`라고 하면 모든 그룹을 의미한다. 다음 `columns` 인자에 써머리할 데이터가 있는 열을 지정한다. `fns` 인자에 써머리에 사용할 함수를 R 리스트를 사용하여 지정한다. 리스트의 이름은 행의 이름이 되고, 그 이름에 대응하는 함수가 써머리에 사용된다. 함수는 함수 이름을 따옴표에 넣어서 지정할 수도 있고, 아래 두 번째 `summary_rows()`에서 처럼 R 포뮬러를 사용할 수도 있다.

```{r}
df %>%
  gt(rowname_col = "size") %>%
  summary_rows(
    groups = TRUE,
    columns = sold,
    fns = list("합계" = "sum")
  ) %>% 
  summary_rows(
    groups = TRUE,
    columns = income,
    fns = list("합계" = ~sum(., na.rm=TRUE))
  )
```

다음은 `grand_summary_rows()` 함수를 사용하여 전체에 대한 총합을 계산한 써머리 행을 추가해 보자.

```{r}
df %>%
  gt(rowname_col = "size") %>%
  summary_rows(
    groups = TRUE,
    columns = sold,
    fns = list("합계" = "sum")
  ) %>% 
  summary_rows(
    groups = TRUE,
    columns = income,
    fns = list("합계" = ~sum(., na.rm=TRUE))
  ) %>% 
  grand_summary_rows(
    columns = c("sold", "income"),
    fns = list(
      "총합" = ~sum(., na.rm=TRUE))
  )
```

다음은 이 기능들을 사용하여 `pizzaplace` 데이터프레임을 가지고 `classic` 타입의 피자가 월별로 어떻게 팔렸는지 정리해 본 예이다.

```{r}
library(lubridate)
df <- pizzaplace %>%
    filter(type == "classic") %>%
    mutate(month = month(ymd(date))) %>%
    group_by(month, type, size) %>%
    summarise(sold = n(), income = sum(price), .groups = "drop" )

df %>%  gt(groupname_col = "month", rowname_col = "type") %>%
    summary_rows(
        groups = TRUE,
        columns = c("sold", "income"),
        fns = list(
            "소계" = ~sum(., na.rm = TRUE)
        )
    ) %>%
    grand_summary_rows(
        columns = c("sold", "income"),
        fns = list(
            "총합" = ~sum(., na.rm = TRUE),
            "월 평균 판매량, 매출" = ~sum(., na.rm=TRUE) /12
        )
    )
```


## 파이썬 코드로 표 만들기 

### `pandas` 패키지로 표 만들기 

