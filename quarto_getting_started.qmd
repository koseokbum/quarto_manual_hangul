# 콰르토 맛보기

이 장에서는 맛보기 장으로, 콰르토를 사용하여 간단한 문서를 만들어 보는 방법을 설명하고자 한다. 여기서는 콰르토 사이트를 모방하여 3가지 에디터를 가지고 설명한다.

::: {#fig-tools layout-nrow="1" layout-valign="bottom"}

![RStudio](images/rstudio.png){width="25%"}

![Jupyter](images/jupyter_notebook.png){width="25%"}

![VS Code](images/vs_code.png){width="25%"}

3가지 에디터로 설명
:::

아마도 콰르토 웹사이트에서 이렇게 설명하는 이유는 콰르토가 다양한 유저들이, 다양한 작업 환경에서 사용할 수 있는 도구라는 것을 강조하려는 뜻으로 보인다.

- RStudio 통합개발환경: R 유저들이 가장 선호하는 도구로, 여기서는 니터(`knitr`)라는 R 엔진을 사용하여 설명한다.

- 주피터 노트북/주피터랩: 파이썬 데이터 과학자들이 가장 많이 사용하는 도구로, 이 경우에는 파이썬을 엔진을 사용하여 설명한다.

- VS Code: 최근 데이터 과학자들 사이에 인기가 높은 마이크로 소프트사의 텍스트 에디터로, 파이썬 또는 R 유저 모두 많이 사용한다. 이 경우에는 R 니터 엔진과 파이썬 엔진 모두 사용하여 설명한다.

다만 여기서 콰르토의 YAML이나 코드 블록, 코드 옵션 등은 다음 장으로 미룬다. 단지 사용하는 에디터를 가지고 작업하는 큰 그림만 설명한다.

## RStudio에서 콰르토 글쓰기 {#sec-rstudio-quarto}

콰르토는 R 마크다운의 확장된 도구이다. 따라서 R 언어 개발환경인 RStudio에는 콰르토를 사용하기 편리하도록 여러 기능들이 메뉴로 준비되어 있다. 여기서는 [@sec-ComputerConfiguration]에서 설명한 대로 R과 RStudio가 이미 설치되었다고 가정하고 설명한다. 

RStudio 편집창 왼쪽 위에 있는 플러스 표시 아이콘을 사용하여 "Quarto Document"를 선택하거나 **File \>\> New File \>\> Quarto Document**를 선택하여 시작한다.

![File 메뉴나 왼쪽 위 플러스 버튼 사용하여 Quarto Document 선택](images/new_quarto.png){#fig-quarto-doc fig-align="center" width="60%"}

그러면 다음 창이 열린다. 여기서 관련 내용들을 선택한다. 여기서 설정한 값들은 뒤에서 설명하는 YAML 헤더에 반영된다. YAML 헤더는 파일이 생성된 이후에도 마음대로 바꿀 수 있기 때문에, 여기서 아무것도 선택하지 않고 나중에 YAML 헤더를 조정해서 원하는 결과를 얻을 수 있다.

![여기서 제목, 저자, 문서 포맷 등을 선택한다.](images/new_file_setting.png){#fig-new-file-setting fig-align="center" width="400"}

-   가장 왼쪽 열에서 문서, 프레젠테이션, 샤이니 등 무엇을 만들지 선택한다. 가장 기본인 "Document"를 선택해 본다.

-   오른쪽에서 문서의 제목, 저자, 문서의 포맷을 정하고, 문서 엔진을 드롭다운 메뉴에서 선택한 다음, 비쥬얼 마크다운 에디터를 쓸지를 선택한다. 비쥬얼 마크다운 에디터는 초보자들에게는 도움이 될 지 모르겠지만 개인적으로 거의 사용하지 않는다.

- 엔진으로는 R 언어를 위한 니터(Knitr) 엔진을 선택하고, 비쥬얼 마크다운 에디터는 사용하지 않는다고 선택했다고 가정한다. 

- 제목은 "Quarto 연습", 저자는 "sbko"로 입력했다. 모든 내용을 입력한 후 마지막에 아래 **Create** 버튼을 클릭하면 이름이 부여되지 않은 예제 파일이 편집창에 열린다.

![처음 시작하는 콰르토 문서](images/quarto_init.png){#fig-quarto-init fig-align="center" width="65%"}


[@fig-new-file-setting]에서 지정한 내용들은 **YAML 헤더**의 필드값으로 전달된다. YAML 헤더는 파일의 콘텐츠 처리 방법 등에 관한 메타 정보를 지정하는 곳이고, `---`에서 시작하여 `---`(이 기호를 포함하여)까지를 말한다.

``` .markdown
---
title: "Quarto 연습"
author: "sbko"
format: html
---
```

콰로토에서 제목(`title`)과 저자(`author`)는 보는 바와 같이 입력한다. 문서 포맷은 `format`이라는 필드를 사용한다. HTML 문서인 경우 `html`, PDF 문서의 경우는 `pdf`, MS 워드인 경우는 `docx`를 값을 준다. 이 YAML 헤더 다음에 본문이 놓인다. 

이제 문서를 런더링해보자. 편집 메뉴에 있는 **Render** 버튼을 클릭한다. 그러면 문서를 저장하라는 안내가 보이고, 원하는 이름으로 저장하면 렌더링이 진행된다.

![문서 렌더링](images/quarto-render.png){#fig-quarto-render fig-align="center" width="65%"}

이 경우 우리는 콰르토의 R 언어와 함께 사용하기 위해 니터(knitr) 엔진을 사용하고 있다. 렌더 버튼을 클릭하면 먼저 R 코드가 실행되고, 그 결과는 해당 위치에 가져다 놓인다. 이 결과는 내부적으로 팬독 마크다운 파일로 준비된다. 다음은 팬독 프로세서가 이 파일을 프로세싱한다. 최종 결과는 RStudio 뷰어(Viewer) 페인이나 새로운 창에서 볼 수 있을 것이다. 결과를 어디서 볼지는 **Render** 버튼 오른쪽에 있는 기어 모양의 아이콘을 클릭해서 선택할 수 있다.

내용을 변경하고 다시 렌더 버튼을 클릭하면 변경 내용을 저장한 다음 문서가 렌더링된다. 그리고 Render 버튼 앞 **Render on Save** 체크해 두면 문서를 저장할 때마다 자동으로 렌더링된다.

다음은 다음과 같이 `format` 필드에 `docx` 값으로 바꾸면 마이크로 소프트 워드 문서로 렌더링된다. 자동으로 문서가 열리지 않으면 RStudio 창에 **Files** 페인에서 문서를 클릭한다.

``` .markdown
---
title: "Quarto 연습"
author: "sbko"
format: docx
---
```

[@sec-ComputerConfiguration]에서 소개한 대로 컴퓨터에 레이텍({{< latex >}})가 설치되어 있다면 PDF 문서로도 렌더링이 가능하다. 다만 한글을 포함하기 위해서는 관련 패키들을 불러 오는 등의 설정이 필요하여 한글을 뺀다.

``` .markdown
---
title: "Quarto Exerciose"
author: "sbko"
format: pdf
---
```

[@fig-pdf-rendering]은 PDF로 렌더링된 모습을 보여준다.

![PDF 문서 렌더링](images/pdf_rendering.png){#fig-pdf-rendering fig-align="center"}

앞에서는 RStudio의 **Render**라는 버튼을 사용하여 문서를 렌더링했다. 이것을 콰르토 커맨드라인 명령으로도 문서를 렌더링할 수 있다. RStudio에는 **Terminal**이라는 페인이 있다. 여기에서 명령을 바로 사용할 수 있다.

`.qmd` 문서의 이름이 `hello.qmd`라고 지정했다고 해보자.

다음은 `hello.qmd` 문서를 렌더링하는 과정이다. `quarto render`라는 명령을 사용한다.

``` .bash
$ quarto render hello.qmd
```

위 명령에서는 타깃 문서 포맷을 별도로 지정하지 않았다. 이런 경우에는 `hello.qmd` 파일의 `format` 필드에 명시된 파일로 렌더링된다. 만약 `hello.qmd` YAML 헤더에서 `foramt: pdf`라고 되어 있어도 `--to docx`라고 명시적으로 옵션을 지정하면 MS 워드 문서로 렌더링된다.

``` .bash
$ quarto render hello.qmd --to docx
```

## 주피터 노트북/주피터 랩 사용 {#sec-using-jupyternb}

주피터 노트북/주피터랩에서 콰르토 사용법에 대해서 알아보자. 주피터랩은 주피터 노트북을 확장한 것이고, 기본은 주피터 노트북에서 크게 어긋나지 않기 때문에 이하에서 이들 모두를 주피터 노트북이라고 부르고자 한다. 

주피터 노트북 파일은 웹 브라이우저에서 실행되고, 해당 파일은 `.ipynb`라는 확장자를 사용하며, JSON 포맷으로 되어 있다. 그래서 전체적으로 보면 콰르토에서 사용하는 팬독 마크다운, 파이썬 코드 등으로 문서를 만들고 나서, 터미널(명령 프롬프트)에서 `quarto render`라는 명령을 사용하여 결과물을 얻는다. 다음 순서대로 해 보자.


1.  아나콘다 프롬프트(윈도우인 경우, 맥인 경우는 터미널)을 실행하고, 사용할 콘다 가상 환경을 활성화한 다음, 작업 디텍터리로 이동한 다음, `jupyter lab` 명령을 실행한다.

2.  파이썬 디폴트 커널인 `ipykernel`을 선택하여 새로운 주피터 노트북을 시작한다.

3.  첫 번째 셀을 "Raw Cell"로 바꾸고, 여기에 YAML 헤더를 입력한다. YAML 헤더는 `---`에서 `---`까지이기 때문에 이 `---` 들도 입력한다. 이것이 일반적인 주피터 노트북을 사용하는 경우와 크게 다른 점이다. 라우 셀에 YAML 헤더를 넣는다는 점을 기억하자. 다음 셀 부터는 일반적인 주피터 노트북 사용법과 같다.

    ![첫 번재 셀을 라우 셀로 바꾸고 YAML 헤더 입력](images/raw_cell_input.png){#fig-raw-yaml}

4.  두 번째 셀은 마크다운 셀로 바꾸고, 여기에 다음 내용을 입력해 보자.

    ``` .markdown
    ## Polar Axis

    For a demonstration of a line plot on a polar axis, see [@fig-polar].
    ```

5.  세 번째 셀은 코드 셀로 다음 파이썬 코드를 넣자.

    ``` .python
    #| label: fig-polar
    #| fig-cap: "A line plot on a polar axis"

    import numpy as np
    import matplotlib.pyplot as plt

    r = np.arange(0, 2, 0.01)
    theta = 2 * np.pi * r
    fig, ax = plt.subplots(
      subplot_kw = {'projection': 'polar'} 
    )
    ax.plot(theta, r)
    ax.set_rticks([0.5, 1, 1.5, 2])
    ax.grid(True)
    plt.show()
    ```

    주피터랩을 사용해 본 독자라면 마크다운 셀에서 이전에는 `[@fig-polar]`과 같은 문법이나, 코드에서 `#| label: fig-polar`과 같은 것들을 사용하지 않았을 것이다. 이것은 콰르토에서 사용하는 상호 참조 방법과 코드 블록 옵션 사용 예를 보여 준다. 이제 주피터랩에서 늘 하는 방식으로 `Shift+Enter` 키 등을 사용하여 코드를 실행시킨다. 주피터랩에서 코드를 실행시켜도 여기서는 콰르토 문법이 해석되지 않는다. 이런 것들이 효과를 보이게 하려면 이렇게 만들어지 파일을 콰르토로 렌더링해야 한다.

1. 이 파일을 `hello_nb.ipynb`로 저장했다. 이 파일을 다음과 같은 명령으로, 주피터랩에 있는 터미널 창을 사용하거나 커맨드라인에서 다음과 같이 실행시킨다.

    ``` .bash
    $ quarto render hello_nb.ipynb 
    ```

1. 이렇게 생성된 `hello_nb.html` 파일을 웹 브라우저로 연다(더블클릭한다).

    ![주피터 노트북 파일을 렌러링](images/jupyter_render.png){#fig-ju-render fig-align="center"}

1. 만약 이 노트북 파일을 MS 워드로 렌더링하고자 한다면 다음과 같이 `--to docx` 옵션을 지정한다.

    ``` .bash
    $ quarto render hello_nb.ipynb --to docx
    ```

    이 파일을 열어 보면 다음과 같이 보일 것이다. 상호 참조 기능이 제대로 구현되었는지도 확인한다.

    ![주피터 노트북 파일으로 MS 워드로 렌더링](images/jupyter_word_rendering.png)

1. 마찬가지로 레이텍이 설치된 시스템이라면 다음과 같이 해서 PDF 문서로 만들 수 있다.

    ``` .bash
    $ quarto render hello_nb.ipynb --to pdf
    ```

따라서 주피터 노트북/주피터랩에서 작업하는 경우에는 다음과 같이 정리할 수 있다.

1.  노트북 파일의 첫 번째 셀을 라우 셀(Raw Cell)로 바꾼 다음에 여기에 YAML 헤더를 입력한다.

2.  나머지는 일반적 노트북 파일을 사용하는 방법과 같다.

3.  콰르토 문법을 사용하여 문서를 작성한다.

4.  주피터 노트북/주피터랩에서 코드들을 실행한다.

5.  커맨드라인에서 `quarto render xxx.ipynb --to yyyy` 명령을 사용하여 문서를 타깃 문서로 렌더링한다.

[@fig-qmd-process3]는 주피터 노트북에서의 작업 흐름을 요약한 것이다.


![.ipynb 파일을 콰르토를 사용하여 프로세싱](images/qmd_process3.png){#fig-qmd-process3 fig-align="center" width="70%"}


## VS Code에서 사용 

VS Code는 요즈음 데이터 과학자들 사이에 인기가 높은 텍스트 에디터이다. 텍스트 에디터의 기본 기능에 익스텐션 패키지를 추가하여 사용한다. 여기에 관해선 [@sec-vscode-extension]를 참고한다. 콰르토에 대한 패키지도 개발되어 있다. [@fig-vs_quarto-extension]과 같이 VS Code 왼쪽에서 큐브 모양의 메뉴를 클릭하여, 상단에서 "Quarto"라고 입력하면 익스펜션이 쉽게 검색된다. 바로 설치할 수 있다. 더불어 VS Code 사이트를 보고, [R 언어를 위한 패키지들](https://code.visualstudio.com/docs/languages/r), [파이썬 언어를 위한 패키지들](https://code.visualstudio.com/docs/languages/python)도 설치한다.

![VS Code에서 콰르토 익스텐션 추가하기](images/vs_quarto.png){#fig-vs_quarto-extension}

VS Code에서는 "Jupyter" 익스텐션이 설치되어 있는 경우, `.ipynb` 확장자를 가지는 주피터 노트북 파일을 만들고 편집할 수 있다. 그래서 VS Code에서는 2가지 방식으로 콰르토 문서를 만들 수 있어서 훨씬 유연하게 작업할 수 있다. 

1. `.qmd` 파일로 작업하기

1. `.ipynb` 파일로 작업하기 


::: {.callout-tip}
## 나의 선택 기준

나는 니터 엔진으로 R 언어로 작업하는 경우 `.qmd` 파일로 작업하고, 주피터 엔진으로 파이썬을 사용하는 경우에는 `.ipynb` 파일로 작업한다. 그 이유는 `.ipynb` 즉 주피터 노트북을 사용하는 경우 VS Code에 주피터 익스텐션 기능에 포함되어 있는 커널 선택 도구가 있어서 꼭 사용해야 하는 파이썬 가상 환경이 있을 때, 이것을 사용하여 커널을 쉽게 선택할 수 있기 때문이다. 콰르토 자체의 `jupyter` YAML 옵션만 사용하는 경우 이 과정이 쉽지 않다. 
:::

### VS Code에서 `.qmd` 파일로 콰르토 사용하기 

이 방법은 기본적으로 RStudio에서 작업하는 것과 별 다름이 없고, 콰르토 익스텐션을 설치한 경우에는 렌더 버튼도 만들어지고, 프리뷰 창도 제공된다. 보통의 경우는 VS Code에서 터미널을 열어서 `quarto preview` 명령을 실행하고, `.qmd` 파일을 작업하고 저장하면, 바로 브라우저에서 결과를 볼 수 있다. 

### VS Code에서 `.ipynb`로 콰르토 사용하기 

[VS Code 문서](https://code.visualstudio.com/docs)에서 파이썬 언어 설정과 R 언어 설정 설명을 읽고, 필요한 익스텐션을 설치한다. 콰르토 인스텍션도 설치한다. 이 방법은 앞의 주피터 노트북 사용법과 같다. 

1. `Ctrl+Shift+P`(윈도우), `Cmd+Shift+P`(맥)을 사용하여 VS Code 커맨드 팔레트를 열어서, `Quarto: New Notebook`을 선택한다.

    ![Quarto: New Notebook](images/vs_q_new_notebook.png){#fig-q_new_nb}

1. 이렇게 하면 다음과 같이, 첫 번째 행이 `raw cell`로 열리고, 그 안에 간단한 YAML 헤더가 들어가 있는 상태가 된다. 여기에 추가 옵션을 넣을 수 있으며, 그 다음 셀들은 저자가 선택하여 코드를 넣든지, 마크다운을 넣든지 할 수 있다. 그리고 사용하고 싶은 커널을 선택한다.

    ![.qmd 파일 시작](images/vs_qmd_start.png){#fig-vs_qmd_start}

1. 내용을 다 채우고 나면 상단 메뉴에서 `Render HTML` 등을 선택하여 문서를 렌더링한다.

    ![문서 렌더링](images/vs_qmd_rendered.png){#fig-vs_qmd_rendered}

## 정리

이 장에서는 3가지 텍스트 에디터에서 콰르토를 사용하는 방법에 대해 개괄적으로 설명하였다.
