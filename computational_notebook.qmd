# 컴퓨테이셔널 노트북과 콰르토 {#sec-computationalnotebook}

콰르토를 본격전으로 다루기 전에 약간 이론적인 내용을 알고 가면 좋을 것 같다. 콰르토는 컴퓨테이셔널 노트북(computational notebook)이라고 불리는 소프트웨어군에 속하는 도구이다. 여기서는 컴퓨테이션 노트북에 대한 개괄적인 개념과 그 특징에 대해 설명하고자 한다.

## 컴퓨테이셔널 노트북의 기원: 문학적 프로그래밍

컴퓨테이셔널 노트북에 대한 아이디어는 스탠포드 대학의 저명한 컴퓨터 과학자인 도널드 크누스(Donald Knuth)에서 유래한다. 도널드 크누스는 이 책에서도 소개하는 레이텍({{< latex >}})의 원조가 되는 텍({{< tex >}}) 시스템 개발자이다. 그는 일반적인 소프트웨어 개발에 필요한 "구조화된 프로그래밍" 방식에 추가하여 미래에[^computational_notebook-1] 필요할 수도 있는 프로그래밍의 개념으로 "Literate Programming(문학적 프로그래밍)"을 소개했다[@knuth1984]. 구체적으로 자신이 책 조판 시스템으로 개발한 `WEB`을 소개했다. 

[^computational_notebook-1]: 논문은 1984년에 출판되었다.

크누스는 문학적 프로그래밍이란 컴퓨터에게 뭔가 지시를 내리는 일반적인 구조화된 프로그래밍 방식과 다르게, **컴퓨터에게 어떤 일을 하게 하고 싶은지 (프로그래머의 의도를) 사람들에게 설명하고자 하는 목적으로 사용하는 프로그래밍**이라고 했다. 문학적 프로그래밍에는 (1) 문서 포맷팅 언어와 (2) 계산용 프로그래밍 언어로 구성되는데, 그가 만든 `WEB`에 시스템은 (1) 문서 포맷팅 언어로 자신이 개발한 `TeX`, (2) 계산용 프로그래밍 언어로는 파스칼이 이용된다. 그는 앞으로 이와는 다른 문서 포맷팅 언어나 프로그래밍 언어들을 조합하는 시스템도 나올 것이라도 예측했다. 그 예측은 맞아 들었다. 웹이 없던 시절에는 PDF 문서를 만들기 위해 레이턱이 많이 사용되었으나, 웹이 나온 이후로는 문서 포맷팅 언어로 마크다운(Markdown)이 가장 많이 사용된다. 프로그래밍 언어로는 R과 파이썬을 비롯하여 아주 다양한 언어들과 연결시켜 사용할 수 있게 되었다.

[@fig-web-system]은 `WEB`의 개요를 보여준다. 먼저 문서 포맷팅 언어와 프로그래밍 언어로 만든 소스 파일에서 시작한다(WEB). 그림 위쪽은 "WEAVE" 과정이다. 이것은 '짜다', '엮다'의 이미로 코드와 텍스트를 실행하는 과정이며, 1차로 코드를 실행하고 그 결과는 항상 문서 포맷팅 언어의 문법에 맞춘다. 여기서는 레이텍의 문법에 맞도록 출력된다. 1차 결과물은 레이텍 소스 파일이 되며, 이것을 2차 프로세싱하여 PDF 문서가 만들어진다. 아래 과정은 "TANGLE"이다. 텍스트와 코드가 혼합된 소스 파일에서 코드만을 뽑아 실행시킨다.

씨줄과 날줄을 서로 엮어 어떤 천이 되듯이, 문서 포맷팅 언어와 프로그래밍 언어를 서로 엮어서(weave) 문서를 만든다. 이와 같이 컴퓨테이션 노트북과 관련된 용어들은 천을 짜는 비유를 많이 사용했다. 이런 전통에 따라 이후 개발된 컴퓨테이션 노트북 시스템들도 이런 용어들을 많이 사용하는 경향이 있다. 이 책에서 소개하는 R 마크다운의 엔진인 `Knitr`도 "knit(뜨게질한다)"도 그런 전통에 따른 것이라고 보면 좋다.

![WEB 시스템](images/web_system.png){#fig-web-system fig-align="center" width="60%"}

## 컴퓨테이셔널 노트북의 장점

오늘날 가장 인기가 높은 컴퓨테이셔널 노트북은 주피터 노트북(Jupyter Notebook, <https://jupyter.org>)이다. 주피터 노트북 이전에도 노트북과 같은 인터페이스가 있었고 지금도 여러 종류의 노트북이 존재하지만, 주피터 노트북은 현재 가장 많이 사용되고 다른 노트북의 기반 기술로 활용된다. 그래서 주피터 노트북을 중심으로 컴퓨테이셔널 노트북의 특장점을 설명하려고 한다. 

다음 [@fig-line-polar]은 콰르토 사이트에서 사용하고 있는 코드를 사용하여 주피터랩(주피터 노트북의 최신 인터페이스)으로 다시 작성해 본 예이다.

![전형적인 노트북 예제](images/line_polar.png){#fig-line-polar fig-align="center" width="60%"}

주피터 노트북에서는 **셀(cell)**이라는 불리는 곳에 내용을 입력한다. 사용자가 셀의 용도를 설정하고 사용하는데, 코드를 입력하는 셀을 **코드 셀(code cell)**이라고 하고, 텍스트를 입력하는 셀을 **마크다운 셀(markdown cell)**이라고 한다. 또 특별한 목적으로 사용되는 **라우 셀 (raw cell)**도 있다.이런 셀들이 모여 주피터 노트북 파일이 된다. 이처럼 노트북은 앞에서 문학적 프로그래밍에서 설명한 방식대로, *하나의 파일에 다른 사람들이 읽을 수 있도록 하는 텍스트와 계산에 쓰이는 컴퓨터 코드를 하나의 소스 파일에 작성한다.*

주피터에서 코드 셀을 실행시키면 [@fig-line-polar]에서 보듯이 셀 바로 아래 그 결과가 출력된다. 그림에서는 파이썬 맷플롯립 패키지를 사용하여 데카르트 좌표계의 직선을 극좌표계로 변환하는 예이다. 이렇게 노트북은 코드와 그 결과를 바로 확인할 수 있어 편리하다.

컴퓨테이션 노트북은 소프트웨어 개발을 위한 도구라기 보다는 데이터 탐색(data exploratoin)용 도구라고 보는 것이 옳다. 노트북의 코드를 모아 소프트웨어 개발에 활용할 수 있지만, 근본적으로 컴퓨테이셔널 노트북은 **데이터 탐색 도구**라는 점을 기억했으면 한다(노트북을 소프트웨어 개발용 도구로 만든 nbdev(<https://nbdev.fast.ai>)라는 도구도 있다).

컴퓨테이셔널 노트북이 과거에도 있었지만 오늘날처럼 많이 사용되지는 않았다. 이전에는 수리 계산을 하는 분야에 주로 사용되었다. 이런 노트북의 붐은 데이터 과학의 발전과 관계가 깊다. 데이터 과학은 데이터에서 인사이트를 얻는 과정이 가장 중요하며 데이터 탐색은 인사이트를 얻는 중요한 과정이다. 노트북은 이런 과정에서 편히 사용할 수 있는 직관적인 인터페이스를 제공한다.

주피터 노트북에 [@fig-youtube-insert]과 같이 유튜브 비디오를 넣는 것도 어렵지 않다. 이와 같이 주피터에서는 이미지, 인터랙티브 시각화, 동영상 등을 포함시킬 수 있다. 주피터에서는 이런 특징을 **리치 아웃풋(rich output)**이라고 말하는데, 다양한 종류의 콘텐츠를 노트북에 포함시킬 수 있다는 것이 컴퓨테이션 노트북의 또하나의 특징이다.

![리치 아웃풋 시스템](images/youtube_insert.png){#fig-youtube-insert fig-align="center" width="60%"}

주피터 노트북 소스파일은 `.ipynb`라는 확장자를 사용하여 저장한다. 이 파일은 동료 개발자나 연구자들끼리 소통하는 데 사용할 수 있다. 또한 웹으로 올려서 웹 서버에서 프로세싱되게 하여 바깥 사람들과 소통하는 데 사용할 수 있다. 이것을 프레젠테이션 포맷으로 바꿔 발표회장에서 발표 자료로 활용할 수 있고, PDF나 MS 워드 같은 정적인 콘텐츠로 교류하는 데 사용할 수도 있다. AIM이라는 잡지에 주피터 노트북의 장점이 잘 설명되어 있으므로 읽어 보면 좋을 것 같다[^computational_notebook-3].

[^computational_notebook-3]: <https://analyticsindiamag.com/why-jupyter-notebooks-are-so-popular-among-data-scientists/>

데이터 과학 붐과 함께 컴퓨테이션 노트북은 데이터 분석의 필수 요소가 되었고, 어떤 특수한 목적에 맞는 수많은 노트북들이 개발되어 있다. [@fig-ds-list]에는 최근의 컴퓨테이셔널 노트북 리스트를 보여준다. 사이트를 방문하여 그 특징들을 살펴보는 것도 좋을 것 같다. 

![컴퓨테이션 노트북(<https://datasciencenotebook.org>에서 인용)](images/ds_list.png){#fig-ds-list fig-align="center" width="45%"}

구글 코랩(Google Colaboratory)은 구글이 제공하는 클라우드 기반 노트북 서비스이다. 구글 계정만 누구나 쉽게 사용할 수 있고, <https://colab.research.google.com> 이라는 주소를 입력하면 바로 노트북 창이 열린다. 노트북 파일은 구글 드라이브에 바로 저장된다. 코랩 프로(Colab Pro) 서비스는 이 글을 쓰는 시점에는 한국에서 공식으로 출시되지는 않았지만 머지않아 출시될 수 있을 것이라고 본다. 클라우드에서 TPU 등을 사용할 수 있어서 딥러닝 등을 실행시킬 때 좋은 방법이다.

![구글 코랩 서비스: 구글 계정만 있으면 바로 사용가능하다.](images/colab.png){#fig-colab fig-align="center" width="60%"}

콰르토는 R 언어 환경에서 가장 많이 사용되는 노트북인 R 마크다운/노트북의 확장이다. 콰르토의 기본이 되는 이 시스템에 대해서도 알아보자.

## R 마크다운 시스템

전통적으로 R 언어에 대한 문학적 프로그래밍 도구에는 `Sweave`가 있었고 유즈음에는 R 마크다운 시스템이 주로 사용된다. R 마크다운 시스템이 출시되기 전에는 R 유저들은 `Sweave`를 시스템을 사용하여 R 패키지 설명서나 매뉴얼 같은 문서화 작업을 주로 했다. Sweave 매뉴얼(Sweave User Manual)은 지금도 기본 R에 포함되어 있다. RStudio가 설치되어 있다면, 도움말 홈페이지에서 [@fig-sweave]과 같이 "User Manuals"를 클릭해서 보면 리스트 맨 처음에서 찾을 수 있다. `Sweave` 시스템은 문서 포맷팅 언어로 레이턱({{< latex >}})을 사용하고, `noweb`이라는 문학적 프로그래밍 시스템에 의존했다. 그래서 소스 파일은 `.Rnw`이라는 확장자를 사용한다. `Sweave` 시스템은 다음과 같이 정리할 수 있다.

- 문서 포맷팅 언어: 레이텍
- 프로그램잉 언어: R

![Sweave 매뉴얼 보기](images/sweave.png){#fig-sweave fig-align="center" width="40%"}

이와 같은 `Sweave`의 기능을 대폭 보강한 R 패키지가 `knitr`이고, 이것을 기반으로한 R 마크다운 시스템이 개발되어, 지금은 이 시스템이 R 문서화 작업의 핵심 도구가 되었다. R 마크다운 시스템에서는 R 코드와 마크다운을 사용하여 소스 파일을 만들어 사용하기 때문에 `.Rmd`라는 확장자를 사용한다. 앞에 WEB의 "weave"이라능 용어 대신 "knit"이라는 단어를 사용한다.

R 마크다운 시스템이 작동하는 방식을 살펴보자. 소스 파일은 `.Rmd`라는 확장자를 가진다. `.Rmd` 소스 파일에서 먼저 R 코드를 실행한다. 실행된 결과들을 주변의 마크다운 문법에 맞도록 해당 위치에 가져다 놓는다. R 코드를 프로세싱했기 때문에 그 결과 얻어지는 파일은 `.md`라는 확장자를 가진 마크다운 파일이 된다. 여기서 사용하는 마크다운은 여러 확장 기능을 가진 [팬독](https://pandoc.org) 마크다운을 사용한다. 팬독 마크다운 시스템은 마크다운 문법을 제공하고, 그렇게 작성된 마크다운 문서를 아주 다양한 포맷으로 변환할 수 있는 기능을 가지고 있다. 그래서 `.md` 파일을 가지고 HTML이나 MS Word 문서로 바꿀 수 있고, 레이텍 시스템을 사용하여 [@fig-pdf_process]과 같이 PDF 문서를 만들어낼 수 있다.

![R 마크다운에서 xelatex 엔진을 사용하여 PDF 문서를 만드는 과정](images/pdf_process.png){#fig-pdf_process fig-align="center" width="60%"}

R 마크다운/니터 시스템의 장점 가운데 하나는 (마크다운) 텍스트를 텍스트 에디터에서 플레인 텍스트로 파일 바탕에 바로 입력할 수 있다는 점이다. 주피터 노트북인 경우 셀에 입력된 내용들을 합쳐 JSON 포맷으로된 `.ipynb` 파일에 저장된다. 그래서 일반 텍스트에서 내용을 편집하는 것이 거의 불가능하다. 반면 플레인 텍스트로 입력되는 R 마크다운/니터 소스 파일은 아무 텍스트 에디터에서나 편집하기 쉽다. 플레인 텍스트로 입력되기 때문에 깃(Git)과 같은 버전 관리(version control) 툴과 함께 사용하는 데 전혀 문제가 되지 않는다.

다음은 콰르토 사이트에서 예시로 사용한 소스 파일을 살짝 변형한 것이다. 여기서는 큰 개념이 중요해서 코드 내용은 무시해도 괜찮다.

```` markdown
---
title: "ggplot2 demo"
format: 
  pdf:
    geometry: [top=10mm, left=10mm]
---

## Air Quality

@fig-airquality further explores the impact of temperature on ozone level.

```{{r}}
#| label: fig-airquality
#| fig-cap: Temperature and ozone level.
#| warning: false

library(ggplot2)

ggplot(airquality, aes(Temp, Ozone)) + 
  geom_point() + 
  geom_smooth(method = "loess"
)
```
````

이 소스 파일은 [@fig-rmd_source]에서 설명한 문학적 프로그래밍 방식에 따라, 문서 포맷팅 언어인 마크다운과 프로그래밍 언어 코드로 구성된다. 문서 메타데이터의 역할에 대해서는 나중에 자세히 설명된다.

![소스파일은 마크다운 텍스트와 코드 블록으로 채워진다.](images/rmd_source.png){#fig-rmd_source fig-align="center" width="60%"}

컴퓨테이션 노트북의 특징 가운데 하나는 코드 실행 결과를 같은 화면에서 바로 볼 수 있다는 점이다. RStudio 통합개발환경에는 코드 블록 오른쪽 위에 보이는 화살표를 클릭하면 코드 아래 그 실행 결과가 바로 출력된다.

![코드를 바로 실행하여 볼 수 있다.](images/r_notebook.png){#fig-r-notebook fig-align="center" width="60%"}

소스 파일 작성을 마치고 문서 렌더링을 통해 [@fig-quarto_knitr]과 같이 PDF 문서로 만들어 볼 수도 있다.

![.Rmd 파일을 가지고 PDF 생성](images/quarto_knitr.png){#fig-quarto_knitr fig-align="center" width="60%"}

::: callout-warning
#### 한글 PDF

위 예는 한글이 포함되어 있지 않아 간단히 프로세싱되지만, 한글이 포함된 경우에는 한글을 처리하기 위한 레이텍 패키지를 사용하도록 지시를 해 주어야 한다. 이것은 뒤에서 설명한다.
:::

## 콰르토의 장점

기존 훌륭한 주피터 노트북/주피터랩, R 마크다운 시스템을 사용해 왔던 독자들은 추가로 콰르토를 사용할 필요성에 대해 의문을 제기할 수 있다. 내가 보기에 다음과 같은 장점이 있다.

1.  R 유저로 평상시 RStudio 통합개발환경에서 R 코드를 작성하고, R 마크다운 시스템을 사용하여 문서를 만들어 왔던 독자

    -   **언어 확장성**: 콰르토가 기존의 R 마크다운 시스템을 확장한 것이기 때문에 아마도 여기에 속하는 독자들은 어렵지 않게 콰로트를 시작할 수 있을 것 같다. R 마크다운은 이미 뛰어난 도구이고 성숙한 도구인 것은 맞다. 그렇지만 파이썬이나 자바스크립트 언어 사용과 같은 확장성이 문제가 된다. R `reticulate` 패키지로 파이썬을 끌어와 쓸 수 있지만 까다로운 측면이 있다.

    -   **더 풍부한 기능을 가진 결과물 제작**: 콰르토를 사용하면 기존 R 마크다운에서 구현하기 쉽지 않았던 작업도 쉽게 해낼 수 있다. 이를테면 2\~3개의 열로 내용을 배치하는 방법(layout), `knitr::include_graphics()`을 사용하지 않고 그림을 들을 가지고 와서 배치하는 방법, 표/그림 등 상호 참조 기능의 체계화, 웹 사이트와 같은 복합 문서에서 인덱스를 사용한 검색 기능 등이다.

    -   **문법과 사용 방법의 유사성**: 콰르토는 기존 R 마크다운의 개념을 원리를 그대로 유지하고 있다. 문법의 차이가 좀 있으나 익숙해지는 데 그다지 어려움이 없을 것이다. 따라서 그렇게 많은 노력을 기울이지 않아도 얻을 수 있는 있는 이점은 훨씬 크다.

2.  Python 언어를 주로 사용하여 주피터 노트북(Jupyter Notebook) 또는 주피터랩(JupyterLab)에서 데이터 분석 작업을 해왔던 독자

    - **출판이 가능한 결과물 제작**: 주피터 노트북/주피터랩은 너무나 훌륭한 도구이다. 주피터는 커널이라는 메카니즘을 통해 언어에 구애받지 않는 시스템(language-agnostic)을 일찍부터 추구해 왔기 때문에 언어 확장성 측면에서 최고라 말할 수 있다. 사용자 인터페이스도 아주 직관적이고 데이터 분석 성능도 우수하고, 웹에는 수많은 자료들이 주피터 노트북 파일로 공유되고 유통된다. 데이터 과학자들에게는 거의 이메일과 같은 커뮤니케이션 도구이다. **보통 사용자의 입장에서 단점을 꼽으라면 나는 주피터 노트북으로 LaTeX 시스템이나 R 마크다운 시스템 만큼 아름다운 문서를 만들지 못한다는 점을 지적하고 싶다.** 내부에 `nbconvert` 같은 도구들이 있지는 하지만 사용하려면 깊게 공부해야 한다. 콰르토는 기존 주피터 노트북 시스템과 그 파일을 그대로 사용한다. 거기에 팬독 마크다운을 통해 학술 논문 수준에서 필요한 다양한 기능들을 얹어 사용하고, 그렇게 작성된 노트북 파일을 프로세싱하여 아름다운 문서를 만들 수 있게 해 준다. [@fig-why_quarto_jupyter]을 보자. 그림에는 HTML 포맷 예를 보였으나 똑같은 `.ipynb` 파일로 MS 워드 문서로 렌더링해도 이와 같은 문서가 만들어진다. 콰르토는 약간의 기계적 냄새가 나는 주피터 노트북 파일을 가지고 좀 더 인간적인 문서로 바꾸는 기능을 제공한다.

        ![콰르토는 기존 주피터 노트북 파일을 아름다운 문서로 바꿔줄 수있다.](images/why_quarto_jupyter.png){#fig-why_quarto_jupyter fig-align="center" width="80%"}

    - **일반 텍스트 에디터에서 자유롭게 작성**: 주피터 노트북/주피터랩의 단점 가운데 하나는 웹 브라우저에서 사용되어 사용자는 약간 갇힌 느낌을 받는다. 그리고 `.ipynb` 파일이 JSON 포맷으로 되어 있기 때문에 소스 파일을 일반 텍스트에서 열어서 편집하기 어렵다. 콰르트는 여기서 해방될 수 있는 길을 열어 준다. 일반 텍스트에 에디터에서 작업할 수 있고, 파일도 일반 텍스트로 저정할 수 있다. 이것을 주피터 노트북에서 열어서 실행해도 전혀 문제가 되지 않는다. 

내가 콰르토를 좋아하는 이유 가운데 하나는 기존 도구들을 존중한다는 점이다. 뭔가 새로운 것을 추가하면서 기존의 것을 무용지물로 만들게 되면 문제가 크다. 콰르토는 그렇지 않다. 주피터 노트북 사용자나 R 마크다운 사용자에게 콰르토는 기존 것을 엎으라고 하지 않고, 부가적인 가치를 얻을 수 있게 도와준다.


## 연구재현성을 위한 콰르토

나는 콰르토가 최고의 데이터 과학 계산 도구이며 또한 연구 재현성을 구현하기 위한 최고의 플랫폼이라고 주장한다.

컴퓨테이션 노트북은 실험 단계의 연구 재현성에는 개입하지 못한다. 그렇지만 실험의 결과로 획득된 데이터부터 논문이나 보고서에 이르는 과정은 재현가능하다. 왜냐하면 인쇄되어 출판되는 논문과 더불에 웹 사이트에 관련 데이터가 올라가고, 이 데이터를 프로세싱하여 통계 처리를 하고, 표를 만들고, 그래프를 그린 과정들을 컴퓨테이셔널 노트북으로 웹에 게시된다면, 동료 심사자(peer reviewers)를 비롯하여 논문을 읽는 독자들은 그 과정을 정확하게 따라해 볼 수 있다[@beg2021].

각종 학회, 대학, 연구 관리 기관, 인허가 주무 관청 등에서 연구 재현성을 투명하게 가지고 가기로 결정했다면, 기관들은 기관이 가지고 있는 웹 서버에서 콰르토와 같은 도구를 운영하게 될 것이다. 그런 시스템을 구축하기 위해서라도 주피터 노트북, R 마크다운/노트북 노트북 시스템과 그런 노트북을 통해서 최종 결과를 출판물과 같은 수준의 결과물로 만들 수 있는 콰르토와 같은 도구에 주목할 필요가 있다.

연구 윤리와 연구재현성에 관한 내용은 BRIC 사이트에 있는 [김재호 선생님의 글](https://www.ibric.org/myboard/read.php?Board=report&id=3913)을 참고하면 좋겠다.

## 정리

이 장에서 컴퓨테이셔널 노트북의 일반적 특징을 설명하였다. 이런 컴퓨테이셔널 노트북은 데이터 탐색에 적합한 도구로 데이터 과학의 발전과 더불어 종류도 다양해지고 용도도 넓어지고 있는 상황이다. 콰르토는 기존에 유용성이 검증된 컴퓨테이셔널 노트북을 엔진으로 활용하면서, 그 위에 과학기술 계산 및 출판을 위해 필요한 여러 요소들을 추가한 시스템이다. 그 요소들이 어떤 것인지는 이어지는 장들에서 하나씩 설명될 것이다.

## 참고문헌